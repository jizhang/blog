<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Translation | Ji ZHANG's Blog]]></title>
  <link href="http://shzhangji.com/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://shzhangji.com/"/>
  <updated>2013-10-02T22:21:48+08:00</updated>
  <id>http://shzhangji.com/</id>
  <author>
    <name><![CDATA[Ji ZHANG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible FAQ]]></title>
    <link href="http://shzhangji.com/blog/2013/06/11/ansible-faq/"/>
    <updated>2013-06-11T21:18:00+08:00</updated>
    <id>http://shzhangji.com/blog/2013/06/11/ansible-faq</id>
    <content type="html"><![CDATA[<p>本文是从原Ansible官网的FAQ页面翻译而来，网站改版后该页面已无法访问，但可以从<a href="https://github.com/ansible/ansible.github.com/blob/4a2bf7f60a020f0d0a7b042056fc3dd8716588f2/faq.html">Github历史提交</a>中获得。翻译这篇原始FAQ文档是因为它陈述了Ansible这款工具诞生的原因，设计思路和特性，以及与Puppet、Fabric等同类软件的比较，可以让我们对Ansible有一个整体的了解，所以值得使用者一读。</p>

<h2>目录</h2>

<ul>
<li>为什么命名为“Ansible”？</li>
<li>Ansible受到了谁的启发？</li>
<li>与同类软件比较

<ul>
<li>Func？</li>
<li>Puppet？</li>
<li>Chef？</li>
<li>Capistrano/Fabric？</li>
</ul>
</li>
<li>其它问题

<ul>
<li>Ansible的安全性如何？</li>
<li>Ansible如何扩展？</li>
<li>是否支持SSH以外的协议？</li>
<li>Ansible的适用场景有哪些？</li>
</ul>
</li>
</ul>


<h2>为什么命名为“Ansible”？</h2>

<p>我最喜爱的书籍之一是奥森·斯科特·卡特的《安德的游戏》。在这本书中，“Ansible”是一种能够跨越时空的即时通讯工具。强烈推荐这本书！</p>

<!-- more -->


<h2>Ansible受到了谁的启发？</h2>

<p>我在Red Hat任职期间主要开发Cobbler，很快我和几个同事就发现在部署工具（Cobbler）和配置管理工具（cfengine、Puppet等）之间有一个空缺，即如何更高效地执行临时性的任务。虽然当时有一些并行调用SSH脚本的方案，但并没有形成统一的API。所以我们（Adrian Likins、Seth Vidal、我）就开发了一个SSH分布式脚本框架——Func。</p>

<p>我一直想在Func的基础上开发一个配置管理工具，但因为忙于Cobbler和其他项目的开发，一直没有动手。在此期间，John Eckersberg开发了名为Taboot的自动化部署工具，它基于Func，采用YAML描述，和目前Ansible中的Playbooks很像。</p>

<p>近期我在一家新公司尝试引入Func，但遇到一些SSL和DNS方面的问题，所以想要开发一个更为简单的工具，吸收Func中优秀的理念，并与我在Puppet Labs的工作经验相结合。我希望这一工具能够易于学习，且不需要进行任何安装步骤。使用它不需要引入一整套新的理论，像Puppet和Chef那样，从而降低被某些运维团队排挤的可能。</p>

<p>我也曾参与过一些大型网站的应用部署，发觉现有的配置管理工具都太过复杂了，超过了这些公司的需求。程序发布的过程很繁复，需要一个简单的工具来帮助开发和运维人员。我不想教授他们Puppet或Chef，而且他们也不愿学习这些工具。</p>

<p>于是我便思考，应用程序的部署就应该那么复杂吗？答案是否定的。</p>

<p>我是否能开发一款工具，让运维人员能够在15分钟内学会使用，并用自己熟悉的语言来扩展它？这就是Ansible的由来。运维人员对自己的服务器设施最清楚，Ansible深知这一点，并将同类工具中最核心的功能提取出来，供我们使用。</p>

<p>Ansible不仅易于学习和扩展，它更是集配置管理、应用部署、临时任务等功能于一身。它非常强大，甚至前所未有。</p>

<p>我很想知道你对Ansible的看法，到邮件列表里发表一下意见吧。</p>

<h2>与同类软件比较</h2>

<h3>Func？</h3>

<p>Ansible默认使用SSH，而非SSL和守护进程，无需在远程服务器上安装任何软件。你可以使用任何语言编写插件，只要它能够返回JSON格式即可。Ansible的API深受Func的影响，但它和Func相较提供了配置管理和多节点统一化部署（Playbooks）等功能。</p>

<h3>Puppet？</h3>

<p>首先我要强调的是，如果没有Puppet，就不会有Ansible。Puppet从cfengine中吸收了配置管理的概念，并更合理地加以实现。但是，我依旧认为它可以再简单一些。</p>

<p>Ansible的playbook是一套完整的配置管理系统。和Puppet不同，playbook在编写时就隐含了执行顺序（和Chef类似），但同时也提供了事件机制（和Puppet类似），可以说是结合了两者的优点。</p>

<p>Ansible没有中心节点的概念，从而避免了惊群效应。它一开始就是为多节点部署设计的，这点Puppet很难做到，因为它是一种“拉取”的架构。Ansible以“推送”为基础，从而能够定义执行顺序，同时只操作一部分服务器，无需关注它们的依赖关系。又因为Ansible可以用任何语言进行扩展，因此并不是只有专业的程序员才能为其开发插件。</p>

<p>Ansible中资源的概念深受Puppet的启发，甚至“state”这一关键字直接来自Puppet的“ensure”一词。和Puppet不同的是，Ansbile可以用任何语言进行扩展，甚至是Bash，只需返回JSON格式的输出即可。你不需要懂得Ruby。</p>

<p>和Puppet不同，Ansible若在配置某台服务器时发生错误，它会立即终止这台服务器的配置过程。它提倡的是“提前崩溃”，修正错误，而非最大化应用。这一点在我们需要配置包含依赖关系的服务器架构时尤为重要。</p>

<p>Ansible的学习曲线非常平滑，你不需要掌握编程技能，更不需要学习新的语言。Ansible内置的功能应该能够满足超过80%的用户需求，而且它不会遇到扩展性方面的瓶颈（因为没有中心节点）。</p>

<p>如果系统中安装了factor，Ansible同样支持从中获取系统信息。Ansible使用jinja2作为模板语言，类似于Puppet使用erb文件作为模板。Ansible可以使用自己的信息收集工具，因此factor并不是必需的。</p>

<h3>Chef？</h3>

<p>Ansible与Chef的区别和Puppet类似。Chef的配置非常困难，而且需要你掌握Ruby语言。也因为如此，Chef在Rails使用者中很流行。</p>

<p>Ansible是按照编写顺序来执行任务的，而不是显示地定义依赖关系，这点和Chef相似。但Ansible更进一步，它支持事件触发，比如修改了Apache的配置文件，Apache就会被重启。</p>

<p>和Chef不同的是，Ansible的playbook不是一门编程语言，而是一种可以存储的数据结构。这就意味着你的运维工作不是一项开发型的任务，测试起来也相对简单。</p>

<p>无论你有怎样的语言背景，都可以使用Ansible。Chef和Puppet有超过六万行的代码，而Ansible则是一段小巧简单的程序。我相信这一点会使得Ansible更加健壮和可靠，并汇聚一批活跃的社区贡献者——因为任何人都可以提交补丁或是模块。</p>

<p>Ansible同样支持从ohai中获取系统信息，当然这同样不是必需的。</p>

<h3>Capistrano/Fabric？</h3>

<p>这些工具并不适合用作服务器配置工具，它们主要用于应用程序的部署。</p>

<p>而Ansible则提供了完整的配置管理，以及在扩展性方面提供了一些高级特性。</p>

<p>Ansible playbook的语法简介只占一个HTML页面，有着非常平缓的学习曲线。由于Ansible使用了“推送”的设计，因此对系统管理员（不仅仅是开发者）同样适用，并能用它处理各种临时性的任务。</p>

<h2>其它问题</h2>

<h3>Ansible的安全性如何？</h3>

<p>Ansible没有守护进程，主要使用OpenSSH进行通信，这是一款已被反复检验并广泛使用的软件。其它工具都会在远程服务器上以root用户运行守护进程，因此相较于这些工具，Ansible会更为安全，且无需担心网络方面的问题。</p>

<p>如果你的中心节点遭到入侵（或是被恶意员工登录），只要你是使用SSH-agent、或是经过加密的密码，那你的密钥仍然是被锁定的，别人无法操控你的节点。而对于Chef、Puppet等工具来说，一旦配置文件遭到篡改，那危及的将是整个网络。</p>

<p>此外，由于Ansible没有守护进程，可以节省下一部分内存和计算资源，这对需要最大化性能的用户来说也是一个优点。</p>

<h3>Ansible如何扩展？</h3>

<p>无论是在单次执行模式还是playbook模式下，Ansible都可以并行执行任务，这要感谢Python提供的多进程处理模块。</p>

<p>你可以自行决定要一次性配置5台还是50台服务器，这取决于服务器的计算能力，以及你想要多快完成任务。</p>

<p>由于没有守护进程，所以平时不会占用任何资源，而且你不用担心一次性有太多节点一起从控制节点上获取信息。</p>

<p>对于SSH，Ansible默认使用paramiko库，当然也能使用原始的openssh。Ansible可以利用SSH的ControlMaster特性来重用网络连接。</p>

<p>当要维护上万个节点时，单个Ansible playbook可能不太合理，这时你就能使用Ansible的“拉取”模式。这种模式下需要配合git和cron，可以扩展到任意多台服务器。“拉取”模式可以使用本地连接，或是SSH。关于这个模式的详细说明可以在帮助文档的“Advanced Playbooks”一节查阅。即使在“拉取”模式下，你同样能够享受到Ansible的种种便利。</p>

<p>如果你想进一步探讨扩展性，可以加入到邮件列表中。</p>

<h3>是否支持SSH以外的协议？</h3>

<p>目前Ansible支持SSH和本地连接，但它的接口实际上是非常易于扩展的，因此你可以编写补丁来使Ansible运行于消息系统或XMPP协议之上。</p>

<p>如果你有任何建议，可以加入到邮件列表中一起探讨。Ansible中对于连接的管理都已单独抽象出来，有很强的可扩性。</p>

<h3>Ansible的适用场景有哪些？</h3>

<p>最适场景？使用playbook进行多节点云主机部署；从一个初始的操作系统开始部署应用，或是配置一个现有的系统。</p>

<p>Ansible同样适用于执行临时性的任务，能够用于各类 Unix-like 系统，因为它使用的就是系统本身自带的工具，无需安装额外软件。</p>

<p>你还可以用Ansible来编写各类脚本，用于收集信息、执行各种任务，对QA、运维等团队均适用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Hadoop YARN - 项目背景与简介]]></title>
    <link href="http://shzhangji.com/blog/2013/05/25/apache-hadoop-yarn-background-and-an-overview/"/>
    <updated>2013-05-25T10:57:00+08:00</updated>
    <id>http://shzhangji.com/blog/2013/05/25/apache-hadoop-yarn-background-and-an-overview</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://hortonworks.com/blog/apache-hadoop-yarn-background-and-an-overview/">http://hortonworks.com/blog/apache-hadoop-yarn-background-and-an-overview/</a></p>

<p>日前，Apache Hadoop YARN已被提升为Apache软件基金会的子项目，这是一个值得庆祝的里程碑。这里我们也第一时间为各位献上Apache Hadoop YARN项目的系列介绍文章。YARN是一个普适的、分布式的应用管理框架，运行于Hadoop集群之上，用以替代传统的Apache Hadoop MapReduce框架。</p>

<h2>MapReduce 模式</h2>

<p>本质上来说，MapReduce模型包含两个部分：一是Map过程，将数据拆分成若干份，分别处理，彼此之间没有依赖关系；二是Reduce过程，将中间结果汇总计算成最终结果。这是一种简单而又条件苛刻的模型，但也促使它成为高效和极易扩展的并行计算方式。</p>

<p>Apache Hadoop MapReduce是当下最流行的开源MapReduce模型。</p>

<p>特别地，当MapReduce配合分布式文件系统，类似Apache Hadoop HDFS，就能在大集群上提供高吞吐量的计算，这一经济效应是Hadoop得以流行的重要原因。</p>

<p>这一模式成功的原因之一是，它使用的是“移动计算能力至数据节点”而非通过网络“移动数据至计算节点”的方式。具体来说，一个MapReduce任务会被调度到输入数据所在的HDFS节点执行，这会极大地减少I/O支出，因为大部分I/O会发生在本地磁盘或是同一机架中——这是核心优势。</p>

<!-- more -->


<h3>回顾2011年的Apache Hadoop MapReduce</h3>

<p>Apache Hadoop MapReduce是<a href="http://www.apache.org/">Apache基金会</a>下的开源项目，实现了如上所述的MapReduce编程模式。作为一个在该项目中全职开发了六年的工作者，我通常会将它细分为以下几个部分：</p>

<ul>
<li>提供给最终用户使用的 <strong>MapReduce API</strong> ，用来编写MapReduce应用程序。</li>
<li><strong>MapReduce框架</strong> ，用来实现运行时的各个阶段，即map、sort/shuffle/merge、reduce。</li>
<li><strong>MapReduce系统</strong> ，一个完整的后端系统，用来运行用户的MapReduce应用程序，管理集群资源，调度上千个并发脚本。</li>
</ul>


<p>这样的划分可以带来非常明显的优势，即最终用户只需关心MapReduce API，而让框架和后端系统去处理资源管理、容错、调度等细节。</p>

<p>目前，Apache Hadoop MapReduce系统由一个JobTracker和多个TaskTracker组成，也分别称他们为master和slave节点。</p>

<p><img src="http://hortonworks.com/wp-content/uploads/2012/08/MRArch.png" alt="MRArch.png" /></p>

<p>JobTracker负责的工作包括资源管理（即管理工作节点TaskTracker），跟踪资源消耗和可用情况，以及每个脚本的生命周期（脚本调度，进度跟踪，容错等）。</p>

<p>TaskTracker的职责比较简单：根据JobTracker的指令来启动和关闭工作进程，并定时向JobTracker汇报处理进度。</p>

<p>其实很早我们就意识到Hadoop的MapReduce框架需要被拆解和调整，特别是JobTracker，我们需要提升它的可扩展性，提高对集群的利用率，让用户能够方便地进行升级（即用户需要的敏捷性），并能支持MapReduce以外的脚本类型。</p>

<p>长久以来，我们都在做修复和更新，如近期加入的JobTracker高可用和HDFS故障恢复（这两个特性都已包含在<a href="http://hortonworks.com/download/">Hortonworks Data Platform v1</a>中）。但我们渐渐发现，这些特性会增加维护成本，而且并不能解决一些核心问题，如支持非MapReduce脚本，以及敏捷性。</p>

<h3>为什么要支持非MapReduce类型的脚本？</h3>

<p>MapReduce对大部分应用程序来说已经足够，但仍有一些场景并不适用，如图形计算（<a href="http://googleresearch.blogspot.com/2009/06/large-scale-graph-computing-at-google.html">Google Pregel</a> / <a href="http://giraph.apache.org/">Apache Giraph</a>）、交互式建模（<a href="http://en.wikipedia.org/wiki/Message_Passing_Interface">MPI</a>）。当所有的企业数据都已存放在Hadoop HDFS中时，支持多种处理模型就变得额外重要。</p>

<p>此外，MapReduce本质上是以批量处理为核心的，对于日益增长的实时和近实时处理的客户需求，如流式计算以及CEPFresil等，就无能为力了。</p>

<p>如果Hadoop能够支持这一特性，企业会从对Hadoop的投资中得到更多回报，因为他们可以减少数据迁移所需要的管理和维护成本。</p>

<h3>为何要提升可扩展性？</h3>

<p>根据摩尔定律，同样的价格所能购买到的计算能力一直在大幅上升。让我们看看以下两组数字：</p>

<ul>
<li>2009年：8核CPU，16GB内存，4x1TB硬盘；</li>
<li>2012年：16核以上的CPU，48至96GB内存，12x2TB或12x3TB的硬盘。</li>
</ul>


<p>同样价格的服务器，其各方面的计算能力要比两到三年以前提升了两倍。Hadoop的MapReduce在2009年便能支持约5000台节点，所以随着机器性能的提升，对其高可扩的要求也与日俱增。</p>

<h3>集群资源利用率不高的典型症候是？</h3>

<p>在现有的系统中，集群由节点组成，节点上有map槽位和reduce槽位，两者不能互相替代。这样一来，很有可能map槽位已经耗尽，而reduce还是空闲的，反之亦然。修复这一问题对于提升集群资源利用率来说是必不可少的。</p>

<h3>敏捷性为何重要？</h3>

<p>在现实应用中，Hadoop通常会部署在共享的、多租户的系统上。所以，对Hadoop进行升级时会影响很大一部分甚至是所有的应用。基于这一点，用户会对升级持保守态度，因为不想因此引发一系列的问题。所以，一个支持多版本Hadoop的架构就变得非常重要。</p>

<h2>Apache Hadoop YARN 诞生</h2>

<p>YARN的核心思想是将JobTracker的两个职能，即资源管理和脚本调度/监控，分解为两个独立的组件：全局ResourceManager以及按应用拆分的ApplicationMaster（AM）。</p>

<p>主节点的ResourceManager以及其它节电的NodeManager（NM），形成了一个新的更为通用的分布式应用管理模式。</p>

<p>ResourceManager负责应用程序的资源分配。ApplicationMaster会和ResourceManager进行协商，并与节点上的NodeManager协作，运行和监控每个工作进程。</p>

<p>ResourceManager的调度器是可定制的，能够根据计算能力、队列大小进行资源调配。调度器不包含任何对工作进程的监控和跟踪，不会去重启失败的脚本。调度器会根据应用程序申请的资源进行分配，它是建立在一个资源容器抽象层（Resource Container）之上的，其中包括了内存、CPU、硬盘、网络等要素信息。</p>

<p>NodeManager运行在每个节点之上，负责运行应用程序的工作进程，监控它们的资源占用情况，并向ResourceManager汇报。</p>

<p>每个应用都会有一个专属的ApplicationMaster，它会负责和调度器协商资源分配，跟踪工作进程的状态和进度。ApplicationMaster本身也是以一个工作进程来运行的。</p>

<p>以下是YARN的架构图：</p>

<p><img src="http://hortonworks.com/wp-content/uploads/2012/08/YARNArch.png" alt="YARNArch.png" /></p>

<p>值得一提的是，我们在为YARN开发MapReduce API时没有做任何较大的改动，所以现有的程序可以很方便地进行迁移。关于这点我们会在以后的文章中详述。</p>

<p>下一节我们会深入了解YARN的架构，阐述它所带来的各种优点，如高可扩、支持多类型脚本（MapReduce、MPI等），以及它是如何提升集群资源利用率的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascalog：基于Clojure的Hadoop查询语言]]></title>
    <link href="http://shzhangji.com/blog/2013/05/01/introducing-cascalog-a-clojure-based-query-language-for-hado/"/>
    <updated>2013-05-01T18:01:00+08:00</updated>
    <id>http://shzhangji.com/blog/2013/05/01/introducing-cascalog-a-clojure-based-query-language-for-hado</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://nathanmarz.com/blog/introducing-cascalog-a-clojure-based-query-language-for-hado.html">http://nathanmarz.com/blog/introducing-cascalog-a-clojure-based-query-language-for-hado.html</a></p>

<p>我非常兴奋地告诉大家，<a href="http://github.com/nathanmarz/cascalog">Cascalog</a>开源了！Cascalog受<a href="http://en.wikipedia.org/wiki/Datalog">Datalog</a>启发，是一种基于Clojure、运行于Hadoop平台上的查询语言。</p>

<h2>特点</h2>

<ul>
<li><strong>简单</strong> &ndash; 使用相同的语法编写函数、过滤规则、聚合运算；数据联合（join）变得简单而自然。</li>
<li><strong>表达能力强</strong> &ndash; 强大的逻辑组合条件，你可以在查询语句中任意编写Clojure函数。</li>
<li><strong>交互性</strong> &ndash; 可以在Clojure REPL中执行查询语句。</li>
<li><strong>可扩展</strong> &ndash; Cascalog的查询语句是一组MapReduce脚本。</li>
<li><strong>任意数据源</strong> &ndash; HDFS、数据库、本地数据、以及任何能够使用Cascading的<code>Tap</code>读取的数据。</li>
<li><strong>正确处理空值</strong> &ndash; 空值往往让事情变得棘手。Cascalog提供了内置的“非空变量”来自动过滤空值。</li>
<li><strong>与Cascading结合</strong> &ndash; 使用Cascalog定义的流程可以在Cascading中直接使用，反之亦然。</li>
<li><strong>与Clojure结合</strong> &ndash; 能够使用普通的Clojure函数来编写操作流程、过滤规则，又因为Cascalog是一种Clojure DSL，因此也能在其他Clojure代码中使用。</li>
</ul>


<!--more-->


<p>好，下面就让我们开始Cascalog的学习之旅！我会用一系列的示例来介绍Cascalog。这些示例会使用到项目本身提供的“试验场”数据集。我建议你立刻下载Cascalog，一边阅读本文一边在REPL中操作。（安装启动过程只有几分钟，README中有步骤）</p>

<h2>基本查询</h2>

<p>首先让我们启动REPL，并加载“试验场”数据集：</p>

<p><code>clojure
lein repl
user=&gt; (use 'cascalog.playground) (bootstrap)
</code></p>

<p>以上语句会加载本文用到的所有模块和数据。你可以阅读项目中的<code>playground.clj</code>文件来查看这些数据。下面让我们执行第一个查询语句，找出年龄为25岁的人：</p>

<p><code>clojure
user=&gt; (?&lt;- (stdout) [?person] (age ?person 25))
</code></p>

<p>这条查询语句可以这样阅读：找出所有<code>age</code>等于25的<code>?person</code>。执行过程中你可以看到Hadoop输出的日志信息，几秒钟后就能看到查询结果。</p>

<p>好，让我们尝试稍复杂的例子。我们来做一个范围查询，找出年龄小于30的人：</p>

<p><code>clojure
user=&gt; (?&lt;- (stdout) [?person] (age ?person ?age) (&lt; ?age 30))
</code></p>

<p>看起来也不复杂。这条语句中，我们将人的年龄绑定到了<code>?age</code>变量中，并对该变量做出了“小于30”的限定。</p>

<p>我们重新执行这条语句，只是这次会将人的年龄也输出出来：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?person ?age] (age ?person ?age)</p>

<pre><code>        (&lt; ?age 30))
</code></pre>

<p>```</p>

<p>我们要做的仅仅是将<code>?age</code>添加到向量中去。</p>

<p>让我们执行另一条查询，找出艾米丽关注的所有男性：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?person] (follows &ldquo;emily&rdquo; ?person)</p>

<pre><code>        (gender ?person "m"))
</code></pre>

<p>```</p>

<p>可能你没有注意到，这条语句使用了联合查询。各个数据集中的<code>?person</code>值都必须对应，而<code>follows</code>和<code>gender</code>分属于不同的数据集，Cascalog便会使用联合查询。</p>

<h2>查询语句的结构</h2>

<p>让我们分析一下查询语句的结构，以下面这条语句为例：</p>

<p>```clojure
user=> (?&lt;&ndash; [stdout] [?person ?a2] (age ?person ?age)</p>

<pre><code>        (&lt; ?age 30) (* 2 ?age :&gt; ?a2))
</code></pre>

<p>```</p>

<p><code>?&lt;-</code>操作符出现的频率很高，它能同时定义并执行一条查询。<code>?&lt;-</code>实际上是对<code>&lt;-</code>和<code>?-</code>的包装。我们之后会看到如何使用这些操作符编写更为复杂的查询语句。</p>

<p>首先，我们指定了查询结果的输出目的地，就是这里的<code>(stdout)</code>。<code>(stdout)</code>会创建一个Cascading的<code>tap</code>组件，它会在查询结束后将结果打印到标准输出中。我们可以使用任意一种Cascading的<code>tap</code>组件，也就是说输出结果的格式可以是序列文件（Sequence file）、文本文件等等；也可以输出到任何地方，如本地磁盘、HDFS、数据库等。</p>

<p>在定义了输出目的地后，我们使用Clojure的向量结构来定义输出结果所包含的内容。本例中，我们定义的是<code>?person</code>和<code>?a2</code>。</p>

<p>接下来，我们定义了一系列的约束条件。Cascalog有三种约束条件：</p>

<ol>
<li>生成器（Generator）：表示一个数据源，可以是以下两种类型：

<ul>
<li>Cascading Tap：如HDFS上某个路径中的文件；</li>
<li>一个已经使用<code>&lt;-</code>定义的查询。</li>
</ul>
</li>
<li>操作器（Operation）：引入预定义的变量，将其绑定至新的变量，或是设定一个过滤条件。</li>
<li>集合器（Aggregator）：计数、求和、最小值、最大值等等。</li>
</ol>


<p>约束条件由名称、一组输入变量、以及一组输出变量构成。上述查询中的约束条件有：</p>

<ul>
<li>(age ?person ?age)</li>
<li>(&lt; ?age 30)</li>
<li>(* 2 ?age :> ?a2)</li>
</ul>


<p>其中，<code>:&gt;</code>关键字用于将输入变量和输出变量隔开。如果没有这个关键字，那么该变量在操作器中就会被识别为输入变量，在生成器和集合器中会被认为是输出变量。</p>

<p><code>age</code>约束指向<code>playground.clj</code>中定义的一个<code>tap</code>，所以它是一个生成器，会输出<code>?person</code>和<code>?age</code>这两个数据。</p>

<p><code>&lt;</code>约束是一个Clojure函数，因为没有指定输出变量，所以这条约束会构成一个过滤器，将<code>?age</code>小于30的记录筛选出来。如果我们这样写：</p>

<p><code>clojure
(&lt; ?age 30 :&gt; ?young)
</code></p>

<p>那么<code>&lt;</code>约束会将“年龄是否小于30”作为一个布尔值传递给<code>?young</code>变量。</p>

<p>约束之间的顺序不重要，因为Cascalog是声明式语言。</p>

<h2>变量替换为常量</h2>

<p>变量是以<code>?</code>或<code>!</code>起始的标识。有时你不在意变量的值，可以直接用<code>_</code>代替。其他的变量则会在解析时替换成常量。我们已经在很多示例中用到这一特性了。下面这个示例中，我们将输出变量作为一种过滤条件：</p>

<p><code>clojure
(* 4 ?v2 :&gt; 100)
</code></p>

<p>这里使用了两个常量：4和100。4是一个输入变量，100则是作为一个过滤条件，只有满足<code>?v2</code>乘以4等于100的记录才会被筛选出来。字符串、数字、以及其他基本类型和对象类型，只要在Hadoop有对应的序列化操作，都可以被作为常量使用。</p>

<p>让我们回到示例中。找出所有关注了比自己年龄小的用户的列表：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?person1 ?person2]</p>

<pre><code>        (age ?person1 ?age1) (follows ?person1 ?person2)
        (age ?person2 ?age2) (&lt; ?age2 ?age1))
</code></pre>

<p>```</p>

<p>同时，我们将年龄差异也输出出来：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?person1 ?person2 ?delta]</p>

<pre><code>        (age ?person1 ?age1) (follows ?person1 ?person2)
        (age ?person2 ?age2) (- ?age2 ?age1 :&gt; ?delta)
        (&lt; ?delta 0))
</code></pre>

<p>```</p>

<h2>聚合</h2>

<p>下面让我们看看聚合查询的使用方法。统计所有年龄小于30的用户人数：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?count] (age _ ?a) (&lt; ?a 30)</p>

<pre><code>        (c/count ?count))
</code></pre>

<p>```</p>

<p>这条查询会统计所有的记录。我们也可以只聚合部分记录。比如，让我们找出每个人所关注的用户的数量：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?person ?count] (follows ?person _)</p>

<pre><code>        (c/count ?count))
</code></pre>

<p>```</p>

<p>因为我们在输出结果中指定了<code>?person</code>这个变量，所以Cascalog会将数据记录按照用户来分组，然后使用<code>c/count</code>进行聚合运算。</p>

<p>你可以在单个查询中使用多个聚合条件，它们的分组方式是一致的。例如，我们可以计算每个国家的用户的平均年龄，使用计数和求和这两种聚合方式：</p>

<p>```clojure
user=> (?&lt;&ndash; (stdout) [?country ?avg]</p>

<pre><code>        (location ?person ?country _ _) (age ?person ?age)
        (c/count ?count) (c/sum ?age :&gt; ?sum)
        (div ?sum ?count :&gt; ?avg))
</code></pre>

<p>```</p>

<p>可以看到，我们对<code>?sum</code>和<code>?count</code>这两个聚合结果执行了<code>div</code>操作，该操作会在聚合过程结束后进行。</p>

<h2>自定义操作</h2>

<p>下面我们来编写一个查询，统计几句话中每个单词的出现次数。首先，我们编写一个自定义操作：</p>

<p>```clojure
user=> (defmapcatop split [sentence]</p>

<pre><code>     (seq (.split sentence "\\s+")))
</code></pre>

<p>user=> (?&lt;&ndash; (stdout) [?word ?count] (sentence ?s)</p>

<pre><code>        (split ?s :&gt; ?word) (c/count ?count))
</code></pre>

<p>```</p>

<p><code>defmapcatop split</code>定义了一个方法，这个方法接收一个参数<code>sentence</code>，并会输出0个或多个元组（tuple）。<code>deffilterop</code>可以用来定义一个返回布尔型的方法，用来筛选记录；<code>defmapop</code>定义的函数会返回一个元组；<code>defaggregateop</code>定义一个聚合函数。这些函数都能在Cascalog工作流API中使用，我会在另一篇博客中叙述。</p>

<p>在上述查询中，如果单词字母大小写不一致，会被分别统计。我们用以下方法来修复这个问题：</p>

<p>```clojure
user=> (defn lowercase [w] (.toLowerCase w))
user=> (?&lt;&ndash; (stdout) [?word ?count]</p>

<pre><code>        (sentence ?s) (split ?s :&gt; ?word1)
        (lowercase ?word1 :&gt; ?word) (c/count ?count))
</code></pre>

<p>```</p>

<p>可以看到，这里直接使用了纯Clojure编写的函数。当这个函数不包含输出变量时，会被作为过滤条件来执行；当包含一个返回值时，则会作为<code>defmapop</code>来解析。而对于返回0个或多个元组的函数，则必须使用<code>defmapcatop</code>来定义。</p>

<p>下面这个查询会按照性别和年龄范围来统计用户数量：</p>

<p>```clojure
user=> (defn agebucket [age]</p>

<pre><code>     (find-first (partial &lt;= age) [17 25 35 45 55 65 100 200]))
</code></pre>

<p>user=> (?&lt;&ndash; (stdout) [?bucket ?gender ?count]</p>

<pre><code>        (age ?person ?age) (gender ?person ?gender)
        (agebucket ?age :&gt; ?bucket) (c/count ?count))
</code></pre>

<p>```</p>

<h2>非空变量</h2>

<p>Cascalog提供了“非空变量”这样的机制来帮助用户处理空值的情况。其实我们每个示例中都在使用这一特性。以<code>?</code>开头的变量都是非空变量，而以<code>!</code>开头的则是可空变量。Cascalog会在执行过程中将空值排除在外。</p>

<p>为了体验非空变量的效果，让我们对比下面这两条查询语句：</p>

<p><code>clojure
user=&gt; (?&lt;- (stdout) [?person ?city] (location ?person _ _ ?city)
user=&gt; (?&lt;- (stdout) [?person !city] (location ?person _ _ !city)
</code></p>

<p>第二组查询结果中会包含空值。</p>

<h2>子查询</h2>

<p>最后，我们来看看更为复杂的查询，我们会用到子查询这一特性。让我们找出关注了两人以上的用户列表，并找出这些用户之间的关注关系：</p>

<p>```clojure
user=> (let [many-follows (&lt;&ndash; [?person] (follows ?person _)</p>

<pre><code>                          (c/count ?c) (&gt; ?c 2))]
        (?&lt;- (stdout) [?person1 ?person2] (many-follows ?person1)
             (many-follows ?person2) (follows ?person1 ?person2)))
</code></pre>

<p>```</p>

<p>这里，我们使用<code>let</code>来定义了一个子查询<code>many-follows</code>。这个子查询是用<code>&lt;-</code>定义的。之后，我们便可以在后续查询中使用这个子查询了。</p>

<p>我们还可以在一个查询中指定多个输出目的地。比如我们想要同时得到<code>many-follows</code>的查询结果：</p>

<p>```clojure
user=> (let [many-follows (&lt;&ndash; [?person] (follows ?person _)</p>

<pre><code>                          (c/count ?c) (&gt; ?c 2))
         active-follows (&lt;- [?p1 ?p2] (many-follows ?p1)
                            (many-follows ?p2) (follows ?p1 ?p2))]
        (?- (stdout) many-follows (stdout) active-follows))
</code></pre>

<p>```</p>

<p>这里我们分别定义了两个查询，没有立刻执行它们，而是在后续的<code>?-</code>中将两个查询分别绑定到了两个<code>tap</code>上，并同时执行。</p>

<h2>小结</h2>

<p>Cascalog目前在还不断的改进中，未来会增加更多查询特性，以及对查询过程的优化。</p>

<p>我非常希望能够得到你对Cascalog的反馈，如果你有任何评论、问题、或是顾虑，请留言，或者在<a href="http://twitter.com/nathanmarz">Twitter</a>上联系我，给我发送邮件<a href="nathan.marz@gmail.com">nathan.marz@gmail.com</a>，或是在freenode的#cascading频道和我聊天。</p>

<p><a href="http://nathanmarz.com/blog/new-cascalog-features">下一篇博客</a>会介绍Cascalog的外联合、排序、组合等特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[柯里化与偏应用（JavaScript描述）]]></title>
    <link href="http://shzhangji.com/blog/2013/03/07/currying-and-partial-application/"/>
    <updated>2013-03-07T20:59:00+08:00</updated>
    <id>http://shzhangji.com/blog/2013/03/07/currying-and-partial-application</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://raganwald.com/2013/03/07/currying-and-partial-application.html">http://raganwald.com/2013/03/07/currying-and-partial-application.html</a></p>

<p>上周末我参加了<a href="http://wrocloverb.com/">wroc_love.rb大会</a>，其间<a href="http://steveklabnik.com/">Steve Klabnik</a>的一张PPT中提到了<a href="https://en.wikipedia.org/wiki/Partial_application">偏应用（Partial Application）</a>和<a href="https://en.wikipedia.org/wiki/Currying">柯里化（Currying）</a>，并说这两者之间的区别如今已经不重要了。但是我不这么认为。</p>

<p>在这周发布的博文中，我用五种方式对<code>this</code>和闭包做了解释，但只有三到四种提到了柯里化。所以这篇博文就重点来谈谈这个。</p>

<h2>函数参数的个数</h2>

<p>在讲解之前，我们先明确一些术语。函数定义时会写明它所接收的参数个数（Arity）。“一元函数”（Unary）接收一个参数，“多元函数”（Polyadic）接收多个参数。还有一些特殊的名称，如“二元函数”（Binary）接收两个参数，“三元函数”（Ternary）接收三个参数等。你可以对照希腊语或拉丁语词汇来创造这些特殊的名称。</p>

<p>有些函数能够接收不定数量的参数，我们称之为“可变参数函数”（Variadic）。不过这类函数、以及不接收参数的函数并不是本文讨论的重点。</p>

<!-- more -->


<h2>偏应用</h2>

<p>偏应用的概念很容易理解，我们可以使用加法函数来做简单的演示，但如果你不介意的话，我想引用<a href="http://allong.es/">allong.es</a>这一JavaScript类库中的代码来做演示，而且它也是会在日常开发中用到的代码。</p>

<p>作为铺垫，我们首先实现一个<code>map</code>函数，用来将某个函数应用到数组的每个元素上：</p>

<p>```javascript
var __map = [].map;</p>

<p>function map (list, unaryFn) {
  return __map.call(list, unaryFn);
};</p>

<p>function square (n) {
  return n * n;
};</p>

<p>map([1, 2, 3], square);
  //=> [1, 4, 9]
```</p>

<p>显然，<code>map</code>是二元函数，<code>square</code>是一元函数。当我们使用<code>[1, 2, 3]</code>和<code>square</code>作为参数来调用<code>map</code>时，我们是将这两个参数 <em>应用（Apply）</em> 到<code>map</code>函数，并获得结果。</p>

<p>由于<code>map</code>函数接收两个参数，我们也提供了两个参数，所以说这是一次 <em>完整应用</em> 。那何谓偏应用（或部分应用）呢？其实就是提供少于指定数量的参数。如，仅提供一个参数来调用<code>map</code>。</p>

<p>如果我们只提供一个参数来调用<code>map</code>会怎么样？我们无法得到所要的结果，只能得到一个新的一元函数，通过调用这个函数并传递缺失的参数后，才能获得结果。</p>

<p>假设现在我们只提供一个参数给<code>map</code>，这个参数是<code>unaryFn</code>。我们从后往前来逐步实现，首先为<code>map</code>函数创建一个包装函数：</p>

<p><code>javascript
function mapWrapper (list, unaryFn) {
  return map(list, unaryFn);
};
</code></p>

<p>然后，我们将这个二元函数分割成两个嵌套的一元函数：</p>

<p>```javascript
function mapWrapper (unaryFn) {
  return function (list) {</p>

<pre><code>return map(list, unaryFn);
</code></pre>

<p>  };
};
```</p>

<p>这样一来，我们就能每次仅传递一个参数来进行调用了：</p>

<p><code>javascript
mapWrapper(square)([1, 2, 3]);
  //=&gt; [1, 4, 9]
</code></p>

<p>和之前的<code>map</code>函数相较，新的函数<code>mapWrapper</code>是一元函数，它的返回值是另一个一元函数，需要再次调用它才能获得返回值。那么偏应用要从何体现？让我们从第二个一元函数着手：</p>

<p>```javascript
var squareAll = mapWrapper(square);
  //=> [function]</p>

<p>squareAll([1, 2, 3]);
  //=> [1, 4, 9]
squareAll([5, 7, 5]);
  //=> [25, 49, 25]
```</p>

<p>我们首先将<code>square</code>这个参数部分应用到了<code>map</code>函数，并获得一个一元函数<code>squareAll</code>，它能实现我们需要的功能。偏应用后的<code>map</code>函数十分便捷，而<a href="http://allong.es/">allong.es</a>库中提供的<code>splat</code>函数做的也是相同的事情。</p>

<p>如果每次想要使用偏应用都需要手动编写这样一个包装函数，程序员显然会想到要自动化实现它。这就是下一节的内容：柯里化。</p>

<h2>柯里化</h2>

<p>首先，我们可以编写一个函数来返回包装器。我们仍然以二元函数为例：</p>

<p>```javascript
function wrapper (unaryFn) {
  return function (list) {</p>

<pre><code>return map(list, unaryFn);
</code></pre>

<p>  };
};
```</p>

<p>将函数<code>map</code>和参数名称替换掉：</p>

<p>```javascript
function wrapper (secondArg) {
  return function (firstArg) {</p>

<pre><code>return binaryFn(firstArg, secondArg);
</code></pre>

<p>  };
};
```</p>

<p>最后，我们再包装一层：</p>

<p>```javascript
function rightmostCurry (binaryFn) {
  return function (secondArg) {</p>

<pre><code>return function (firstArg) {
  return binaryFn(firstArg, secondArg);
};
</code></pre>

<p>  };
};
```</p>

<p>这样一来，我们之前使用的“模式”就抽象出来了。这个函数的用法是：</p>

<p>```javascript
var rightmostCurriedMap = rightmostCurry(map);</p>

<p>var squareAll = rightmostCurriedMap(square);</p>

<p>squareAll([1, 4, 9]);
  //=> [1, 4, 9]
squareAll([5, 7, 5]);
  //=> [25, 49, 25]
```</p>

<p>将一个多元函数转换成一系列一元函数的嵌套调用，这种转换称之为 <strong>柯里化</strong> 。它的名称取自其发明者Haskell Curry，他也重新定义了由<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">Moses Schönfinkel</a>提出的组合子逻辑（Combinatory Logic）。（<a href="#fn:birds">注1</a>）</p>

<p><code>rightmostCurry</code>函数可以将任意二元函数转换为一组一元函数，从传递第二个参数开始，因此才称其为“右起柯里化”。</p>

<p>和它相反的自然是“左起柯里化”，大多数逻辑学家使用“左起柯里化”，所以人们常说的柯里化指的也是左起柯里化：</p>

<p>```javascript
function curry (binaryFn) {
  return function (firstArg) {</p>

<pre><code>return function (secondArg) {
  return binaryFn(firstArg, secondArg);
};
</code></pre>

<p>  };
};</p>

<p>var curriedMap = curry(map),</p>

<pre><code>double = function (n) { n + n; };
</code></pre>

<p>var oneToThreeEach = curriedMap([1, 2, 3]);</p>

<p>oneToThreeEach(square);
  //=> [1, 4, 9]
oneToThreeEach(double);
  //=> [2, 4, 6]
```</p>

<p>那这两种柯里化方式应该如何选择呢？这就要看你的用途了。在上述二元函数的示例中，我们模拟的是一种“主体-客体”（Subject-Object）的语法。第一个参数表示主体，第二个参数表示客体。</p>

<p>当我们使用“右起柯里化”的<code>map</code>函数时，我们即假定主体是那个将被调用多次的函数（unaryFn）。</p>

<p>看到<code>squareAll([1, 2, 3])</code>时，我们会理解为“将数组[1, 2, 3]中的每个元素做平方运算”。使用“右起柯里化”，我们使平方运算成为主体，数组成为客体。而当使用一般的柯里化时，则是让数组作为主体，平方运算作为客体。</p>

<p>另一种理解的方式是看你需要重用哪一部分。通过不同的柯里化方式，你可以选择重用函数还是重用列表。</p>

<h2>再谈偏应用</h2>

<p>上文谈了那么多柯里化，那偏应用呢？事实上，当你有了柯里化，你就不需要偏应用了。同样地，当你使用了偏应用，也不会需要柯里化。所以当你需要为此撰写一篇文章时，最便捷的做法是先描述其中的一个，然后建立在其基础之上来描述另外一个。</p>

<p>首先让我们回顾一下右起柯里化：</p>

<p>```javascript
function rightmostCurry (binaryFn) {
  return function (secondArg) {</p>

<pre><code>return function (firstArg) {
  return binaryFn(firstArg, secondArg);
};
</code></pre>

<p>  };
};
```</p>

<p>你会发现在实际使用过程中会一直出现以下代码：</p>

<p>```javascript
var squareAll = rightmostCurry(map)(square),</p>

<pre><code>doubleAll = rightmostCurry(map)(double);
</code></pre>

<p>```</p>

<p>这种创建了柯里化函数后立刻调用的情况很常见，因此好事的人们就为它起了一个名字，称之为 <em>map函数的右起一元偏应用</em> 。</p>

<p>名字很长，我们分解开来看：</p>

<ol>
<li>右起：从最右边的参数开始；</li>
<li>一元：一个参数；</li>
<li>偏应用：只应用部分函数；</li>
<li>map：即<code>map</code>函数。</li>
</ol>


<p>所以我们实际上是想为<code>map</code>函数预先指定一个参数。它是一个二元函数，指定参数后便成了一元函数。在函数式编程语言或类库中，都提供了相应的方式来支持这种用法。</p>

<p>我们可以用柯里化来实现这样的功能：</p>

<p><code>javascript
function rightmostUnaryPartialApplication (binaryFn, secondArg) {
  return rightmostCurry(binaryFn)(secondArg);
};
</code></p>

<p>但更多时候我们会使用更为直接的方式：（<a href="#fn:caveat">注2</a>）</p>

<p>```javascript
function rightmostUnaryPartialApplication (binaryFn, secondArg) {
  return function (firstArg) {</p>

<pre><code>return binaryFn(firstArg, secondArg);
</code></pre>

<p>  };
};
```</p>

<p><code>rightmostUnaryPartialApplication</code>有些过长了，我们将其称为<code>applyLast</code>：</p>

<p><code>javascript
var applyLast = rightmostUnaryPartialApplication;
</code></p>

<p>这样，我们的<code>squareAll</code>和<code>doubleAll</code>函数就可以写为：</p>

<p>```javascript
var squareAll = applyLast(map, square),</p>

<pre><code>doubleAll = applyLast(map, double);
</code></pre>

<p>```</p>

<p>你同样可以实现一个<code>applyFirst</code>函数（我们就不提<code>leftmostUnaryPartialApplication</code>这种叫法了）：</p>

<p>```javascript
function applyFirst (binaryFn, firstArg) {
  return function (secondArg) {</p>

<pre><code>return binaryFn(firstArg, secondArg);
</code></pre>

<p>  };
};
```</p>

<p>和“左起/右起柯里化”一样，你应该在工具箱中保留这两种偏应用的方式，以便在实际使用过程中选择。</p>

<h2>柯里化和偏应用的区别</h2>

<p>“柯里化是将一个多元函数分解为一系列嵌套调用的一元函数。分解后，你可以部分应用一个或多个参数（<a href="#fn:also">注3</a>）。柯里化的过程不会向函数传递参数。”</p>

<p>“偏应用是为一个多元函数预先提供部分参数，从而在调用时可以省略这些参数。”</p>

<h2>这就是全部吗？</h2>

<p>是，但又不是。以下这些还请读者自行探索和实现：</p>

<ol>
<li>上文中，我们用柯里化实现了偏应用，那偏应用可以实现柯里化吗？为什么？（<a href="#fn:tao">注4</a>）</li>
<li>所有的示例都是将二元函数转换为一元函数，尝试写出一个更为通用的<code>applyFirst</code>和<code>applyLast</code>函数，能够为任意元的函数提供一个参数。如，假设有一个函数接收四个参数，那在使用了<code>applyFirst</code>后会返回一个接收三个参数的函数。</li>
<li>第2步完成后，再实现一组<code>applyLeft</code>和<code>applyRight</code>函数，它能为任意元的函数预先指定任意数量的参数，如，假设向<code>applyLeft</code>传递了一个三元函数和两个参数，那就会返回一个一元函数。</li>
<li>重写<code>curry</code>和<code>rightmostCurry</code>这两个函数，使其能够接收任意元的函数。一个三元函数柯里化后会产生三个嵌套调用的一元函数。</li>
<li>阅读<a href="http://allong.es/">allong.es</a>的代码，这是一个从<a href="http://leanpub.com/javascript-allonge">JavaScript Allongé</a>中提取的函数式编程类库。重点阅读它的partial_application.js文件。</li>
</ol>


<p>感谢你的阅读，如果你在代码中发现了Bug，请<a href="https://github.com/raganwald/raganwald.github.com">克隆这个镜像</a>，提交合并申请，或者<a href="https://github.com/raganwald/raganwald.github.com/issues">在Github上提交一个事务</a>。</p>

<p>PS：你可能会对另一篇文章也感兴趣：<a href="http://raganwald.com/2013/01/05/practical-applications-of-partial-application.html">Practical Applicaitons for Partial Application</a>。</p>

<p>（<a href="http://www.reddit.com/r/javascript/comments/19urej/whats_the_difference_between_currying_and_partial/">讨论</a>）</p>

<h2>脚注</h2>

<ol>
<li><a name="fn:birds"></a>当Raymond Smullyan为组合子逻辑撰写介绍时，他称之为“嘲鸟的模仿者”（To Mock a Mockingbird）。他通篇使用树林和小鸟来做比喻，以表达对Schönfinkel的敬意。Schön意为“美丽”，Fink则指德语中的Finch（燕雀），也指犹太语中的Finkl（火花）。所以他的名字可以理解为“美丽的燕雀”或“美丽的火花”。</li>
<li><a name="fn:caveat"></a>本文的示例都异常简单。完整的实现应该能够接收任意元的函数，并依调用情况返回恰当的值。</li>
<li><a name="fn:also"></a>柯里化还有很多其它应用，只是本文着重讲述的是柯里化和偏应用的区别，而不是组合子逻辑和函数式编程。</li>
<li><a name="fn:tao"></a>一位道教人士向街边小贩购买一个素食热狗，并说道：“我要全套。”</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 代码规范]]></title>
    <link href="http://shzhangji.com/blog/2013/01/04/clojure-style-guide/"/>
    <updated>2013-01-04T20:49:00+08:00</updated>
    <id>http://shzhangji.com/blog/2013/01/04/clojure-style-guide</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="https://github.com/bbatsov/clojure-style-guide">https://github.com/bbatsov/clojure-style-guide</a></p>

<p>这份Clojure代码规范旨在提供一系列的最佳实践，让现实工作中的Clojure程序员能够写出易于维护的代码，并能与他人协作和共享。一份反应真实需求的代码规范才能被人接收，而那些理想化的、甚至部分观点遭到程序员拒绝的代码规范注定不会长久——无论它有多出色。</p>

<p>这份规范由多个章节组成，每个章节包含一组相关的规则。我会尝试去描述每条规则背后的理念（过于明显的理念我就省略了）。</p>

<p>这些规则并不是我凭空想象的，它们出自于我作为一个专业软件开发工程师长久以来的工作积累，以及Clojure社区成员们的反馈和建议，还有各种广为流传的Clojure编程学习资源，如<a href="http://www.clojurebook.com/">《Clojure Programming》</a>、<a href="http://joyofclojure.com/">《The Joy of Clojure》</a>等。</p>

<p>这份规范还处于编写阶段，部分章节有所缺失，内容并不完整；部分规则没有示例，或者示例还不能完全将其描述清楚。未来这些问题都会得到改进，只是请你了解这一情况。</p>

<!-- more -->


<p>你可以使用<a href="https://github.com/TechnoGate/transmuter">Transmuter</a>生成一份本规范的PDF或HTML格式的文档。</p>

<h2>目录</h2>

<ul>
<li><a href="#source-code-layout--organization">源代码的布局和组织结构</a></li>
<li><a href="#syntax">语法</a></li>
<li><a href="#naming">命名</a></li>
<li><a href="#comments">注释</a>

<ul>
<li><a href="#comment-annotations">注释中的标识</a></li>
</ul>
</li>
<li><a href="#exceptions">异常</a></li>
<li><a href="#collections">集合</a></li>
<li><a href="#mutation">可变量</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#regular-expressions">正则表达式</a></li>
<li><a href="#macros">宏</a></li>
<li><a href="#existential">惯用法</a></li>
</ul>


<h2><a name="source-code-layout--organization"></a>源代码的布局和组织结构</h2>

<blockquote><p>几乎所有人都认为任何代码风格都是丑陋且难以阅读的，除了自己的之外。把这句话中的“除了自己之外”去掉，那差不多就能成立了。
—— Jerry Coffin 关于代码缩进的评论</p></blockquote>

<ul>
<li>使用两个 <strong>空格</strong> 进行缩进，不使用制表符。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(when something
  (something-else))

;; 错误 - 四个空格
(when something
    (something-else))
</code></pre>

<p>```</p>

<ul>
<li>纵向对齐函数参数。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(filter even?
        (range 1 10))

;; 错误
(filter even?
  (range 1 10))
</code></pre>

<p>```</p>

<ul>
<li>对齐let绑定，以及map类型中的关键字。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(let [thing1 "some stuff"
      thing2 "other stuff"]
  {:thing1 thing1
   :thing2 thing2})

;; 错误
(let [thing1 "some stuff"
  thing2 "other stuff"]
  {:thing1 thing1
  :thing2 thing2})
</code></pre>

<p>```</p>

<ul>
<li>当<code>defn</code>没有文档字符串时，可以选择省略函数名和参数列表之间的空行。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn foo
  [x]
  (bar x))

;; 正确
(defn foo [x]
  (bar x))

;; 错误
(defn foo
  [x] (bar x))
</code></pre>

<p>```</p>

<ul>
<li>当函数体较简短时，可以选择忽略参数列表和函数体之间的空行。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn foo [x]
  (bar x))

;; 适合简单的函数
(defn goo [x] (bar x))

;; 适合包含多种参数列表的函数
(defn foo
  ([x] (bar x))
  ([x y]
    (if (predicate? x)
      (bar x)
      (baz x))))

;; 错误
(defn foo
  [x] (if (predicate? x)
        (bar x)
        (baz x)))
</code></pre>

<p>```</p>

<ul>
<li>跨行的文档说明字符串每行都要缩进。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn foo
  "Hello there. This is
  a multi-line docstring."
  []
  (bar))

;; 错误
(defn foo
  "Hello there. This is
a multi-line docstring."
  []
  (bar))
</code></pre>

<p>```
* 使用Unix风格的换行符（*BSD、Solaris、Linux、OSX用户无需设置，Windows用户则需要格外注意了）</p>

<pre><code>* 如果你使用Git，为了防止项目中意外引入Windows风格的换行符，不妨添加如下设置：
</code></pre>

<p>```bash</p>

<pre><code>    $ git config --global core.autocrlf true
</code></pre>

<p>```</p>

<ul>
<li>在括号<code>(</code>、<code>{</code>、<code>[</code>、<code>]</code>、<code>}</code>、<code>)</code>的外部添加空格，括号内部不要添加。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(foo (bar baz) quux)

;; 错误
(foo(bar baz)quux)
(foo ( bar baz ) quux)
</code></pre>

<p>```</p>

<ul>
<li>避免在集合中使用逗号分隔符。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
[1 2 3]
(1 2 3)

;; 错误
[1, 2, 3]
(1, 2, 3)
</code></pre>

<p>```</p>

<ul>
<li>可以考虑在map中适当使用逗号和换行以增强可读性。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
{:name "Bruce Wayne" :alter-ego "Batman"}

;; 正确，且会增强可读性
{:name "Bruce Wayne"
 :alter-ego "Batman"}

;; 正确，且较为紧凑
{:name "Bruce Wayne", :alter-ego "Batman"}
</code></pre>

<p>```</p>

<ul>
<li>将所有的反括号放在一行中。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(when something
  (something-else))

;; 错误
(when something
  (something-else)
)
</code></pre>

<p>```</p>

<ul>
<li>顶层函数之间空出一行。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(def x ...)

(defn foo ...)

;; 错误
(def x ...)
(defn foo ...)
</code></pre>

<p>```</p>

<ul>
<li>函数或宏的定义体中不要添加空行。</li>
<li>每行尽量不超过80个字符。</li>
<li>避免在行末输入多余的空格。</li>
<li>为每个命名空间创建单独的文件。</li>
<li>使用一个完整的<code>ns</code>指令来声明命名空间，其包含<code>import</code>、<code>require</code>、<code>refer</code>、以及<code>use</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>(ns examples.ns
  (:refer-clojure :exclude [next replace remove])
  (:require (clojure [string :as string]
                     [set :as set])
            [clojure.java.shell :as sh])
  (:use (clojure zip xml))
  (:import java.util.Date
           java.text.SimpleDateFormat
           (java.util.concurrent Executors
                                 LinkedBlockingQueue)))
</code></pre>

<p>```</p>

<ul>
<li>避免使用只有一个元素的命名空间名。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(ns example.ns)

;; 错误
(ns example)
</code></pre>

<p>```</p>

<ul>
<li><p>避免使用过长的命名空间（不超过五个元素）。</p></li>
<li><p>一个函数不应超过10行代码。事实上，大多数函数应保持在5行代码以内。</p></li>
<li><p>函数的参数个数不应超过三到四个。</p></li>
</ul>


<h2><a name="syntax"></a>语法</h2>

<ul>
<li>避免使用<code>require</code>、<code>refer</code>等改变命名空间的函数，它们只应在REPL中使用。</li>
<li>使用<code>declare</code>实现引用传递。</li>
<li><p>优先使用<code>map</code>这类高阶函数，而非<code>loop/recur</code>。</p></li>
<li><p>优先使用前置、后置条件来检测函数参数和返回值：</p></li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn foo [x]
  {:pre [(pos? x)]}
  (bar x))

;; 错误
(defn foo [x]
  (if (pos? x)
    (bar x)
    (throw (IllegalArgumentException "x must be a positive number!")))
</code></pre>

<p>```</p>

<ul>
<li>不要在函数中定义变量：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 非常糟糕
(defn foo []
  (def x 5)
  ...)
</code></pre>

<p>```</p>

<ul>
<li>本地变量名不应覆盖<code>clojure.core</code>中定义的函数：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 错误——这样一来函数中调用`map`时就需要指定完整的命名空间了。
(defn foo [map]
  ...)
</code></pre>

<p>```</p>

<ul>
<li>使用<code>seq</code>来判断一个序列是否为空（空序列等价于nil）。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn print-seq [s]
  (when (seq s)
    (prn (first s))
    (recur (rest s))))

;; 错误
(defn print-seq [s]
  (when-not (empty? s)
    (prn (first s))
    (recur (rest s))))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>when</code>替代<code>(if ... (do ...)</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(when pred
  (foo)
  (bar))

;; 错误
(if pred
  (do
    (foo)
    (bar)))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>if-let</code>替代<code>let</code> + <code>if</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(if-let [result :foo]
  (something-with result)
  (something-else))

;; 错误
(let [result :foo]
  (if result
    (something-with result)
    (something-else)))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>when-let</code>替代<code>let</code> + <code>when</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(when-let [result :foo]
  (do-something-with result)
  (do-something-more-with result))

;; 错误
(let [result :foo]
  (when result
    (do-something-with result)
    (do-something-more-with result)))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>if-not</code>替代<code>(if (not ...) ...)</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(if-not (pred)
  (foo))

;; 错误
(if (not pred)
  (foo))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>when-not</code>替代<code>(when (not ...) ...)</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(when-not pred
  (foo)
  (bar))

;; 错误
(when (not pred)
  (foo)
  (bar))
</code></pre>

<p>```</p>

<ul>
<li>使用<code>not=</code>替代<code>(not (= ...))</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(not= foo bar)

;; 错误
(not (= foo bar))
</code></pre>

<p>```</p>

<ul>
<li>当匿名函数只有一个参数时，优先使用<code>%</code>，而非<code>%1</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
#(Math/round %)

;; 错误
#(Math/round %1)
</code></pre>

<p>```</p>

<ul>
<li>当匿名函数有多个参数时，优先使用<code>%1</code>，而非<code>%</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
#(Math/pow %1 %2)

;; 错误
#(Math/pow % %2)
</code></pre>

<p>```</p>

<ul>
<li>只有在必要的时候才使用匿名函数。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(filter even? (range 1 10))

;; 错误
(filter #(even? %) (range 1 10))
</code></pre>

<p>```</p>

<ul>
<li>当匿名函数包含多行语句时，使用<code>fn</code>来定义，而非<code>#(do ...)</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(fn [x]
  (println x)
  (* x 2))

;; 错误（你不得不使用`do`）
#(do (println %)
     (* % 2))
</code></pre>

<p>```</p>

<ul>
<li>在特定情况下优先使用<code>complement</code>，而非匿名函数。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(filter (complement some-pred?) coll)

;; 错误
(filter #(not (some-pred? %)) coll)
</code></pre>

<p>```</p>

<p>当函数已存在对应的求反函数时，则应使用该求反函数（如<code>even?</code>和<code>odd?</code>）。</p>

<ul>
<li>某些情况下可以用<code>comp</code>使代码更简洁。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(map #(capitalize (trim %)) ["top " " test "])

;; 更好
(map (comp capitalize trim) ["top " " test "])
</code></pre>

<p>```</p>

<ul>
<li>某些情况下可以用<code>partial</code>使代码更简洁。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(map #(+ 5 %) (range 1 10))

;; 或许更好
(map (partial + 5) (range 1 10))
</code></pre>

<p>```</p>

<ul>
<li>当遇到嵌套调用时，建议使用<code>-&gt;</code>宏和<code>-&gt;&gt;</code>宏。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(-&gt; [1 2 3]
    reverse
    (conj 4)
    prn)

;; 不够好
(prn (conj (reverse [1 2 3])
           4))

;; 正确
(-&gt;&gt; (range 1 10)
     (filter even?)
     (map (partial * 2)))

;; 不够好
(map (partial * 2)
     (filter even? (range 1 10)))
</code></pre>

<p>```</p>

<ul>
<li>当需要连续调用Java类的方法时，优先使用<code>..</code>，而非<code>-&gt;</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(-&gt; (System/getProperties) (.get "os.name"))

;; 更好
(.. System getProperties (get "os.name"))
</code></pre>

<p>```</p>

<ul>
<li>在<code>cond</code>和<code>condp</code>中，使用<code>:else</code>来处理不满足条件的情况。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(cond
  (&lt; n 0) "negative"
  (&gt; n 0) "positive"
  :else "zero"))

;; 错误
(cond
  (&lt; n 0) "negative"
  (&gt; n 0) "positive"
  true "zero"))
</code></pre>

<p>```</p>

<ul>
<li>当比较的变量和方式相同时，优先使用<code>condp</code>，而非<code>cond</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(cond
  (= x 10) :ten
  (= x 20) :twenty
  (= x 30) :forty
  :else :dunno)

;; 更好
(condp = x
  10 :ten
  20 :twenty
  30 :forty
  :dunno)
</code></pre>

<p>```</p>

<ul>
<li>当条件是常量时，优先使用<code>case</code>，而非<code>cond</code>或<code>condp</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(cond
  (= x 10) :ten
  (= x 20) :twenty
  (= x 30) :forty
  :else :dunno)

;; 更好
(condp = x
  10 :ten
  20 :twenty
  30 :forty
  :dunno)

;; 最佳
(case x
  10 :ten
  20 :twenty
  30 :forty
  :dunno)
</code></pre>

<p>```</p>

<ul>
<li>某些情况下，使用<code>set</code>作为判断条件。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 错误
(remove #(= % 0) [0 1 2 3 4 5])

;; 正确
(remove #{0} [0 1 2 3 4 5])

;; 错误
(count (filter #(or (= % \a)
                    (= % \e)
                    (= % \i)
                    (= % \o)
                    (= % \u))
               "mary had a little lamb"))

;; 正确
(count (filter #{\a \e \i \o \u} "mary had a little lamb"))
</code></pre>

<p>```</p>

<ul>
<li><p>使用<code>(inc x)</code>和<code>(dec x)</code>替代<code>(+ x 1)</code>和<code>(- x 1)</code>。</p></li>
<li><p>使用<code>(pos? x)</code>、<code>(neg? x)</code>、以及<code>(zero? x)</code>替代<code>(&gt; x 0)</code>、<code>(&lt; x 0)</code>、和<code>(= x 0)</code>。</p></li>
<li><p>进行Java操作时，优先使用Clojure提供的语法糖。</p></li>
</ul>


<p>```clojure</p>

<pre><code>;;; 创建对象
;; 正确
(java.util.ArrayList. 100)

;; 错误
(new java.util.ArrayList 100)

;;; 调用静态方法
;; 正确
(Math/pow 2 10)

;; 错误
(. Math pow 2 10)

;;; 调用实例方法
;; 正确
(.substring "hello" 1 3)

;; 错误
(. "hello" substring 1 3)

;;; 访问静态属性
;; 正确
Integer/MAX_VALUE

;; 错误
(. Integer MAX_VALUE)

;;; 访问实例属性
;; 正确
(.someField some-object)

;; 错误
(. some-object some-field)
</code></pre>

<p>```</p>

<h2><a name="naming"></a>命名</h2>

<blockquote><p>编程中真正的难点只有两个：验证缓存的有效性；命名。<br/>
—— Phil Karlton</p></blockquote>

<ul>
<li>命名空间建议使用以下两种方式：

<ul>
<li><code>项目名称.模块名称</code></li>
<li><code>组织名称.项目名称.模块名称</code></li>
</ul>
</li>
<li>对于命名空间中较长的元素，使用<code>lisp-case</code>格式，如<code>bruce.project-euler</code>。</li>
<li>使用<code>lisp-case</code>格式来命名函数和变量。</li>
<li>使用<code>CamelCase</code>来命名接口（protocol）、记录（record）、结构和类型（struct &amp; type）。对于HTTP、RFC、XML等缩写，仍保留其大写格式。</li>
<li>对于返回布尔值的函数名称，使用问号结尾，如<code>even?</code>。</li>
<li>当方法或宏不能在STM中安全使用时，须以感叹号结尾，如<code>reset!</code>。</li>
<li>命名类型转换函数时使用<code>-&gt;</code>，而非<code>to</code>。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(defn f-&gt;c ...)

;; 不够好
(defn f-to-c ...)
</code></pre>

<p>```</p>

<ul>
<li>对于可供重绑定的变量（即动态变量），使用星号括起，如<code>*earmuffs*</code>。</li>
<li>无需对常量名进行特殊的标识，因为所有的变量都应该是常量，除非有特别说明。</li>
<li>对于解构过程中或参数列表中忽略的元素，使用<code>_</code>来表示。</li>
<li>参考<code>clojure.core</code>中的命名规范，如<code>pred</code>、<code>coll</code>：

<ul>
<li>函数：

<ul>
<li><code>f</code>、<code>g</code>、<code>h</code>：参数内容是一个函数</li>
<li><code>n</code>：整数，通常是一个表示大小的值</li>
<li><code>index</code>：整数索引</li>
<li><code>x</code>、<code>y</code>：数值</li>
<li><code>s</code>：字符串</li>
<li><code>coll</code>：集合</li>
<li><code>pred</code>：断言型的闭包</li>
<li><code>&amp; more</code>：可变参数</li>
</ul>
</li>
<li>宏：

<ul>
<li><code>expr</code>：表达式</li>
<li><code>body</code>：语句</li>
<li><code>binding</code>：一个向量，包含宏的绑定</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2><a name="collections"></a>集合</h2>

<blockquote><p>用100种函数去操作同一种数据结构，要好过用10种函数操作10种数据结构。<br/>
—— Alan J. Perlis</p></blockquote>

<ul>
<li>避免使用列表（list）来存储数据（除非它真的就是你想要的）。</li>
<li>优先使用关键字（keyword），而非普通的哈希键：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
{:name "Bruce" :age 30}

;; 错误
{"name" "Bruce" "age" 30}
</code></pre>

<p>```</p>

<ul>
<li>编写集合时，优先使用内置的语法形式，而非构造函数。但是，在定义唯一值集合（set）时，只有当元素都是常量时才可使用内置语法，否则应使用构造函数，如下所示：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
[1 2 3]
#{1 2 3}
(hash-set (func1) (func2)) ; 元素在运行时确定

;; bad
(vector 1 2 3)
(hash-set 1 2 3)
#{(func1) (func2)} ; 若(func1)和(func2)的值相等，则会抛出运行时异常。
</code></pre>

<p>```</p>

<ul>
<li><p>避免使用数值索引来访问集合元素。</p></li>
<li><p>优先使用关键字来获取哈希表（map）中的值。</p></li>
</ul>


<p>```clojure</p>

<pre><code>(def m {:name "Bruce" :age 30})

;; 正确
(:name m)

;; 错误——太过啰嗦
(get m :name)

;; 错误——可能抛出空指针异常
(m :name)
</code></pre>

<p>```</p>

<ul>
<li>集合可以被用作函数：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(filter #{\a \e \o \i \u} "this is a test")

;; 缺点——不够美观
</code></pre>

<p>```</p>

<ul>
<li>关键字可以被用作函数：</li>
</ul>


<p>```clojure</p>

<pre><code>((juxt :a :b) {:a "ala" :b "bala"})
</code></pre>

<p>```</p>

<ul>
<li><p>只有在非常强调性能的情况下才可使用瞬时集合（transient collection）。</p></li>
<li><p>避免使用Java集合。</p></li>
<li><p>避免使用Java数组，除非遇到需要和Java类进行交互，或需要高性能地处理基本类型时才可使用。</p></li>
</ul>


<h2><a name="mutation"></a>可变量</h2>

<h3>引用（Refs）</h3>

<ul>
<li>建议所有的IO操作都使用<code>io!</code>宏进行包装，以免不小心在事务中调用了这些代码。</li>
<li>避免使用<code>ref-set</code>。</li>
<li>控制事务的大小，即事务所执行的工作越少越好。</li>
<li>避免出现短期事务和长期事务访问同一个引用（Ref）的情形。</li>
</ul>


<h3>代理（Agents）</h3>

<ul>
<li><code>send</code>仅使用于计算密集型、不会因IO等因素阻塞的线程。</li>
<li><code>send-off</code>则用于会阻塞、休眠的线程。</li>
</ul>


<h3>原子（Atoms）</h3>

<ul>
<li>避免在事务中更新原子。</li>
<li>避免使用<code>reset!</code>。</li>
</ul>


<h2><a name="strings"></a>字符串</h2>

<ul>
<li>优先使用<code>clojure.string</code>中提供的字符串操作函数，而不是Java中提供的或是自己编写的函数。</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(clojure.string/upper-case "bruce")

;; 错误
(.toUpperCase "bruce")
</code></pre>

<p>```</p>

<h2><a name="exceptions"></a>异常</h2>

<ul>
<li>复用已有的异常类型，如：

<ul>
<li><code>java.lang.IllegalArgumentException</code></li>
<li><code>java.lang.UnsupportedOperationException</code></li>
<li><code>java.lang.IllegalStateException</code></li>
<li><code>java.io.IOException</code></li>
</ul>
</li>
<li>优先使用<code>with-open</code>，而非<code>finally</code>。</li>
</ul>


<h2><a name="macros"></a>宏</h2>

<ul>
<li>如果可以用函数实现相同功能，不要编写一个宏。</li>
<li>首先编写一个宏的用例，尔后再编写宏本身。</li>
<li>尽可能将一个复杂的宏拆解为多个小型的函数。</li>
<li>宏只应用于简化语法，其核心应该是一个普通的函数。</li>
<li>使用语法转义（syntax-quote，即反引号），而非手动构造<code>list</code>。</li>
</ul>


<h2><a name="comments"></a>注释</h2>

<blockquote><p>好的代码本身就是文档。因此在添加注释之前，先想想自己该如何改进代码，让它更容易理解。做到这一点后，再通过注释让代码更清晰。<br/>
——Steve McConnel</p></blockquote>

<ul>
<li><p>学会编写容易理解的代码，然后忽略下文的内容。真的！</p></li>
<li><p>对于标题型的注释，使用至少四个分号起始。</p></li>
<li><p>对于顶层注释，使用三个分号起始。</p></li>
<li><p>为某段代码添加注释时，使用两个分号起始，且应与该段代码对齐。</p></li>
<li><p>对于行尾注释，使用一个分号起始即可。</p></li>
<li><p>分号后面要有一个空格。</p></li>
</ul>


<p>```clojure</p>

<pre><code>;;;; Frob Grovel

;;; 这段代码有以下前提：
;;;   1. Foo.
;;;   2. Bar.
;;;   3. Baz.

(defn fnord [zarquon]
  ;; If zob, then veeblefitz.
  (quux zot
        mumble             ; Zibblefrotz.
        frotz))
</code></pre>

<p>```</p>

<ul>
<li>对于成句的注释，句首字母应该大写，<a href="http://en.wikipedia.org/wiki/Sentence_spacing">句与句之间用一个空格分隔</a>。</li>
<li>避免冗余的注释：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 错误
(inc counter) ; counter变量的值加1
</code></pre>

<p>```</p>

<ul>
<li>注释要和代码同步更新。过期的注释还不如没有注释。</li>
<li>有时，使用<code>#_</code>宏要优于普通的注释：</li>
</ul>


<p>```clojure</p>

<pre><code>;; 正确
(+ foo #_(bar x) delta)

;; 错误
(+ foo
   ;; (bar x)
   delta)
</code></pre>

<p>```</p>

<blockquote><p>好的代码和好的笑话一样，不需要额外的解释。
——Russ Olsen</p></blockquote>

<ul>
<li>避免使用注释去描述一段写得很糟糕的代码。重构它，让它更为可读。（做或者不做，没有尝试这一说。——Yoda）</li>
</ul>


<h3><a name="comment-annotations"></a>注释中的标识</h3>

<ul>
<li>标识应该写在对应代码的上一行。</li>
<li>标识后面是一个冒号和一个空格，以及一段描述文字。</li>
<li>如果标识的描述文字超过一行，则第二行需要进行缩进。</li>
<li>将自己姓名的首字母以及当前日期附加到标识描述文字中：</li>
</ul>


<p>```clojure</p>

<pre><code>(defn some-fun
  []
  ;; FIXME: 这段代码在v1.2.3之后偶尔会崩溃，
  ;;        这可能和升级BarBazUtil有关。（xz 13-1-31）
  (baz))
</code></pre>

<p>```</p>

<ul>
<li>对于功能非常明显，实在无需添加注释的情况，可以在行尾添加一个标识：</li>
</ul>


<p>```clojure</p>

<pre><code>(defn bar
  []
  (sleep 100)) ; OPTIMIZE
</code></pre>

<p>```</p>

<ul>
<li>使用<code>TODO</code>来表示需要后期添加的功能或特性。</li>
<li>使用<code>FIXME</code>来表示需要修复的问题。</li>
<li>使用<code>OPTIMIZE</code>来表示会引起性能问题的代码，并需要修复。</li>
<li>使用<code>HACK</code>来表示这段代码并不正规，需要在后期进行重构。</li>
<li>使用<code>REVIEW</code>来表示需要进一步审查这段代码，如：<code>REVIEW: 你确定客户会正确地操作X吗？</code></li>
<li>可以使用其它你认为合适的标识关键字，但记得一定要在项目的<code>README</code>文件中描述这些自定义的标识。</li>
</ul>


<h2><a name="existential"></a>惯用法</h2>

<ul>
<li>使用函数式风格进行编程，避免改变变量的值。</li>
<li>保持编码风格。</li>
<li>用正常人的思维来思考。</li>
</ul>


<h1>贡献</h1>

<p>本文中的所有内容都还没有最后定型，我很希望能够和所有对Clojure代码规范感兴趣的同仁一起编写此文，从而形成一份对社区有益的文档。</p>

<p>你可以随时创建讨论话题，或发送合并申请。我在这里提前表示感谢。</p>

<h1>宣传</h1>

<p>一份由社区驱动的代码规范如果得不到社区本身的支持和认同，那它就毫无意义了。发送一条推特，向朋友和同事介绍此文。任何评论、建议、以及意见都能够让我们向前迈进一小步。请让我们共同努力吧！</p>
]]></content>
  </entry>
  
</feed>
