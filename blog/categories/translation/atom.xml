<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Translation | Ji ZHANG's Blog]]></title>
  <link href="http://shzhangji.com/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://shzhangji.com/"/>
  <updated>2014-11-07T16:38:24+08:00</updated>
  <id>http://shzhangji.com/</id>
  <author>
    <name><![CDATA[Ji ZHANG]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据挖掘指南[4]分类]]></title>
    <link href="http://shzhangji.com/blog/2014/10/30/guidetodatamining-4/"/>
    <updated>2014-10-30T12:00:00+08:00</updated>
    <id>http://shzhangji.com/blog/2014/10/30/guidetodatamining-4</id>
    <content type="html"><![CDATA[<p>在上几章中我们使用用户对物品的评价来进行推荐，这一章我们将使用物品本身的特征来进行推荐。这也是潘多拉音乐站所使用的方法。</p>

<p>内容：</p>

<ul>
<li>潘多拉推荐系统简介</li>
<li>特征值选择的重要性</li>
<li>示例：音乐特征值和邻域算法</li>
<li>数据标准化</li>
<li>修正的标准分数</li>
<li>Python代码：音乐，特征，以及简单的邻域算法实现</li>
<li>一个和体育相关的示例</li>
<li>特征值抽取方式一览</li>
</ul>


<h2>根据物品特征进行分类</h2>

<p>前几章我们讨论了如何使用协同过滤来进行推荐，由于使用的是用户产生的各种数据，因此又称为社会化过滤算法。比如你购买了Phoenix专辑，我们网站上其他购买过这张专辑的用户还会去购买Vampire的专辑，因此会把它推荐给你；我在Netflix上观看了Doctor Who，网站会向我推荐Quantum Leap，用的是同样的原理。我们同时也讨论了协同过滤会遇到的种种问题，包括数据的稀疏性和算法的可扩展性。此外，协同过滤算法倾向于推荐那些已经很流行的物品。试想一个极端的例子：一个新乐队发布了专辑，这张专辑还没有被任何用户评价或购买过，那它将永远不会出现在推荐列表中。</p>

<blockquote><p><strong>这类推荐系统会让流行的物品更为流行，冷门的物品更无人问津。</strong></p>

<p>&mdash; Daniel Fleder &amp; Kartik Hosanagar 2009 《推荐系统对商品分类的影响》</p></blockquote>

<p>这一章我们来看另一种推荐方法。以潘多拉音乐站举例，在这个站点上你可以设立各种音乐频道，只需为这个频道添加一个歌手，潘多拉就会播放和这个歌手风格相类似的歌曲。比如我添加了Phoenix乐队，潘多拉便会播放El Ten Eleven的歌曲。它并没有使用协同过滤，而是通过计算得到这两个歌手的音乐风格是相似的。其实在播放界面上可以看到推荐理由：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-4/chapter-4-1.png" alt="" /></p>

<p>“根据你目前告知的信息，我们播放的这首歌曲有着相似的旋律，使用了声响和电音的组合，即兴的吉他伴奏。”在我的Hiromi音乐站上，潘多拉会播放E.S.T.的歌曲，因为“它有着古典爵士乐风，一段高水准的钢琴独奏，轻盈的打击乐，以及有趣的歌曲结构。”</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-4/chapter-4-2.png" alt="" /></p>

<p>潘多拉网站的推荐系统是基于一个名为音乐基因的项目。他们雇佣了专业的音乐家对歌曲进行分类（提取它们的“基因”）。这些音乐家会接受超过150小时的训练，之后便可用20到30分钟的时间来分析一首歌曲。这些乐曲特征是很专业的：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-4/chapter-4-3.png" alt="" /></p>

<p>这些专家要甄别400多种特征，平均每个月会有15000首新歌曲，因此这是一项非常消耗人力的工程。</p>

<blockquote><p>注意：潘多拉的音乐基因项目是商业机密，我不曾了解它的任何信息。下文讲述的是如何构造一个类似的系统。</p></blockquote>

<p><a href="https://github.com/jizhang/guidetodatamining/blob/master/chapter-4.md">前往GitHub阅读全文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据挖掘指南[3]隐式评价和基于物品的过滤算法]]></title>
    <link href="http://shzhangji.com/blog/2014/09/29/guidetodatamining-3/"/>
    <updated>2014-09-29T12:00:00+08:00</updated>
    <id>http://shzhangji.com/blog/2014/09/29/guidetodatamining-3</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://guidetodatamining.com/chapter-3/">http://guidetodatamining.com/chapter-3/</a></p>

<p>本章会从用户的评价类型开始讨论，包括显式评价（赞一下、踩一脚、五星评价等等）和隐式评价（比如在亚马逊上购买了MP3，我们可以认为他喜欢这个产品）。</p>

<p>内容：</p>

<ul>
<li>显式评价</li>
<li>隐式评价</li>
<li>哪种评价方式更准确？</li>
<li>基于用户的协同过滤</li>
<li>基于物品的协同过滤</li>
<li>修正的余弦相似度</li>
<li>Slope One算法</li>
<li>Slope One的Python实现</li>
<li>MovieLens数据</li>
</ul>


<p>第二章中我们学习了协同过滤和推荐系统的基本知识，其中讲述的算法是比较通用的，可以适用于多种数据集。用户使用5到10分的标尺来对不同的物品进行打分，通过计算得到相似的用户。但是，也有迹象表明用户通常不会有效地使用这种度量方式，而更倾向于给出极好或极差的评价，这种做法会使推荐结果变得不可用。这一章我们将继续探讨这个问题，尝试使用高效的方法给出更精确的推荐。</p>

<h2>显式评价</h2>

<p>用户的评价类型可以分为显式评价和隐式评价。显式评价指的是用户明确地给出对物品的评价，最常见的例子是Pandora和YouTube上的“喜欢”和“不喜欢”按钮：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-3/chapter-3-1.png" alt="" /></p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-3/chapter-3-2.png" alt="" /></p>

<p>以及亚马逊的星级系统：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-3/chapter-3-3.png" alt="" /></p>

<h2>隐式评价</h2>

<p>所谓隐式评价，就是我们不让用户明确给出对物品的评价，而是通过观察他们的行为来获得偏好信息。示例之一是记录用户在纽约时报网上的点击记录。</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-3/chapter-3-4.png" alt="" /></p>

<p>经过几周的观察之后，我们就可以为用户刻画出一个合理的模型了——她不喜欢体育新闻，但关注科技新闻；如果用户连续看了两篇文章：《快速减肥方法》和《不反弹的减肥方式》，那她很可能正在减肥；如果她点击了iPhone的广告，就表明她或许对这款产品感兴趣。</p>

<p>试想一下，如果我们记录了用户在亚马逊上的操作记录，可以得出一些什么结论。你的首页上可能有这样的内容：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-3/chapter-3-5.png" alt="" /></p>

<p>在这个示例中，亚马逊记录了用户的点击操作，因此它会知道浏览了Jupter Travel这本书的用户还浏览了Long Way Round这部DVD，其详细记录了演员伊万环球骑行的旅程。因此，亚马逊就用这些信息来做出“看过还看过”的推荐。</p>

<p><a href="https://github.com/jizhang/guidetodatamining/blob/master/chapter-3.md">前往GitHub阅读全文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据挖掘指南[2]推荐系统入门]]></title>
    <link href="http://shzhangji.com/blog/2014/08/29/guidetodatamining-2/"/>
    <updated>2014-08-29T12:00:00+08:00</updated>
    <id>http://shzhangji.com/blog/2014/08/29/guidetodatamining-2</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://guidetodatamining.com/chapter-2/">http://guidetodatamining.com/chapter-2/</a></p>

<p>内容：</p>

<ul>
<li>推荐系统工作原理</li>
<li>社会化协同过滤工作原理</li>
<li>如何找到相似物品</li>
<li>曼哈顿距离</li>
<li>欧几里得距离</li>
<li>闵可夫斯基距离</li>
<li>皮尔逊相关系数</li>
<li>余弦相似度</li>
<li>使用Python实现K最邻近算法</li>
<li>图书漂流站（BookCrossing）数据集</li>
</ul>


<h2>你喜欢的东西我也喜欢</h2>

<p>我们将从推荐系统开始，开启数据挖掘之旅。推荐系统无处不在，如亚马逊网站的“看过这件商品的顾客还购买过”板块：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-2/chapter-2-1.png" alt="" /></p>

<p>last.fm上对音乐和演唱会的推荐（相似歌手）：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-2/chapter-2-2.png" alt="" /></p>

<p>在亚马逊的例子里，它用了两个元素来进行推荐：一是我浏览了里维斯翻译的《法华经》一书；二是其他浏览过该书的顾客还浏览过的译作。</p>

<p>本章我们讲述的推荐方法称为协同过滤。顾名思义，这个方法是利用他人的喜好来进行推荐，也就是说，是大家一起产生的推荐。他的工作原理是这样的：如果要推荐一本书给你，我会在网站上查找一个和你类似的用户，然后将他喜欢的书籍推荐给你——比如巴奇加卢比的《发条女孩》。</p>

<h3>如何找到相似的用户？</h3>

<p>所以首先要做的工作是找到相似的用户。这里用最简单的二维模型来描述。假设用户会在网站用五颗星来评价一本书——没有星表示书写得很糟，五颗星表示很好。因为我们用的是二维模型，所以仅对两本书进行评价：史蒂芬森的《雪崩》（纵轴）和拉尔森的《龙纹身的女孩》（横轴）。</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-2/chapter-2-3.png" alt="" /></p>

<p>首先，下表显示有三位用户对这两本书做了评价：</p>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-2/chapter-2-4.png" alt="" /></p>

<p>现在我想为神秘的X先生推荐一本书，他给《雪崩》打了四星，《龙纹身的女孩》两星。第一个任务是找出哪个用户和他最为相似。我们用距离来表示。</p>

<p><a href="https://github.com/jizhang/guidetodatamining/blob/master/chapter-2.md">前往GitHub阅读全文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据挖掘指南[1]简介]]></title>
    <link href="http://shzhangji.com/blog/2014/08/09/guidetodatamining-1/"/>
    <updated>2014-08-09T12:00:00+08:00</updated>
    <id>http://shzhangji.com/blog/2014/08/09/guidetodatamining-1</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://guidetodatamining.com/chapter-1/">http://guidetodatamining.com/chapter-1/</a></p>

<p>内容：</p>

<ul>
<li>寻找事物</li>
<li>本书结构</li>
<li>阅读完本书后你可以做些什么？</li>
<li>为什么数据挖掘很重要？哪些内容可以为我所用？</li>
<li>标题里的“Numerati的古老艺术”是什么意思？</li>
</ul>


<h2>序</h2>

<p><img src="https://github.com/jizhang/guidetodatamining/raw/master/img/chapter-1/chapter-1-1.png" alt="Shoshin" /></p>

<p>如果你每天都能重复做这些简单的事，你就会获得某种特别的力量。在你获得之前，这是特别的，但获得之后，就没什么大不了的了。</p>

<p align="right">——鈴木 俊隆</p>


<p>在阅读本书之前，你可能会认为像潘多拉、亚马逊那样的推荐系统、或是恐怖分子用的数据挖掘系统，一定会非常复杂，只有拥有博士学位的人才能够了解其中的算法。你也许会认为设计出这些系统的人都是研究火箭技术的。而我撰写本书的目的之一就是希望能够揭开这些系统的神秘面纱，展示它们所使用的基本原理。虽然的确会有像Google工程师或是在国家安全局工作的天才技术人员，数据挖掘却是建立在一些基本逻辑和方法之上的，非常易于理解。在阅读本书之前，你可能会认为数据挖掘是一种让人震惊的技术，但阅读之后你会发现，其实也没什么大不了的。</p>

<p>上图中的日本文字“初心”，表示要始终保持一颗“初学者的心”，也就是一种开放的心态，接受各种可能性。下面这个故事你可能在哪儿听过（很有可能是来自李小龙的“龙争虎斗”）：一位教授想要寻求指引，于是来到一位智者面前，希望能得到点化。这个教授不停地说着自己毕生学到了什么，发表了多少论文等等。这时，智者问他：“喝茶吗？”然后开始向教授的杯子里倒茶，一直倒，最后溢到了桌子上、地上。“你在干什么？”教授大叫道。智者说：“我在倒茶。你的思想就像这个茶杯，已经倒满了茶，容不下任何其他东西。你必须先放空你的思想，我们才能继续往下说。”</p>

<p>在我看来，优秀的程序员就像是空的茶杯，他不断地探索着新的技术（noSQL、node-js等等）。普通的程序员沉浸在那些固有的想法中：C++很棒，Java不好，PHP只能用来编写网页，MySQL是数据库的唯一选择。我希望你能够以开放的心态阅读本书，从而发现一些有价值的东西。正如铃木俊隆所说：</p>

<p>在初学者眼中，世界充满了可能；专家眼中，世界大都已经既定。</p>

<p><a href="https://github.com/jizhang/guidetodatamining/blob/master/chapter-1.md">前往GitHub阅读全文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java反射机制]]></title>
    <link href="http://shzhangji.com/blog/2014/01/25/java-reflection-tutorial/"/>
    <updated>2014-01-25T09:42:00+08:00</updated>
    <id>http://shzhangji.com/blog/2014/01/25/java-reflection-tutorial</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://www.programcreek.com/2013/09/java-reflection-tutorial/">http://www.programcreek.com/2013/09/java-reflection-tutorial/</a></p>

<p>什么是反射？它有何用处？</p>

<h2>1. 什么是反射？</h2>

<p>“反射（Reflection）能够让运行于JVM中的程序检测和修改运行时的行为。”这个概念常常会和内省（Introspection）混淆，以下是这两个术语在Wikipedia中的解释：</p>

<ol>
<li>内省用于在运行时检测某个对象的类型和其包含的属性；</li>
<li>反射用于在运行时检测和修改某个对象的结构及其行为。</li>
</ol>


<p>从他们的定义可以看出，内省是反射的一个子集。有些语言支持内省，但并不支持反射，如C++。</p>

<p><img src="http://www.programcreek.com/wp-content/uploads/2013/09/reflection-introspection-650x222.png" alt="反射和内省" /></p>

<!-- more -->


<p>内省示例：<code>instanceof</code>运算符用于检测某个对象是否属于特定的类。</p>

<p>```java
if (obj instanceof Dog) {</p>

<pre><code>Dog d = (Dog) obj;
d.bark();
</code></pre>

<p>}
```</p>

<p>反射示例：<code>Class.forName()</code>方法可以通过类或接口的名称（一个字符串或完全限定名）来获取对应的<code>Class</code>对象。<code>forName</code>方法会触发类的初始化。</p>

<p><code>java
// 使用反射
Class&lt;?&gt; c = Class.forName("classpath.and.classname");
Object dog = c.newInstance();
Method m = c.getDeclaredMethod("bark", new Class&lt;?&gt;[0]);
m.invoke(dog);
</code></p>

<p>在Java中，反射更接近于内省，因为你无法改变一个对象的结构。虽然一些API可以用来修改方法和属性的可见性，但并不能修改结构。</p>

<h2>2. 我们为何需要反射？</h2>

<p>反射能够让我们：</p>

<ul>
<li>在运行时检测对象的类型；</li>
<li>动态构造某个类的对象；</li>
<li>检测类的属性和方法；</li>
<li>任意调用对象的方法；</li>
<li>修改构造函数、方法、属性的可见性；</li>
<li>以及其他</li>
</ul>


<p>反射是框架中常用的方法。</p>

<p>例如，<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/">JUnit</a>通过反射来遍历包含 <em>@Test</em> 注解的方法，并在运行单元测试时调用它们。（<a href="http://www.programcreek.com/2012/02/junit-tutorial-2-annotations/">这个连接</a>中包含了一些JUnit的使用案例）</p>

<p>对于Web框架，开发人员在配置文件中定义他们对各种接口和类的实现。通过反射机制，框架能够快速地动态初始化所需要的类。</p>

<p>例如，Spring框架使用如下的配置文件：</p>

<p>```xml
<bean id="someID" class="com.programcreek.Foo"></p>

<pre><code>&lt;property name="someField" value="someValue" /&gt;
</code></pre>

<p></bean>
```</p>

<p>当Spring容器处理&lt;bean&gt;元素时，会使用<code>Class.forName("com.programcreek.Foo")</code>来初始化这个类，并再次使用反射获取&lt;property&gt;元素对应的<code>setter</code>方法，为对象的属性赋值。</p>

<p>Servlet也会使用相同的机制：</p>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;someServlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.programcreek.WhyReflectionServlet&lt;/servlet-class&gt;
</code></pre>

<p><servlet>
```</p>

<h2>3. 如何使用反射？</h2>

<p>让我们通过几个典型的案例来学习如何使用反射。</p>

<p>示例1：获取对象的类型名称。</p>

<p>```java
package myreflection;
import java.lang.reflect.Method;</p>

<p>public class ReflectionHelloWorld {</p>

<pre><code>public static void main(String[] args){
    Foo f = new Foo();
    System.out.println(f.getClass().getName());         
}
</code></pre>

<p>}</p>

<p>class Foo {</p>

<pre><code>public void print() {
    System.out.println("abc");
}
</code></pre>

<p>}
```</p>

<p>输出：</p>

<p><code>text
myreflection.Foo
</code></p>

<p>示例2：调用未知对象的方法。</p>

<p>在下列代码中，设想对象的类型是未知的。通过反射，我们可以判断它是否包含<code>print</code>方法，并调用它。</p>

<p>```java
package myreflection;
import java.lang.reflect.Method;</p>

<p>public class ReflectionHelloWorld {</p>

<pre><code>public static void main(String[] args){
    Foo f = new Foo();

    Method method;
    try {
        method = f.getClass().getMethod("print", new Class&lt;?&gt;[0]);
        method.invoke(f);
    } catch (Exception e) {
        e.printStackTrace();
    }           
}
</code></pre>

<p>}</p>

<p>class Foo {</p>

<pre><code>public void print() {
    System.out.println("abc");
}
</code></pre>

<p>}
```</p>

<p><code>text
abc
</code></p>

<p>示例3：创建对象</p>

<p>```java
package myreflection;</p>

<p>public class ReflectionHelloWorld {</p>

<pre><code>public static void main(String[] args){
    // 创建Class实例
    Class&lt;?&gt; c = null;
    try{
        c=Class.forName("myreflection.Foo");
    }catch(Exception e){
        e.printStackTrace();
    }

    // 创建Foo实例
    Foo f = null;

    try {
        f = (Foo) c.newInstance();
    } catch (Exception e) {
        e.printStackTrace();
    }   

    f.print();
}
</code></pre>

<p>}</p>

<p>class Foo {</p>

<pre><code>public void print() {
    System.out.println("abc");
}
</code></pre>

<p>}
```</p>

<p>示例4：获取构造函数，并创建对象。</p>

<p>```java
package myreflection;</p>

<p>import java.lang.reflect.Constructor;</p>

<p>public class ReflectionHelloWorld {</p>

<pre><code>public static void main(String[] args){
    // 创建Class实例
    Class&lt;?&gt; c = null;
    try{
        c=Class.forName("myreflection.Foo");
    }catch(Exception e){
        e.printStackTrace();
    }

    // 创建Foo实例
    Foo f1 = null;
    Foo f2 = null;

    // 获取所有的构造函数
    Constructor&lt;?&gt; cons[] = c.getConstructors();

    try {
        f1 = (Foo) cons[0].newInstance();
        f2 = (Foo) cons[1].newInstance("abc");
    } catch (Exception e) {
        e.printStackTrace();
    }   

    f1.print();
    f2.print();
}
</code></pre>

<p>}</p>

<p>class Foo {</p>

<pre><code>String s; 

public Foo(){}

public Foo(String s){
    this.s=s;
}

public void print() {
    System.out.println(s);
}
</code></pre>

<p>}
```</p>

<p><code>text
null
abc
</code></p>

<p>此外，你可以通过<code>Class</code>实例来获取该类实现的接口、父类、声明的属性等。</p>

<p>示例5：通过反射来修改数组的大小。</p>

<p>```java
package myreflection;</p>

<p>import java.lang.reflect.Array;</p>

<p>public class ReflectionHelloWorld {</p>

<pre><code>public static void main(String[] args) {
    int[] intArray = { 1, 2, 3, 4, 5 };
    int[] newIntArray = (int[]) changeArraySize(intArray, 10);
    print(newIntArray);

    String[] atr = { "a", "b", "c", "d", "e" };
    String[] str1 = (String[]) changeArraySize(atr, 10);
    print(str1);
}

// 修改数组的大小
public static Object changeArraySize(Object obj, int len) {
    Class&lt;?&gt; arr = obj.getClass().getComponentType();
    Object newArray = Array.newInstance(arr, len);

    // 复制数组
    int co = Array.getLength(obj);
    System.arraycopy(obj, 0, newArray, 0, co);
    return newArray;
}

// 打印
public static void print(Object obj) {
    Class&lt;?&gt; c = obj.getClass();
    if (!c.isArray()) {
        return;
    }

    System.out.println("\nArray length: " + Array.getLength(obj));

    for (int i = 0; i &lt; Array.getLength(obj); i++) {
        System.out.print(Array.get(obj, i) + " ");
    }
}
</code></pre>

<p>}
```</p>

<p>输出：</p>

<p><code>text
Array length: 10
1 2 3 4 5 0 0 0 0 0
Array length: 10
a b c d e null null null null null
</code></p>

<h2>总结</h2>

<p>上述示例代码仅仅展现了Java反射机制很小一部分的功能。如果你觉得意犹未尽，可以前去阅读<a href="http://docs.oracle.com/javase/tutorial/reflect/">官方文档</a>。</p>

<p>参考资料：</p>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Reflection_">http://en.wikipedia.org/wiki/Reflection_</a>(computer_programming)</li>
<li><a href="http://docs.oracle.com/javase/tutorial/reflect/">http://docs.oracle.com/javase/tutorial/reflect/</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
