<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ji ZHANG&#39;s Blog</title>
  <subtitle>If I rest, I rust.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shzhangji.com/"/>
  <updated>2017-08-01T00:56:50.000Z</updated>
  <id>http://shzhangji.com/</id>
  
  <author>
    <name>Ji ZHANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Achieve Exactly-Once Semantics in Spark Streaming</title>
    <link href="http://shzhangji.com/blog/2017/07/31/how-to-achieve-exactly-once-semantics-in-spark-streaming/"/>
    <id>http://shzhangji.com/blog/2017/07/31/how-to-achieve-exactly-once-semantics-in-spark-streaming/</id>
    <published>2017-07-31T14:56:07.000Z</published>
    <updated>2017-08-01T00:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Exactly-once semantics is one of the advanced topics of stream processing. To process every message once and only once, in spite of system or network failure, not only the stream processing framework needs to provide such functionality, but also the message delivery system, the output data store, as well as how we implement the processing procedure, altogether can we ensure the exactly-once semantics. In this article, I’ll demonstrate how to use Spark Streaming, with Kafka as data source and MySQL the output storage, to achieve exactly-once stream processing.</p>
<p><img src="http://spark.apache.org/docs/latest/img/streaming-arch.png" alt="Spark Streaming"></p>
<h2 id="An-Introductory-Example"><a href="#An-Introductory-Example" class="headerlink" title="An Introductory Example"></a>An Introductory Example</h2><p>First let’s implement a simple yet complete stream processing application that receive access logs from Kafka, parse and count the errors, then write the errors per minute metric into MySQL database.</p>
<p>Sample access logs:</p>
<pre class=" language-text"><code class="language-text">2017-07-30 14:09:08 ERROR some message
2017-07-30 14:09:20 INFO  some message
2017-07-30 14:10:50 ERROR some message
</code></pre>
<p>Output table, where <code>log_time</code> should be truncated to minutes:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> error_log <span class="token punctuation">(</span>
  log_time <span class="token keyword">datetime</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
  log_count <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<a id="more"></a>
<p>Scala projects are usually managed by <code>sbt</code> tool. Let’s add the following dependencies into <code>build.sbt</code> file. We’re using Spark 2.2 with Kafka 0.10. The choice of database library is ScalikeJDBC 3.0.</p>
<pre class=" language-scala"><code class="language-scala">scalaVersion <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">"2.11.11"</span>

libraryDependencies <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span>
  <span class="token string">"org.apache.spark"</span> <span class="token operator">%</span><span class="token operator">%</span> <span class="token string">"spark-streaming"</span> <span class="token operator">%</span> <span class="token string">"2.2.0"</span> <span class="token operator">%</span> <span class="token string">"provided"</span><span class="token punctuation">,</span>
  <span class="token string">"org.apache.spark"</span> <span class="token operator">%</span><span class="token operator">%</span> <span class="token string">"spark-streaming-kafka-0-10"</span> <span class="token operator">%</span> <span class="token string">"2.2.0"</span><span class="token punctuation">,</span>
  <span class="token string">"org.scalikejdbc"</span> <span class="token operator">%</span><span class="token operator">%</span> <span class="token string">"scalikejdbc"</span> <span class="token operator">%</span> <span class="token string">"3.0.1"</span><span class="token punctuation">,</span>
  <span class="token string">"mysql"</span> <span class="token operator">%</span> <span class="token string">"mysql-connector-java"</span> <span class="token operator">%</span> <span class="token string">"5.1.43"</span>
<span class="token punctuation">)</span>
</code></pre>
<p>The complete code can be found on GitHub (<a href="https://github.com/jizhang/spark-sandbox/blob/master/src/main/scala/ExactlyOnce.scala" target="_blank" rel="external">link</a>), so here only shows the major parts of the application:</p>
<pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// initialize database connection</span>
ConnectionPool<span class="token punctuation">.</span>singleton<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/spark"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// create Spark streaming context</span>
<span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"ExactlyOnce"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setIfMissing<span class="token punctuation">(</span><span class="token string">"spark.master"</span><span class="token punctuation">,</span> <span class="token string">"local[2]"</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> ssc <span class="token operator">=</span> <span class="token keyword">new</span> StreamingContext<span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Seconds<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// create Kafka DStream with Direct API</span>
<span class="token keyword">val</span> messages <span class="token operator">=</span> KafkaUtils<span class="token punctuation">.</span>createDirectStream<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>ssc<span class="token punctuation">,</span>
   LocationStrategies<span class="token punctuation">.</span>PreferConsistent<span class="token punctuation">,</span>
   ConsumerStrategies<span class="token punctuation">.</span>Subscribe<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Seq<span class="token punctuation">(</span><span class="token string">"alog"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kafkaParams<span class="token punctuation">)</span><span class="token punctuation">)</span>

messages<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>
  <span class="token comment" spellcheck="true">// do transformation</span>
  <span class="token keyword">val</span> result <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>parseLog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// utility function to parse log line into case class</span>
    <span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>level <span class="token operator">==</span> <span class="token string">"ERROR"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>map<span class="token punctuation">(</span>log <span class="token keyword">=></span> log<span class="token punctuation">.</span>time<span class="token punctuation">.</span>truncatedTo<span class="token punctuation">(</span>ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment" spellcheck="true">// store result into database</span>
  DB<span class="token punctuation">.</span>autoCommit <span class="token punctuation">{</span> <span class="token keyword">implicit</span> session <span class="token keyword">=></span>
    result<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>time<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token keyword">=></span>
      sql<span class="token string">"""
      insert into error_log (log_time, log_count)
      value (${time}, ${count})
      on duplicate key update log_count = log_count + values(log_count)
      """</span><span class="token punctuation">.</span>update<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Stream-Processing-Semantics"><a href="#Stream-Processing-Semantics" class="headerlink" title="Stream Processing Semantics"></a>Stream Processing Semantics</h2><p>There’re three semantics in stream processing, namely at-most-once, at-least-once, and exactly-once. In a typical Spark Streaming application, there’re three processing phases: receive data, do transformation, and push outputs. Each phase takes different efforts to achieve different semantics.</p>
<p>For <strong>receiving data</strong>, it largely depends on the data source. For instance, reading files from a fault-tolerant file system like HDFS, gives us exactly-once semantics. For upstream queues that support acknowledgement, e.g. RabbitMQ, we can combine it with Spark’s write ahead logs to achieve at-least-once semantics. For unreliable receivers like <code>socketTextStream</code>, there might be data loss due to worker/driver failure and gives us undefined semantics. Kafka, on the other hand, is offset based, and its direct API can give us exactly-once semantics.</p>
<p>When <strong>transforming data</strong> with Spark’s RDD, we automatically get exactly-once semantics, for RDD is itself immutable, fault-tolerant and deterministically re-computable. As long as the source data is available, and there’s no side effects during transformation, the result will always be the same.</p>
<p><strong>Output operation</strong> by default has at-least-once semantics. The <code>foreachRDD</code> function will execute more than once if there’s worker failure, thus writing same data to external storage multiple times. There’re two approaches to solve this issue, idempotent updates, and transactional updates. They are further discussed in the following sections.</p>
<h2 id="Exactly-once-with-Idempotent-Writes"><a href="#Exactly-once-with-Idempotent-Writes" class="headerlink" title="Exactly-once with Idempotent Writes"></a>Exactly-once with Idempotent Writes</h2><p>If multiple writes produce the same data, then this output operation is idempotent. <code>saveAsTextFile</code> is a typical idempotent update; messages with unique keys can be written to database without duplication. This approach will give us the equivalent exactly-once semantics. Note though it’s usually for map-only procedures, and it requires some setup on Kafka DStream.</p>
<ul>
<li>Set <code>enable.auto.commit</code> to <code>false</code>. By default, Kafka DStream will commit the consumer offsets right after it receives the data. We want to postpone this action unitl the batch is fully processed.</li>
<li>Turn on Spark Streaming’s checkpointing to store Kafka offsets. But if the application code changes, checkpointed data is not reusable. This leads to a second option:</li>
<li>Commit Kafka offsets after outputs. Kafka provides a <code>commitAsync</code> API, and the <code>HasOffsetRanges</code> class can be used to extract offsets from the initial RDD:</li>
</ul>
<pre class=" language-scala"><code class="language-scala">messages<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>
  <span class="token keyword">val</span> offsetRanges <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges
  rdd<span class="token punctuation">.</span>foreachPartition <span class="token punctuation">{</span> iter <span class="token keyword">=></span>
    <span class="token comment" spellcheck="true">// output to database</span>
  <span class="token punctuation">}</span>
  messages<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>CanCommitOffsets<span class="token punctuation">]</span><span class="token punctuation">.</span>commitAsync<span class="token punctuation">(</span>offsetRanges<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Exactly-once-with-Transactional-Writes"><a href="#Exactly-once-with-Transactional-Writes" class="headerlink" title="Exactly-once with Transactional Writes"></a>Exactly-once with Transactional Writes</h2><p>Transactional updates require a unique identifier. One can generate from batch time, partition id, or Kafka offsets, and then write the result along with the identifier into external storage within a single transaction. This atomic operation gives us exactly-once semantics, and can be applied to both map-only and aggregation procedures.</p>
<p>Usually writing to database should happen in <code>foreachPartition</code>, i.e. in worker nodes. It is true for map-only procedure, because Kafka RDD’s partition is correspondent to Kafka partition, so we can extract each partition’s offset like this:</p>
<pre class=" language-scala"><code class="language-scala">messages<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>
  <span class="token keyword">val</span> offsetRanges <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges
  rdd<span class="token punctuation">.</span>foreachPartition <span class="token punctuation">{</span> iter <span class="token keyword">=></span>
    <span class="token keyword">val</span> offsetRange <span class="token operator">=</span> offsetRanges<span class="token punctuation">(</span>TaskContext<span class="token punctuation">.</span>get<span class="token punctuation">.</span>partitionId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>But for shuffled operations like the error log count example, we need to first collect the result back into driver and then perform the transaction.</p>
<pre class=" language-scala"><code class="language-scala">messages<span class="token punctuation">.</span>foreachRDD <span class="token punctuation">{</span> rdd <span class="token keyword">=></span>
  <span class="token keyword">val</span> offsetRanges <span class="token operator">=</span> rdd<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>HasOffsetRanges<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetRanges
  <span class="token keyword">val</span> result <span class="token operator">=</span> processLogs<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// parse log and count error</span>
  DB<span class="token punctuation">.</span>localTx <span class="token punctuation">{</span> <span class="token keyword">implicit</span> session <span class="token keyword">=></span>
    result<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>time<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token keyword">=></span>
      <span class="token comment" spellcheck="true">// save to error_log table</span>
    <span class="token punctuation">}</span>
    offsetRanges<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> offsetRange <span class="token keyword">=></span>
      <span class="token keyword">val</span> affectedRows <span class="token operator">=</span> sql<span class="token string">"""
      update kafka_offset set offset = ${offsetRange.untilOffset}
      where topic = ${topic} and `partition` = ${offsetRange.partition}
      and offset = ${offsetRange.fromOffset}
      """</span><span class="token punctuation">.</span>update<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>affectedRows <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> Exception<span class="token punctuation">(</span><span class="token string">"fail to update offset"</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>If the offsets fail to update, or there’s a duplicate offset range detected by <code>offset != $fromOffset</code>, the whole transaction will rollback, which guarantees the exactly-once semantics.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Exactly-once is a very strong semantics in stream processing, and will inevitably bring some overhead to your application and impact the throughput. It’s also not applicable to <a href="https://github.com/koeninger/kafka-exactly-once/blob/master/src/main/scala/example/Windowed.scala" target="_blank" rel="external">windowed</a> operations. So you need to decide whether it’s necessary to spend such efforts, or weaker semantics even with few data loss will suffice. But surely knowing how to achieve exactly-once is a good chance of learning, and it’s a great fun.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://blog.cloudera.com/blog/2015/03/exactly-once-spark-streaming-from-apache-kafka/" target="_blank" rel="external">http://blog.cloudera.com/blog/2015/03/exactly-once-spark-streaming-from-apache-kafka/</a></li>
<li><a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html" target="_blank" rel="external">http://spark.apache.org/docs/latest/streaming-programming-guide.html</a></li>
<li><a href="http://spark.apache.org/docs/latest/streaming-kafka-0-10-integration.html" target="_blank" rel="external">http://spark.apache.org/docs/latest/streaming-kafka-0-10-integration.html</a></li>
<li><a href="http://kafka.apache.org/documentation.html#semantics" target="_blank" rel="external">http://kafka.apache.org/documentation.html#semantics</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Exactly-once semantics is one of the advanced topics of stream processing. To process every message once and only once, in spite of system or network failure, not only the stream processing framework needs to provide such functionality, but also the message delivery system, the output data store, as well as how we implement the processing procedure, altogether can we ensure the exactly-once semantics. In this article, I’ll demonstrate how to use Spark Streaming, with Kafka as data source and MySQL the output storage, to achieve exactly-once stream processing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://spark.apache.org/docs/latest/img/streaming-arch.png&quot; alt=&quot;Spark Streaming&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;An-Introductory-Example&quot;&gt;&lt;a href=&quot;#An-Introductory-Example&quot; class=&quot;headerlink&quot; title=&quot;An Introductory Example&quot;&gt;&lt;/a&gt;An Introductory Example&lt;/h2&gt;&lt;p&gt;First let’s implement a simple yet complete stream processing application that receive access logs from Kafka, parse and count the errors, then write the errors per minute metric into MySQL database.&lt;/p&gt;
&lt;p&gt;Sample access logs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;2017-07-30 14:09:08 ERROR some message
2017-07-30 14:09:20 INFO  some message
2017-07-30 14:10:50 ERROR some message
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output table, where &lt;code&gt;log_time&lt;/code&gt; should be truncated to minutes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;create table error_log (
  log_time datetime primary key,
  log_count int not null default 0
);
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="scala" scheme="http://shzhangji.com/tags/scala/"/>
    
      <category term="spark" scheme="http://shzhangji.com/tags/spark/"/>
    
      <category term="spark streaming" scheme="http://shzhangji.com/tags/spark-streaming/"/>
    
      <category term="kafka" scheme="http://shzhangji.com/tags/kafka/"/>
    
      <category term="stream processing" scheme="http://shzhangji.com/tags/stream-processing/"/>
    
  </entry>
  
  <entry>
    <title>Learn Pandas from a SQL Perspective</title>
    <link href="http://shzhangji.com/blog/2017/07/23/learn-pandas-from-a-sql-perspective/"/>
    <id>http://shzhangji.com/blog/2017/07/23/learn-pandas-from-a-sql-perspective/</id>
    <published>2017-07-23T12:02:50.000Z</published>
    <updated>2017-07-26T01:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://pandas.pydata.org/" target="_blank" rel="external">Pandas</a> is a widely used data processing tool for Python. Along with NumPy and Matplotlib, it provides in-memory high-performance data munging, analyzing, and visualization capabilities. Although Python is an easy-to-learn programming language, it still takes time to learn Pandas APIs and the idiomatic usages. For data engineer and analysts, SQL is the de-facto standard language of data queries. This article will provide examples of how some common SQL queries can be rewritten with Pandas.</p>
<p>The installation and basic concepts of Pandas is not covered in this post. One can check out the offical documentation, or read the book <a href="https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/" target="_blank" rel="external">Python for Data Analysis</a>. And I recommend using the <a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a> Python distribution, with <a href="https://pythonhosted.org/spyder/" target="_blank" rel="external">Spyder</a> IDE included. Before diving into the codes, please import Pandas and NumPy as follows:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
</code></pre>
<h2 id="FROM-Load-Data-into-Memory"><a href="#FROM-Load-Data-into-Memory" class="headerlink" title="FROM - Load Data into Memory"></a><code>FROM</code> - Load Data into Memory</h2><p>First of all, let’s read some data into the workspace (memory). Pandas supports a variety of formats, one of them is CSV. Take the following flight delay dataset for example (<a href="/uploads/flights.csv">link</a>):</p>
<pre class=" language-csv"><code class="language-csv">date,delay,distance,origin,destination
02221605,3,358,BUR,SMF
01022100,-5,239,HOU,DAL
03210808,6,288,BWI,ALB
</code></pre>
<p>We can use <code>pd.read_csv</code> to load this file:</p>
<pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'flights.csv'</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'date'</span><span class="token punctuation">:</span> str<span class="token punctuation">}</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>This statement will load <code>flights.csv</code> file into memory, use first line as column names, and try to figure out each column’s type. Since the <code>date</code> column is in <code>%m%d%H%M</code> format, we don’t want to lose the initial <code>0</code> in month, so we pass an explict <code>dtype</code> for it, indicating that this column should stay unparsed.</p>
<a id="more"></a>
<p> <code>df.head</code> is a function to peek the dataset. It accepts a single parameter to limit the rows, much like <code>LIMIT</code> caluse. To perform a <code>LIMIT 10, 100</code>, use <code>df.iloc[10:100]</code>. Besides, IPython defaults to show only 60 rows, but we can increase this limit by:</p>
<pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>options<span class="token punctuation">.</span>display<span class="token punctuation">.</span>max_rows <span class="token operator">=</span> <span class="token number">100</span>
df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>
</code></pre>
<p>Another common loading technique is reading from database. Pandas also has built-in support:</p>
<pre class=" language-python"><code class="language-python">conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
select `date`, `delay`, `distance`, `origin`, `destination`
from flights limit 1000
"""</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span>
</code></pre>
<p>To save DataFrame into file or database, use <code>pd.to_csv</code> and <code>pd.to_sql</code> respectively.</p>
<h2 id="SELECT-Column-Projection"><a href="#SELECT-Column-Projection" class="headerlink" title="SELECT - Column Projection"></a><code>SELECT</code> - Column Projection</h2><p>The <code>SELECT</code> clause in SQL is used to perform column projection and data transformation.</p>
<pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># SELECT `date`</span>
df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># SELECT `date`, `delay`</span>
df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># SELECT `date, `delay` LIMIT 10, 100</span>
</code></pre>
<p>SQL provides various functions to transform data, most of them can be replaced by Pandas, or you can simply write one with Python. Here I’ll choose some commonly used functions to illustrate.</p>
<h3 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h3><p>Pandas string functions can be invoked by DataFrame and Series’ <code>str</code> attribute, e.g. <code>df[&#39;origin&#39;].str.lower()</code>.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT CONCAT(origin, ' to ', destination)</span>
df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'destination'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' to '</span><span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># TRIM(origin)</span>
df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>len<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># LENGTH(origin)</span>
df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># REPLACE(origin, 'a', 'b')</span>

<span class="token comment" spellcheck="true"># SELECT SUBSTRING(origin, 1, 1)</span>
df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># use Python string indexing</span>

<span class="token comment" spellcheck="true"># SELECT SUBSTRING_INDEX(domain, '.', 2)</span>
<span class="token comment" spellcheck="true"># www.example.com -> www.example</span>
df<span class="token punctuation">[</span><span class="token string">'domain'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">'domain'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>r<span class="token string">'^([^.]+\.[^.]+)'</span><span class="token punctuation">)</span>
</code></pre>
<p>Pandas also has a feature called broadcast behaviour, i.e. perform operations between lower dimensional data (or scalar value) with higher dimensional data. For instances:</p>
<pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'full_date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2001'</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># CONCAT('2001', `date`)</span>
df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">60</span>
df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>div<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># same as above</span>
</code></pre>
<p>There’re many other string functions that Pandas support out-of-the-box, and they are quite different, thus more powerful than SQL. For a complete list please check the <a href="https://pandas.pydata.org/pandas-docs/stable/text.html" target="_blank" rel="external">Working with Text Data</a> doc.</p>
<h3 id="Date-Functions"><a href="#Date-Functions" class="headerlink" title="Date Functions"></a>Date Functions</h3><p><code>pd.to_datetime</code> is used to convert various datetime representations to the standard <code>datetime64</code> dtype. <code>dt</code> is a property of datetime/period like Series, from which you can extract information about date and time. Full documentation can be found in <a href="https://pandas.pydata.org/pandas-docs/stable/timeseries.html" target="_blank" rel="external">Time Series / Date functionality</a>.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT STR_TO_DATE(full_date, '%Y%m%d%H%i%s') AS `datetime`</span>
df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'full_date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">'%Y%m%d%H%M%S'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># SELECT DATE_FORMAT(`datetime`, '%Y-%m-%d')</span>
df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month <span class="token comment" spellcheck="true"># MONTH(`datetime`)</span>
df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>hour <span class="token comment" spellcheck="true"># HOUR(`datetime`)</span>

<span class="token comment" spellcheck="true"># SELECT UNIX_TIMESTAMP(`datetime`)</span>
df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span> <span class="token operator">//</span> pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value

<span class="token comment" spellcheck="true"># SELECT FROM_UNIXTIME(`timestamp`)</span>
pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># SELECT `datetime` + INTERVAL 1 DAY</span>
df<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span> <span class="token operator">+</span> pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="WHERE-Row-Selection"><a href="#WHERE-Row-Selection" class="headerlink" title="WHERE - Row Selection"></a><code>WHERE</code> - Row Selection</h2><p>For logic operators, Pandas will result in a boolean typed Series, which can be used to filter out rows:</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 0  True</span>
<span class="token comment" spellcheck="true"># 1 False</span>
<span class="token comment" spellcheck="true"># 2  True</span>
<span class="token comment" spellcheck="true"># dtype: bool</span>

<span class="token comment" spellcheck="true"># WHERE delay > 0</span>
df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span>
</code></pre>
<p>We can combine multiple conditions with bitwise operators:</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># WHERE delay > 0 AND distance &lt;= 500</span>
df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'distance'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># WHERE delay > 0 OR origin = 'BUR'</span>
df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'BUR'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># WHERE NOT (delay > 0)</span>
df<span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p>For <code>IS NULL</code> and <code>IS NOT NULL</code>, we can use the built-in functions:</p>
<pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># delay IS NULL</span>
df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># delay IS NOT NUL</span>
</code></pre>
<p>There’s also a <code>df.query</code> method to write filters as string expression:</p>
<pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'delay > 0 and distaince &lt;= 500'</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'(delay > 0) | (origin == "BUR")'</span><span class="token punctuation">)</span>
</code></pre>
<p>Actually, Pandas provides more powerful functionalities for <a href="https://pandas.pydata.org/pandas-docs/stable/indexing.html" target="_blank" rel="external">Indexing and Selecting Data</a>, and some of them cannot be expressed by SQL. You can find more usages in the docs.</p>
<h2 id="GROUP-BY-Aggregation"><a href="#GROUP-BY-Aggregation" class="headerlink" title="GROUP BY - Aggregation"></a><code>GROUP BY</code> - Aggregation</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT origin, COUNT(*) FROM flights GROUP BY origin</span>
df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># origin</span>
<span class="token comment" spellcheck="true"># ABQ    22</span>
<span class="token comment" spellcheck="true"># ALB     4</span>
<span class="token comment" spellcheck="true"># AMA     4</span>
<span class="token comment" spellcheck="true"># dtype: int64</span>
</code></pre>
<p>There’re two parts in an aggregation statement, the columns to group by and the aggregation function. It’s possible to pass multiple columns to <code>df.groupby</code>, as well as multiple aggregators.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT origin, destination, SUM(delay), AVG(distance)</span>
<span class="token comment" spellcheck="true"># GROUP BY origin, destination</span>
df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">,</span> <span class="token string">'destination'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">'delay'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">,</span>
    <span class="token string">'distance'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>mean
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># SELECT origin, MIN(delay), MAX(delay) GROUP BY origin</span>
df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>We can also group by a function result. More usages can be found in <a href="https://pandas.pydata.org/pandas-docs/stable/groupby.html" target="_blank" rel="external">Group By: split-apply-combine</a>.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT LENGTH(origin), COUNT(*) GROUP BY LENGTH(origin)</span>
df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="ORDER-BY-Sorting-Rows"><a href="#ORDER-BY-Sorting-Rows" class="headerlink" title="ORDER BY - Sorting Rows"></a><code>ORDER BY</code> - Sorting Rows</h2><p>There’re two types of sort, by index and by values. If you are not familiar with the concept index, please refer to Pandas tutorials.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ORDER BY origin</span>
df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'origin'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># ORDER BY origin ASC, destination DESC</span>
df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">,</span> <span class="token string">'destination'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="JOIN-Merge-DateFrames"><a href="#JOIN-Merge-DateFrames" class="headerlink" title="JOIN - Merge DateFrames"></a><code>JOIN</code> - Merge DateFrames</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># FROM product a LEFT JOIN category b ON a.cid = b.id</span>
pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df_product<span class="token punctuation">,</span> df_category<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'cid'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>
</code></pre>
<p>If join key is the same, we can use <code>on=[&#39;k1&#39;, &#39;k2&#39;]</code>. The default join method (<code>how</code>) is inner join. Other options are <code>left</code> for left join, <code>right</code> outer join, and <code>outer</code> for full outer join.</p>
<p><code>pd.concat</code> can be used to perform <code>UNION</code>. More usages can be found in <a href="https://pandas.pydata.org/pandas-docs/stable/merging.html" target="_blank" rel="external">Merge, join, and concatenate</a>.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT * FROM a UNION SELECT * FROM b</span>
pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_a<span class="token punctuation">,</span> df_b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h1 id="Rank-Within-Groups"><a href="#Rank-Within-Groups" class="headerlink" title="Rank Within Groups"></a>Rank Within Groups</h1><p>Last but not least, it’s common to select top n items within each groups. In MySQL, we have to use variables. In Pandas, we can use the <code>rank</code> function on grouped DataFrame:</p>
<pre class=" language-python"><code class="language-python">rnk <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>rnk<span class="token operator">=</span>rnk<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'rnk &lt;= 3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'origin'</span><span class="token punctuation">,</span> <span class="token string">'rnk'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html" target="_blank" rel="external">https://pandas.pydata.org/pandas-docs/stable/comparison_with_sql.html</a></li>
<li><a href="http://www.gregreda.com/2013/01/23/translating-sql-to-pandas-part1/" target="_blank" rel="external">http://www.gregreda.com/2013/01/23/translating-sql-to-pandas-part1/</a></li>
<li><a href="http://codingsight.com/pivot-tables-in-mysql/" target="_blank" rel="external">http://codingsight.com/pivot-tables-in-mysql/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;Pandas&lt;/a&gt; is a widely used data processing tool for Python. Along with NumPy and Matplotlib, it provides in-memory high-performance data munging, analyzing, and visualization capabilities. Although Python is an easy-to-learn programming language, it still takes time to learn Pandas APIs and the idiomatic usages. For data engineer and analysts, SQL is the de-facto standard language of data queries. This article will provide examples of how some common SQL queries can be rewritten with Pandas.&lt;/p&gt;
&lt;p&gt;The installation and basic concepts of Pandas is not covered in this post. One can check out the offical documentation, or read the book &lt;a href=&quot;https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/&quot;&gt;Python for Data Analysis&lt;/a&gt;. And I recommend using the &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt; Python distribution, with &lt;a href=&quot;https://pythonhosted.org/spyder/&quot;&gt;Spyder&lt;/a&gt; IDE included. Before diving into the codes, please import Pandas and NumPy as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;import pandas as pd
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;FROM-Load-Data-into-Memory&quot;&gt;&lt;a href=&quot;#FROM-Load-Data-into-Memory&quot; class=&quot;headerlink&quot; title=&quot;FROM - Load Data into Memory&quot;&gt;&lt;/a&gt;&lt;code&gt;FROM&lt;/code&gt; - Load Data into Memory&lt;/h2&gt;&lt;p&gt;First of all, let’s read some data into the workspace (memory). Pandas supports a variety of formats, one of them is CSV. Take the following flight delay dataset for example (&lt;a href=&quot;/uploads/flights.csv&quot;&gt;link&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;csv&quot;&gt;date,delay,distance,origin,destination
02221605,3,358,BUR,SMF
01022100,-5,239,HOU,DAL
03210808,6,288,BWI,ALB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;pd.read_csv&lt;/code&gt; to load this file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;df = pd.read_csv(&amp;#39;flights.csv&amp;#39;, dtype={&amp;#39;date&amp;#39;: str})
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This statement will load &lt;code&gt;flights.csv&lt;/code&gt; file into memory, use first line as column names, and try to figure out each column’s type. Since the &lt;code&gt;date&lt;/code&gt; column is in &lt;code&gt;%m%d%H%M&lt;/code&gt; format, we don’t want to lose the initial &lt;code&gt;0&lt;/code&gt; in month, so we pass an explict &lt;code&gt;dtype&lt;/code&gt; for it, indicating that this column should stay unparsed.&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
      <category term="analytics" scheme="http://shzhangji.com/tags/analytics/"/>
    
      <category term="pandas" scheme="http://shzhangji.com/tags/pandas/"/>
    
      <category term="sql" scheme="http://shzhangji.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Log Tailer with WebSocket and Python</title>
    <link href="http://shzhangji.com/blog/2017/07/15/log-tailer-with-websocket-and-python/"/>
    <id>http://shzhangji.com/blog/2017/07/15/log-tailer-with-websocket-and-python/</id>
    <published>2017-07-15T11:21:03.000Z</published>
    <updated>2017-07-15T11:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Tailing a log file is a common task when we deploy or maintain some software in production. Instead of logging into the server and <code>tail -f</code>, it would be nice if we can tail a log file in the browser. With WebSocket, this can be done easily. In this article, I’ll walk you through a simple <strong>logviewer</strong> (<a href="http://github.com/jizhang/logviewer" target="_blank" rel="external">source</a>) utility that is written in Python.</p>
<p><img src="/images/logviewer-websocket.png" alt="Logviewer with WebSocket"></p>
<h2 id="WebSocket-Intro"><a href="#WebSocket-Intro" class="headerlink" title="WebSocket Intro"></a>WebSocket Intro</h2><p>WebSocket is standard protocol over TCP, that provides full-duplex communication between client and server side, usually a browser and a web server. Before WebSocket, when we want to keep an alive browser-server connection, we choose from long polling, forever frame or Comet techniques. Now that WebSocket is widely supported by major browsers, we can use it to implement web chatroom, games, realtime dashboard, etc. Besides, WebSocket connection can be established by an HTTP upgrade request, and communicate over 80 port, so as to bring minimum impact on existing network facility.</p>
<a id="more"></a>
<h2 id="Python’s-websockets-Package"><a href="#Python’s-websockets-Package" class="headerlink" title="Python’s websockets Package"></a>Python’s <code>websockets</code> Package</h2><p><code>websockets</code> is a Python package that utilize Python’s <code>asyncio</code> to develop WebSocket servers and clients. The package can be installed via <code>pip</code>, and it requires Python 3.3+.</p>
<pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> websockets
<span class="token comment" spellcheck="true"># For Python 3.3</span>
pip <span class="token function">install</span> asyncio
</code></pre>
<p>Following is a simple Echo server:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> websockets

@asyncio<span class="token punctuation">.</span>coroutine
<span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    message <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'recv'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

start_server <span class="token operator">=</span> websockets<span class="token punctuation">.</span>serve<span class="token punctuation">(</span>echo<span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8765</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>start_server<span class="token punctuation">)</span>
asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>Here we use Python’s coroutines to handle client requests. Coroutine enables single-threaded application to run concurrent codes, such as handling socket I/O. Note that Python 3.5 introduced two new keywords for coroutine, <code>async</code> and <code>await</code>, so the Echo server can be rewritten as:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    message <span class="token operator">=</span> <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre>
<p>For client side, we use the built-in <code>WebSocket</code> class. You can simply paste the following code into Chrome’s JavaScript console:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8765'</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Tail-a-Log-File"><a href="#Tail-a-Log-File" class="headerlink" title="Tail a Log File"></a>Tail a Log File</h2><p>We’ll take the following steps to implement a log viewer:</p>
<ul>
<li>Client opens a WebSocket connection, and puts the file path in the url, like <code>ws://localhost:8765/tmp/build.log?tail=1</code>;</li>
<li>Server parses the file path, along with a flag that indicates whether this is a view once or tail request;</li>
<li>Open file and start sending contents within a for loop.</li>
</ul>
<p>Full code can be found on <a href="https://github.com/jizhang/logviewer" target="_blank" rel="external">GitHub</a>, so here I’ll select some important parts:</p>
<pre class=" language-python"><code class="language-python">@asyncio<span class="token punctuation">.</span>coroutine
<span class="token keyword">def</span> <span class="token function">view_log</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parse_result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>parse_result<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    query <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>parse_qs<span class="token punctuation">(</span>parse_result<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
    tail <span class="token operator">=</span> query <span class="token operator">and</span> query<span class="token punctuation">[</span><span class="token string">'tail'</span><span class="token punctuation">]</span> <span class="token operator">and</span> query<span class="token punctuation">[</span><span class="token string">'tail'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> tail<span class="token punctuation">:</span>
            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> content<span class="token punctuation">:</span>
                    <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><ul>
<li>Sometimes the client browser will not close the connection properly, so it’s necessary to add some heartbeat mechanism. For instance:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> last_heartbeat <span class="token operator">></span> HEARTBEAT_INTERVAL<span class="token punctuation">:</span>
    <span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'ping'</span><span class="token punctuation">)</span>
    pong <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>wait_for<span class="token punctuation">(</span>websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> pong <span class="token operator">!=</span> <span class="token string">'pong'</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Ping error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    last_heartbeat <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>Log files may contain ANSI color codes (e.g. logging level). We can use <code>ansi2html</code> package to convert them into HTML:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ansi2html <span class="token keyword">import</span> Ansi2HTMLConverter
conv <span class="token operator">=</span> Ansi2HTMLConverter<span class="token punctuation">(</span>inline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">yield</span> <span class="token keyword">from</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>conv<span class="token punctuation">.</span>convert<span class="token punctuation">(</span>content<span class="token punctuation">,</span> full<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>It’s also necessary to do some permission checks on the file path. For example, convert to absolute path and do a simple prefix check.</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="external">WebSocket - Wikipedia</a></li>
<li><a href="https://websockets.readthedocs.io/en/stable/intro.html" target="_blank" rel="external">websockets - Get Started</a></li>
<li><a href="https://docs.python.org/3/library/asyncio-task.html" target="_blank" rel="external">Tasks and coroutines</a></li>
<li><a href="https://stackoverflow.com/questions/12523044/how-can-i-tail-a-log-file-in-python" target="_blank" rel="external">How can I tail a log file in Python?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tailing a log file is a common task when we deploy or maintain some software in production. Instead of logging into the server and &lt;code&gt;tail -f&lt;/code&gt;, it would be nice if we can tail a log file in the browser. With WebSocket, this can be done easily. In this article, I’ll walk you through a simple &lt;strong&gt;logviewer&lt;/strong&gt; (&lt;a href=&quot;http://github.com/jizhang/logviewer&quot;&gt;source&lt;/a&gt;) utility that is written in Python.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/logviewer-websocket.png&quot; alt=&quot;Logviewer with WebSocket&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;WebSocket-Intro&quot;&gt;&lt;a href=&quot;#WebSocket-Intro&quot; class=&quot;headerlink&quot; title=&quot;WebSocket Intro&quot;&gt;&lt;/a&gt;WebSocket Intro&lt;/h2&gt;&lt;p&gt;WebSocket is standard protocol over TCP, that provides full-duplex communication between client and server side, usually a browser and a web server. Before WebSocket, when we want to keep an alive browser-server connection, we choose from long polling, forever frame or Comet techniques. Now that WebSocket is widely supported by major browsers, we can use it to implement web chatroom, games, realtime dashboard, etc. Besides, WebSocket connection can be established by an HTTP upgrade request, and communicate over 80 port, so as to bring minimum impact on existing network facility.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
      <category term="websocket" scheme="http://shzhangji.com/tags/websocket/"/>
    
      <category term="ops" scheme="http://shzhangji.com/tags/ops/"/>
    
  </entry>
  
  <entry>
    <title>Build Interactive Report with Crossfilter and dc.js</title>
    <link href="http://shzhangji.com/blog/2017/06/18/build-interactive-report-with-crossfilter-and-dc-js/"/>
    <id>http://shzhangji.com/blog/2017/06/18/build-interactive-report-with-crossfilter-and-dc-js/</id>
    <published>2017-06-18T08:38:01.000Z</published>
    <updated>2017-06-19T01:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>When visualizing multidimensional datasets, we often want to connect individual charts together, so that one chart’s filter will apply to all the other charts. We can do it manually, filter data on the server side, and update the rendered charts. Or we can filter data on the client side, and let charts update themselves. With Crossfilter and dc.js, this work becomes simple and intuitive.</p>
<h2 id="Airline-On-time-Performance"><a href="#Airline-On-time-Performance" class="headerlink" title="Airline On-time Performance"></a>Airline On-time Performance</h2><p>Here’s an example taken from Crossfilter’s official website. It’s a flight delay analysis report based on <a href="http://stat-computing.org/dataexpo/2009/" target="_blank" rel="external">ASA Data Expo</a> dataset. And this post will introduce how to use dc.js to build the report. A runnable JSFiddle can be found <a href="https://jsfiddle.net/zjerryj/gjao9sws/" target="_blank" rel="external">here</a>, though the dataset is reduced to 1,000 records.</p>
<p><img src="/images/airline-ontime-performance.png" alt=""></p>
<a id="more"></a>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p><a href="http://crossfilter.github.io/crossfilter/" target="_blank" rel="external">Crossfilter</a> is a JavaScript library to do multidimensional queries on large amount of data in the client’s browser. It can <strong>cross-filter</strong> between different group-by queries, so that query results will be connected and updated automatically. With the help of <a href="https://dc-js.github.io/dc.js/" target="_blank" rel="external">dc.js</a>, also a JavaScript library that provides charting capability, together we can develop high-performance, interactive reports.</p>
<h2 id="Dataset-Dimension-and-Measure"><a href="#Dataset-Dimension-and-Measure" class="headerlink" title="Dataset, Dimension, and Measure"></a>Dataset, Dimension, and Measure</h2><p>There’re several concepts in Crossfilter, namely dataset, dimension, measure. If you come from a data warehouse or analytics background, these are similar to the terms in OLAP Cube.</p>
<ul>
<li>Dataset, or a list of records, is a two dimensional table that contains rows and columns.</li>
<li>Dimension columns are used to do group-bys. They are either categorical, like dates, gender, or represents a range of values, like age range, etc.</li>
<li>Measure columns are used to do aggregations, such as sum, standard deviation, so they are mostly numeric. Examples are income, number of children.</li>
</ul>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> flights <span class="token operator">=</span> d3<span class="token punctuation">.</span>csv<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>flightsCsv<span class="token punctuation">)</span>
<span class="token keyword">let</span> flight <span class="token operator">=</span> <span class="token function">crossfilter</span><span class="token punctuation">(</span>flights<span class="token punctuation">)</span>
<span class="token keyword">let</span> hour <span class="token operator">=</span> flight<span class="token punctuation">.</span><span class="token function">dimension</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> d<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> d<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> hours <span class="token operator">=</span> hour<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">)</span>
</code></pre>
<p>Here we create a crossfilter object from a parsed csv data. And we define a dimension that is derived from <code>date</code> column, hour of day represented by float values. Then we group by its integer part. To query the top 3 hours that contains most delays:</p>
<pre class=" language-js"><code class="language-js">hours<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// output</span>
<span class="token punctuation">[</span>
  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">72</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">72</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> key<span class="token punctuation">:</span>  <span class="token number">8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">71</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre>
<h2 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h2><p>Now we can plot the hour of delays in a bar chart:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> hourChart <span class="token operator">=</span> dc<span class="token punctuation">.</span><span class="token function">barChart</span><span class="token punctuation">(</span><span class="token string">'#hour-chart'</span><span class="token punctuation">)</span>
hourChart
  <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">dimension</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">rangeRound</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">controlsUseVisibility</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre>
<p>The corresponding HTML code:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hour-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Time of Day
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>We can see that dc.js is highly integrated with crossfilter. We simply pass the dimension objects and do some setup for chart axes. In this example, x axis is hours of the day, and y axis is the count of delayed flights.</p>
<p>Note <code>class=&quot;reset&quot;</code> is used with <code>controlUseVisibility</code>, that provides a <code>reset</code> button. Try to drag on the chart to filter a range of data, and you’ll see how this button is used.</p>
<h2 id="Cross-Filtering"><a href="#Cross-Filtering" class="headerlink" title="Cross Filtering"></a>Cross Filtering</h2><p>We can create other charts, such as a hitogram of arrival delay in minutes. You can find the source code in JSFiddle. When you do some filtering (drag and select), the other charts will be updated simultaneously. It is great when you want to explore the distribution of data combined with filtering conditions. Just declare the relationship, and dc.js will do the rest for you.</p>
<p>There’re many other components like pie chart, table grid, or even customized HTML. But to master these tools, you also need some knowledge of d3.js.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://crossfilter.github.io/crossfilter/" target="_blank" rel="external">Crossfilter - Fast Multidimensional Filtering for Coordinated Views</a></li>
<li><a href="https://dc-js.github.io/dc.js/" target="_blank" rel="external">dc.js - Dimensional Charting Javascript Library</a></li>
<li><a href="http://blog.rusty.io/2012/09/17/crossfilter-tutorial/" target="_blank" rel="external">Crossfiler Tutorial</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When visualizing multidimensional datasets, we often want to connect individual charts together, so that one chart’s filter will apply to all the other charts. We can do it manually, filter data on the server side, and update the rendered charts. Or we can filter data on the client side, and let charts update themselves. With Crossfilter and dc.js, this work becomes simple and intuitive.&lt;/p&gt;
&lt;h2 id=&quot;Airline-On-time-Performance&quot;&gt;&lt;a href=&quot;#Airline-On-time-Performance&quot; class=&quot;headerlink&quot; title=&quot;Airline On-time Performance&quot;&gt;&lt;/a&gt;Airline On-time Performance&lt;/h2&gt;&lt;p&gt;Here’s an example taken from Crossfilter’s official website. It’s a flight delay analysis report based on &lt;a href=&quot;http://stat-computing.org/dataexpo/2009/&quot;&gt;ASA Data Expo&lt;/a&gt; dataset. And this post will introduce how to use dc.js to build the report. A runnable JSFiddle can be found &lt;a href=&quot;https://jsfiddle.net/zjerryj/gjao9sws/&quot;&gt;here&lt;/a&gt;, though the dataset is reduced to 1,000 records.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/airline-ontime-performance.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="crossfilter" scheme="http://shzhangji.com/tags/crossfilter/"/>
    
      <category term="dc.js" scheme="http://shzhangji.com/tags/dc-js/"/>
    
      <category term="analytics" scheme="http://shzhangji.com/tags/analytics/"/>
    
  </entry>
  
  <entry>
    <title>Why Use Lodash When ES6 Is Available</title>
    <link href="http://shzhangji.com/blog/2017/03/13/why-use-lodash-when-es6-is-available/"/>
    <id>http://shzhangji.com/blog/2017/03/13/why-use-lodash-when-es6-is-available/</id>
    <published>2017-03-13T14:39:01.000Z</published>
    <updated>2017-03-14T01:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lodash.com/" target="_blank" rel="external">Lodash</a> is a well-known JavaScript utility library that makes it easy to manipulate arrays and objects, as well as functions, strings, etc. I myself enjoys its functional way to process collections, especially chaining and lazy evaluation. But as <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ECMAScript 2015 Standard</a> (ES6) becomes widely supported by major browsers, and <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>, the JavaScript compiler that transforms ES6 codes to ES5, plays a major role in today’s frontend development, it seems that most Lodash utilities can be replaced by ES6. But should we? In my opinion, Lodash will remain popular, for it still has lots of useful features that could improve the way of programming.</p>
<h2 id="map-and-Array-map-Are-Different"><a href="#map-and-Array-map-Are-Different" class="headerlink" title="_.map and Array#map Are Different"></a><code>_.map</code> and <code>Array#map</code> Are Different</h2><p><code>_.map</code>, <code>_.reduce</code>, <code>_.filter</code> and <code>_.forEach</code> are frequently used functions when processing collections, and ES6 provides direct support for them:</p>
<pre class=" language-js"><code class="language-js">_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
_<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sum <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
_<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
_<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// becomes</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sum <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>But Lodash’s <code>_.map</code> is more powerful, in that it works on objects, has iteratee / predicate shorthands, lazy evaluation, guards against null parameter, and has better performance.</p>
<a id="more"></a>
<h3 id="Iterate-over-Objects"><a href="#Iterate-over-Objects" class="headerlink" title="Iterate over Objects"></a>Iterate over Objects</h3><p>To iterate over an object in ES6, there’re several approaches:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>With Lodash, there’s a unified <code>_.forEach</code>, for both array and object:</p>
<pre class=" language-js"><code class="language-js">_<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>Although ES6 does <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">provide</a> <code>forEach</code> for the newly added <code>Map</code> type, it takes some effort to first convert an object into a <code>Map</code>:</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// http://stackoverflow.com/a/36644532/1030720</span>
<span class="token keyword">const</span> buildMap <span class="token operator">=</span> o <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Iteratee-Predicate-Shorthands"><a href="#Iteratee-Predicate-Shorthands" class="headerlink" title="Iteratee / Predicate Shorthands"></a>Iteratee / Predicate Shorthands</h3><p>To extract some property from an array of objects:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> n<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> n<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// ES6</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">)</span>
</code></pre>
<p>This can be more helpful when it comes to complex objects:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> n<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> n<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">// ES6</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> obj<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// TypeError: property 'a' is not defined in arr[1]</span>
<span class="token comment" spellcheck="true">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">'a[0].n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => [1, undefined]</span>
</code></pre>
<p>As we can see, Lodash not only provides conveniet shorthands, it also guards against undefined values. For <code>_.filter</code>, there’s also predicate shorthand. Here are some examples from Lodash documentation:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'barney'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'active'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'fred'</span><span class="token punctuation">,</span>   <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'active'</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ES6</span>
users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> o<span class="token punctuation">.</span>active<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token string">'active'</span><span class="token punctuation">)</span>
_<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
_<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'active'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="Chain-and-Lazy-Evaluation"><a href="#Chain-and-Lazy-Evaluation" class="headerlink" title="Chain and Lazy Evaluation"></a>Chain and Lazy Evaluation</h3><p>Here comes the fun part. Processing collections with chaining, lazy evaluation, along with short, easy-to-test functions, is quite popular these days. Most Lodash functions regarding collections can be chained easily. The following is a wordcount example:</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> lines <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
an apple orange the grape
banana an apple melon
an orange banana apple
`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

_<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">=</span><span class="token operator">></span> word<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>identity<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mapValues</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// apple 3</span>
<span class="token comment" spellcheck="true">// orange 2</span>
<span class="token comment" spellcheck="true">// grape 1</span>
<span class="token comment" spellcheck="true">// banana 2</span>
<span class="token comment" spellcheck="true">// melon 1</span>
</code></pre>
<h2 id="Destructuring-Spread-and-Arrow-Function"><a href="#Destructuring-Spread-and-Arrow-Function" class="headerlink" title="Destructuring, Spread and Arrow Function"></a>Destructuring, Spread and Arrow Function</h2><p>ES6 introduces some useful syntaxes like destructuring, spread and arrow function, which can be used to replace a lot of Lodash functions. For instance:</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
_<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => [2, 3]</span>
<span class="token comment" spellcheck="true">// ES6 destructuring syntax</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">// Lodash</span>
<span class="token keyword">let</span> say <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>who<span class="token punctuation">,</span> fruits<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> who <span class="token operator">+</span> <span class="token string">' likes '</span> <span class="token operator">+</span> fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Jerry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// ES6 spread syntax</span>
say <span class="token operator">=</span> <span class="token punctuation">(</span>who<span class="token punctuation">,</span> <span class="token operator">...</span>fruits<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> who <span class="token operator">+</span> <span class="token string">' likes '</span> <span class="token operator">+</span> fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>
<span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Mary'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
_<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 2</span>
<span class="token comment" spellcheck="true">// ES6</span>
<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 2</span>

<span class="token comment" spellcheck="true">// Partial application</span>
<span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b
<span class="token comment" spellcheck="true">// Lodash</span>
<span class="token keyword">let</span> add1 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">partial</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// ES6</span>
add1 <span class="token operator">=</span> b <span class="token operator">=</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// Curry</span>
<span class="token comment" spellcheck="true">// Lodash</span>
<span class="token keyword">let</span> curriedAdd <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
<span class="token keyword">let</span> add1 <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// ES6</span>
curriedAdd <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b
add1 <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>For collection related operations, I prefer Lodash functions for they are more concise and can be chained; for functions that can be rewritten by arrow function, Lodash still seems more simple and clear. And according to some arguments in the <a href="#References">references</a>, the currying, <a href="https://lodash.com/docs/#add" target="_blank" rel="external">operators</a> and <a href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="external">fp style</a> from Lodash are far more useful in scenarios like function composition.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lodash adds great power to JavaScript language. One can write concise and efficient codes with minor efforts. Besides, Lodash is fully <a href="https://lodash.com/custom-builds" target="_blank" rel="external">modularized</a>. Though some of its functions will eventually deprecate, but I believe it’ll still bring many benifits to developers, while pushing the development of JS language as well.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.sitepoint.com/lodash-features-replace-es6/" target="_blank" rel="external">10 Lodash Features You Can Replace with ES6</a></li>
<li><a href="https://derickbailey.com/2016/09/12/does-es6-mean-the-end-of-underscore-lodash/" target="_blank" rel="external">Does ES6 Mean The End Of Underscore / Lodash?</a></li>
<li><a href="https://www.reddit.com/r/javascript/comments/41fq2s/why_should_i_use_lodash_or_rather_what_lodash/" target="_blank" rel="external">Why should I use lodash - reddit</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; is a well-known JavaScript utility library that makes it easy to manipulate arrays and objects, as well as functions, strings, etc. I myself enjoys its functional way to process collections, especially chaining and lazy evaluation. But as &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ECMAScript 2015 Standard&lt;/a&gt; (ES6) becomes widely supported by major browsers, and &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, the JavaScript compiler that transforms ES6 codes to ES5, plays a major role in today’s frontend development, it seems that most Lodash utilities can be replaced by ES6. But should we? In my opinion, Lodash will remain popular, for it still has lots of useful features that could improve the way of programming.&lt;/p&gt;
&lt;h2 id=&quot;map-and-Array-map-Are-Different&quot;&gt;&lt;a href=&quot;#map-and-Array-map-Are-Different&quot; class=&quot;headerlink&quot; title=&quot;_.map and Array#map Are Different&quot;&gt;&lt;/a&gt;&lt;code&gt;_.map&lt;/code&gt; and &lt;code&gt;Array#map&lt;/code&gt; Are Different&lt;/h2&gt;&lt;p&gt;&lt;code&gt;_.map&lt;/code&gt;, &lt;code&gt;_.reduce&lt;/code&gt;, &lt;code&gt;_.filter&lt;/code&gt; and &lt;code&gt;_.forEach&lt;/code&gt; are frequently used functions when processing collections, and ES6 provides direct support for them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;_.map([1, 2, 3], (i) =&amp;gt; i + 1)
_.reduce([1, 2, 3], (sum, i) =&amp;gt; sum + i, 0)
_.filter([1, 2, 3], (i) =&amp;gt; i &amp;gt; 1)
_.forEach([1, 2, 3], (i) =&amp;gt; { console.log(i) })

// becomes
[1, 2, 3].map((i) =&amp;gt; i + 1)
[1, 2, 3].reduce((sum, i) =&amp;gt; sum + i, 0)
[1, 2, 3].filter((i) =&amp;gt; i &amp;gt; 1)
[1, 2, 3].forEach((i) =&amp;gt; { console.log(i) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But Lodash’s &lt;code&gt;_.map&lt;/code&gt; is more powerful, in that it works on objects, has iteratee / predicate shorthands, lazy evaluation, guards against null parameter, and has better performance.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="lodash" scheme="http://shzhangji.com/tags/lodash/"/>
    
      <category term="javascript" scheme="http://shzhangji.com/tags/javascript/"/>
    
      <category term="frontend" scheme="http://shzhangji.com/tags/frontend/"/>
    
      <category term="es6" scheme="http://shzhangji.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Process Python Collections with Functional Programming</title>
    <link href="http://shzhangji.com/blog/2017/03/04/process-python-collections-with-functional-programming/"/>
    <id>http://shzhangji.com/blog/2017/03/04/process-python-collections-with-functional-programming/</id>
    <published>2017-03-04T14:32:17.000Z</published>
    <updated>2017-03-09T05:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I develop Spark applications with Scala, and it has a very powerful <a href="http://docs.scala-lang.org/overviews/collections/introduction" target="_blank" rel="external">collection system</a>, in which functional programming is certainly a key. Java 8 also introduces Lambda Expression and Stream API. In JavaScript, there is a <a href="https://lodash.com/" target="_blank" rel="external">Lodash</a> library that provides powerful tools to process arrays and objects. When my primary work language changes to Python, I am wondering if it’s possible to manipulate collections in a FP way, and fortunately Python already provides syntax and tools for functional programming. Though list comprehension is the pythonic way to deal with collections, but the idea and concepts of FP is definitely worth learning.</p>
<h2 id="Wordcount-Example"><a href="#Wordcount-Example" class="headerlink" title="Wordcount Example"></a>Wordcount Example</h2><p>Let’s first write a snippet to count the word occurences from a paragraph, in of course a functional way.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> itertools


content <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
an apple orange the grape
banana an apple melon
an orange banana apple
"""</span>

word_matches <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>r<span class="token string">'\S+'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
words <span class="token operator">=</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> m<span class="token punctuation">:</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word_matches<span class="token punctuation">)</span>
fruits <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>
grouped_fruits <span class="token operator">=</span> itertools<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span>
fruit_counts <span class="token operator">=</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grouped_fruits<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>fruit_counts<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>Run this example and you’ll get a list of fruits, along with their counts:</p>
<pre class=" language-text"><code class="language-text">[('apple', 3), ('banana', 2), ('grape', 1), ('melon', 1), ('orange', 2)]
</code></pre>
<p>This example includes most aspects of processing collections with FP style. For instance, <code>re.finditer</code> returns an <code>iterator</code> that is lazily evaluated; <code>map</code> and <code>filter</code> are used to do transformations; <code>itertools</code> module provides various functions to cope with iterables; and last but not least, the <code>lambda</code> expression, an easy way to define inline anonymous function. All of them will be described in the following sections.</p>
<a id="more"></a>
<h2 id="Ingredients-of-Functional-Programming"><a href="#Ingredients-of-Functional-Programming" class="headerlink" title="Ingredients of Functional Programming"></a>Ingredients of Functional Programming</h2><p>Python is far from being a functional language, but it provides some basic syntax and tools so that we can choose to write Python in a functional way.</p>
<h3 id="Function-as-First-class-Citizen"><a href="#Function-as-First-class-Citizen" class="headerlink" title="Function as First-class Citizen"></a>Function as First-class Citizen</h3><p>Function is data. It can be assigned to a variable, pass as a parameter to another function, or returned by a function. The later two cases also refers to higher order functions. Python makes it quite easy, you can define and pass around the function:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b

add_two <span class="token operator">=</span> add
<span class="token keyword">print</span><span class="token punctuation">(</span>add_two<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => 3</span>

<span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> operation<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> operation<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>calculate<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => 3</span>
</code></pre>
<p>Or generate a new function from a function:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> n
    <span class="token keyword">return</span> add

add_1 <span class="token operator">=</span> add_n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add_1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => 2</span>
</code></pre>
<p>To use function in <code>map</code>, which applies the function to every element of the iterable:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>add_1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># => [2, 3, 4]</span>
</code></pre>
<p>For very short function, we can use lambda expression:</p>
<pre class=" language-python"><code class="language-python">map<span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="Being-Lazy"><a href="#Being-Lazy" class="headerlink" title="Being Lazy"></a>Being Lazy</h3><p>Lazy evaluation means postponing the execution until it’s necessary. It’s a very common optimization strategy in big data transformation, becuase all map-like operations should be chained and assigned to a single task. In Python, there’s iterator, an stateful object that remembers the current element during iteration. Let’s assume <code>calc</code> is a heavy function, and the following two lines differ:</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>calc<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
map<span class="token punctuation">(</span>calc<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>List comprehension is eager-evaluated, while <code>map</code> (from Python 3.x on) returns an iterator. You can use the <code>next</code> global function to fetch the next element, or take the first two results using:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice
list<span class="token punctuation">(</span>islice<span class="token punctuation">(</span>map<span class="token punctuation">(</span>calc<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>It’s worth mentioning that from Python 3.x on a lot of methods returns iterator instead of concrete list, you can refer to <a href="http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/#Less-Lists-More-Views">this article</a>.</p>
<h3 id="Purity"><a href="#Purity" class="headerlink" title="Purity"></a>Purity</h3><p>A function is pure if its output only depends on its input, and it has no side-effect, i.e. without changing outer/global variable space. Here’re some examples of pure/non-pure functions:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inc</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># pure</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">1</span>

i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># non-pure</span>
    i <span class="token operator">=</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># non-pure, change the console</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
</code></pre>
<p>Purity is a good functional style because:</p>
<ul>
<li>it makes you re-design the functions so that they become shorter;</li>
<li>and short functions are easier to test, have less bugs;</li>
<li>purity also enables parallel execution.</li>
</ul>
<p>In concurrency programming, sharing state, lock, and context switch are all performance killers. Pure functions ensures codes can be executed in parallel without coordination of states, and can be re-executed multiple times safely.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>add_1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h3><p>There’re also topics on combining, currying, partially applying functions, so we can tackle complex problems with small well-defined functions. Python provides <code>decorator</code>, <code>generator</code> syntax, along with <code>functools</code>, <code>operator</code> modules for such tasks. These can be found in Python official documentation.</p>
<h2 id="Chaining-Operations"><a href="#Chaining-Operations" class="headerlink" title="Chaining Operations"></a>Chaining Operations</h2><p><code>map</code>, <code>filter</code>, and functions in <code>itertools</code> cannot be easily chained. We have to nest the function calls or introduce intermediate variables. Luckily, there’s an open-sourced <a href="https://github.com/EntilZha/PyFunctional" target="_blank" rel="external">PyFunctional</a> package that can help us transform or aggregate collections in a funcional way quite fluently.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functional <span class="token keyword">import</span> seq

seq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\
    <span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\
    <span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>\
    <span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># => 14</span>
</code></pre>
<h2 id="List-Comprehension-Or-map"><a href="#List-Comprehension-Or-map" class="headerlink" title="List Comprehension Or map?"></a>List Comprehension Or <code>map</code>?</h2><p>List comprehension and generator expression are the pythonic way of processing collections, and the communiy encourages using list comprehension instead of <code>map</code>, etc. There’s a nice <a href="http://stackoverflow.com/a/6407222/1030720" target="_blank" rel="external">answer</a> on StackOverflow that addresses the following principle: use <code>map</code> only when you already have a function defined. Otherwise just stick to listcomps for it’s more widely accepted. Neverthelss, one should still pay attention to the laziness of various methods.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Processing collections is only one application of functional programming. This program paradigm can be applied to other phases of designing your systems. Further materials like <a href="http://deptinfo.unice.fr/~roy/sicp.pdf" target="_blank" rel="external">SICP</a>, <a href="https://www.manning.com/books/functional-programming-in-scala" target="_blank" rel="external">Functional Programming in Scala</a> are all very informative. Hope you enjoy.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/3/howto/functional.html" target="_blank" rel="external">Functional Programming HOWTO</a></li>
<li><a href="http://kachayev.github.io/talks/uapycon2012/" target="_blank" rel="external">Functional Programming with Python</a></li>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" target="_blank" rel="external">Itertools Recipes</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I develop Spark applications with Scala, and it has a very powerful &lt;a href=&quot;http://docs.scala-lang.org/overviews/collections/introduction&quot;&gt;collection system&lt;/a&gt;, in which functional programming is certainly a key. Java 8 also introduces Lambda Expression and Stream API. In JavaScript, there is a &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; library that provides powerful tools to process arrays and objects. When my primary work language changes to Python, I am wondering if it’s possible to manipulate collections in a FP way, and fortunately Python already provides syntax and tools for functional programming. Though list comprehension is the pythonic way to deal with collections, but the idea and concepts of FP is definitely worth learning.&lt;/p&gt;
&lt;h2 id=&quot;Wordcount-Example&quot;&gt;&lt;a href=&quot;#Wordcount-Example&quot; class=&quot;headerlink&quot; title=&quot;Wordcount Example&quot;&gt;&lt;/a&gt;Wordcount Example&lt;/h2&gt;&lt;p&gt;Let’s first write a snippet to count the word occurences from a paragraph, in of course a functional way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;import re
import itertools


content = &amp;quot;&amp;quot;&amp;quot;
an apple orange the grape
banana an apple melon
an orange banana apple
&amp;quot;&amp;quot;&amp;quot;

word_matches = re.finditer(r&amp;#39;\S+&amp;#39;, content)
words = map(lambda m: m.group(0), word_matches)
fruits = filter(lambda s: len(s) &amp;gt; 3, words)
grouped_fruits = itertools.groupby(sorted(fruits))
fruit_counts = map(lambda t: (t[0], len(list(t[1]))), grouped_fruits)
print(list(fruit_counts))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run this example and you’ll get a list of fruits, along with their counts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;[(&amp;#39;apple&amp;#39;, 3), (&amp;#39;banana&amp;#39;, 2), (&amp;#39;grape&amp;#39;, 1), (&amp;#39;melon&amp;#39;, 1), (&amp;#39;orange&amp;#39;, 2)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example includes most aspects of processing collections with FP style. For instance, &lt;code&gt;re.finditer&lt;/code&gt; returns an &lt;code&gt;iterator&lt;/code&gt; that is lazily evaluated; &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; are used to do transformations; &lt;code&gt;itertools&lt;/code&gt; module provides various functions to cope with iterables; and last but not least, the &lt;code&gt;lambda&lt;/code&gt; expression, an easy way to define inline anonymous function. All of them will be described in the following sections.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
      <category term="functional programming" scheme="http://shzhangji.com/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Difference Between Lodash _.assign and _.assignIn</title>
    <link href="http://shzhangji.com/blog/2017/01/29/difference-between-lodash-assign-and-assignin/"/>
    <id>http://shzhangji.com/blog/2017/01/29/difference-between-lodash-assign-and-assignin/</id>
    <published>2017-01-29T06:18:29.000Z</published>
    <updated>2017-02-16T07:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Lodash, both <code>_.assign</code> and <code>_.assignIn</code> are ways to copy source objects’ properties into target object. According the <a href="https://lodash.com/docs/" target="_blank" rel="external">documentation</a>, <code>_.assign</code> processes <strong>own enumerable string keyed properties</strong>, while <code>_.assignIn</code> processes both <strong>own and inherited source properties</strong>. There’re also other companion functions like <code>_.forOwn</code> and <code>_.forIn</code>, <code>_.has</code> and <code>_.hasIn</code>. So what’s the difference between them?</p>
<p>In brief, the <code>In</code> in latter methods implies the way <code>for...in</code> loop behaves, which <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="external">iterates all enumerable properties of the object itself and those the object inherits from its constructor’s prototype</a>. JavaScript has an inheritance mechanism called prototype chain. When iterating an object’s properties with <code>for...in</code> or <code>_.forIn</code>, all properties appeared in the object and its prototype are processed, until the prototype resolves to <code>null</code>. Here’s the example code taken from Lodash’s doc:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
_<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => {a: 1, c: 3}</span>
_<span class="token punctuation">.</span><span class="token function">assignIn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => {a:1, b:2, c:3, d:4}</span>
</code></pre>
<a id="more"></a>
<h2 id="How-assign-Picks-Properties"><a href="#How-assign-Picks-Properties" class="headerlink" title="How _.assign Picks Properties"></a>How <code>_.assign</code> Picks Properties</h2><p>Let’s dissect the phrase “own enumerable string-keys properties” into three parts. </p>
<h3 id="Own-Property"><a href="#Own-Property" class="headerlink" title="Own Property"></a>Own Property</h3><p>JavaScript is a prototype-based language, but there’re several ways to simulate class and instance, like object literal, function prototype, <code>Object.create</code>, and the newly added <code>class</code> keyword. In either case, we can use <code>Object.prototype.hasOwnProperty()</code> to determine if the property is inherited or not.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span>
Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => false</span>
</code></pre>
<p><code>Object.getOwnPropertyNames()</code> and <code>Object.keys()</code> can retrieve all properties defined directly in the object, except that <code>Object.keys()</code> only returns enumerable keys (see next section).</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>
o2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ['b']</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ['b']</span>
</code></pre>
<h3 id="Enumerable-Property"><a href="#Enumerable-Property" class="headerlink" title="Enumerable Property"></a>Enumerable Property</h3><p>Object property can be defined with either data descriptor or accessor descriptor. Among data descriptor options, the <code>enumerable</code> boolean indicates whether this property shows in <code>for...in</code> or <code>Object.keys()</code>. </p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => []</span>
o<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => false</span>
</code></pre>
<p>You can refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty()</a> for more information.</p>
<h3 id="String-keyed-Property"><a href="#String-keyed-Property" class="headerlink" title="String-keyed Property"></a>String-keyed Property</h3><p>Before ES6, object’s keys are always String. ES6 introduces a new primitive type <a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol" target="_blank" rel="external">Symbol</a>, which can be used as a key for private property. Symbol property is non-enumerable.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
o<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => []</span>
</code></pre>
<p>There’s a nice <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#Detection_Table" target="_blank" rel="external">Detection Table</a> to help you figure out which built-in methods process enumerable or inherited properties.</p>
<h2 id="assign-and-assignIn-Implementation"><a href="#assign-and-assignIn-Implementation" class="headerlink" title="_.assign and _.assignIn Implementation"></a><code>_.assign</code> and <code>_.assignIn</code> Implementation</h2><p>Both methods calls <code>_.keys</code> and <code>_.keysIn</code> respectively. <code>_.keys</code> calls <code>Object.keys()</code> and <code>_.keysIn</code> uses <code>for...in</code> loop. Actually <code>Object.keys()</code> is not difficult to implement. As mentioned above, <code>for...in</code> can be used to retrieve both own and inherited properties, while <code>hasOwnProperty</code> determines whether this property is defined in the object itself.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token function">Object</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>Object.assign()</code> does the same thing as <code>_.assign()</code>. Use Lodash if you need to run your code on older browsers.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign() - JavaScript | MDN</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">Inheritance and The Prototype Chain</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Lodash, both &lt;code&gt;_.assign&lt;/code&gt; and &lt;code&gt;_.assignIn&lt;/code&gt; are ways to copy source objects’ properties into target object. According the &lt;a href=&quot;https://lodash.com/docs/&quot;&gt;documentation&lt;/a&gt;, &lt;code&gt;_.assign&lt;/code&gt; processes &lt;strong&gt;own enumerable string keyed properties&lt;/strong&gt;, while &lt;code&gt;_.assignIn&lt;/code&gt; processes both &lt;strong&gt;own and inherited source properties&lt;/strong&gt;. There’re also other companion functions like &lt;code&gt;_.forOwn&lt;/code&gt; and &lt;code&gt;_.forIn&lt;/code&gt;, &lt;code&gt;_.has&lt;/code&gt; and &lt;code&gt;_.hasIn&lt;/code&gt;. So what’s the difference between them?&lt;/p&gt;
&lt;p&gt;In brief, the &lt;code&gt;In&lt;/code&gt; in latter methods implies the way &lt;code&gt;for...in&lt;/code&gt; loop behaves, which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;iterates all enumerable properties of the object itself and those the object inherits from its constructor’s prototype&lt;/a&gt;. JavaScript has an inheritance mechanism called prototype chain. When iterating an object’s properties with &lt;code&gt;for...in&lt;/code&gt; or &lt;code&gt;_.forIn&lt;/code&gt;, all properties appeared in the object and its prototype are processed, until the prototype resolves to &lt;code&gt;null&lt;/code&gt;. Here’s the example code taken from Lodash’s doc:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function Foo() { this.a = 1; }
Foo.prototype.b = 2;
function Bar() { this.c = 3; }
Bar.prototype.d = 4;
_.assign({a: 0}, new Foo, new Bar); // =&amp;gt; {a: 1, c: 3}
_.assignIn({a: 0}, new Foo, new Bar); // =&amp;gt; {a:1, b:2, c:3, d:4}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="lodash" scheme="http://shzhangji.com/tags/lodash/"/>
    
      <category term="javascript" scheme="http://shzhangji.com/tags/javascript/"/>
    
      <category term="frontend" scheme="http://shzhangji.com/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Python 2 to 3 Quick Guide</title>
    <link href="http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/"/>
    <id>http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/</id>
    <published>2017-01-08T04:26:54.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Few years ago I was programming Python 2.7, when 3.x was still not an option, because of its backward-incompatibiliy and lack of popular third-party libraries support. But now it’s safe to say Python 3 is <a href="http://py3readiness.org/" target="_blank" rel="external">totally ready</a>, and here’s a list of references for those (including me) who are adopting Python 3 with a 2.x background.</p>
<ol>
<li>All Strings Are Unicode</li>
<li><code>print</code> Becomes a Function</li>
<li>Less Lists More Views</li>
<li>Integer Division Returns Float</li>
<li>Comparison Operators Raises <code>TypeError</code></li>
<li>Set Literal Support</li>
<li>New String Formatting</li>
<li>Exception Handling</li>
<li>Global Function Changes</li>
<li>Renaming Modules and Relative Import</li>
</ol>
<h2 id="All-Strings-Are-Unicode"><a href="#All-Strings-Are-Unicode" class="headerlink" title="All Strings Are Unicode"></a>All Strings Are Unicode</h2><p>When dealing with non-ASCII encodings in Python 2, there’re <code>str</code>, <code>unicode</code>, <code>u&#39;...&#39;</code>, <code>s.encode()</code>, etc. In Python 3, there’re only <strong>text</strong> and <strong>binary data</strong>. The former is <code>str</code>, strings that are always represented in Unicode; the later is <code>bytes</code>, which is just a sequence of byte numbers.</p>
<ul>
<li>Conversion between <code>str</code> and <code>bytes</code>:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># str to bytes</span>
<span class="token string">'str'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>
bytes<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># bytes to str</span>
b<span class="token string">'bytes'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>
str<span class="token punctuation">(</span>b<span class="token string">'bytes'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><code>basestring</code> is removed, use <code>str</code> as type: <code>isinstance(s, str)</code></li>
<li><code>bytes</code> is immutable, the corresponding mutable version is <code>bytearray</code>.</li>
<li>The default source file encoding is UTF-8 now.</li>
</ul>
<a id="more"></a>
<h2 id="print-Becomes-a-Function"><a href="#print-Becomes-a-Function" class="headerlink" title="print Becomes a Function"></a><code>print</code> Becomes a Function</h2><p>In Python 2, <code>print</code> is a statement, and now it’s used as a function:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span>   <span class="token comment" spellcheck="true"># Old: print a new line</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># New</span>

<span class="token keyword">print</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># Old: trailing comma suppresses new line</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># New: end defaults to '\n'</span>

<span class="token keyword">print</span> <span class="token operator">>></span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span> <span class="token string">'error'</span>     <span class="token comment" spellcheck="true"># Old: write to stderr</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># New</span>
</code></pre>
<p><code>print</code> function also provides <code>sep</code> and <code>flush</code> parameters:</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Instead of:</span>
<span class="token keyword">print</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Less-Lists-More-Views"><a href="#Less-Lists-More-Views" class="headerlink" title="Less Lists More Views"></a>Less Lists More Views</h2><p>A lot of well-known methods now return iterators, or ‘views’,  instead of eager-evaluated lists.</p>
<ul>
<li>Dictionary’s <code>keys</code>, <code>items</code>, and <code>values</code> methods, while removing <code>iterkeys</code>, <code>iteritems</code>, and <code>itervalues</code>. For example, when you need a sorted key list:</li>
</ul>
<pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Old</span>
k <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># New</span>
</code></pre>
<ul>
<li><code>map</code>, <code>filter</code>, and <code>zip</code>, while removing <code>imap</code> methods in <code>itertools</code> module. To get a concrete list, use list comprehension or the <code>list</code> global function:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><code>range</code> is now equivalent to <code>xrange</code> in Python 2, the later is removed.</li>
<li>For iterators, the <code>next</code> method is renamed to <code>__next__</code>, and there’s a global <code>next</code> function, which accepts an iterator and calls its <code>__next__</code> method.</li>
</ul>
<pre class=" language-python"><code class="language-python">iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Old</span>
iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># New</span>
next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># New</span>
</code></pre>
<h2 id="Integer-Division-Returns-Float"><a href="#Integer-Division-Returns-Float" class="headerlink" title="Integer Division Returns Float"></a>Integer Division Returns Float</h2><pre><code>print 1 / 2   # Old: prints 0
print 1 / 2.0 # Old: prints 0.5
print(1 / 2)  # New: prints 0.5
print(1 // 2) # New: prints 0
</code></pre><ul>
<li>There’s no difference between <code>long</code> and <code>int</code> now, use <code>int</code> only.</li>
<li>Octal literals are represented as <code>0o755</code>, instead of <code>0755</code>.</li>
</ul>
<h2 id="Comparison-Operators-Raises-TypeError"><a href="#Comparison-Operators-Raises-TypeError" class="headerlink" title="Comparison Operators Raises TypeError"></a>Comparison Operators Raises <code>TypeError</code></h2><ul>
<li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code> can no longer be used between different types.</li>
<li><code>==</code> and <code>!=</code> remains the same.</li>
<li><code>cmp</code> parameter in <code>sort</code> is removed. Use <code>key</code> to extract a comparison key from each element.</li>
</ul>
<h2 id="Set-Literal-Support"><a href="#Set-Literal-Support" class="headerlink" title="Set Literal Support"></a>Set Literal Support</h2><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Old, also valid in Python 3</span>
s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>      <span class="token comment" spellcheck="true"># New</span>
s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># Empty set</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment" spellcheck="true"># Empty dict</span>
</code></pre>
<h2 id="New-String-Formatting"><a href="#New-String-Formatting" class="headerlink" title="New String Formatting"></a>New String Formatting</h2><p>Python 3 introduces a new form of string formatting, and it’s also back-ported to Python 2.x. The old <code>%s</code> formatting is still available in 3.x, but the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" target="_blank" rel="external">new format</a> seems more expressive and powerful.</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># by position</span>
<span class="token string">'{}, {}, {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># a, b, c</span>
<span class="token string">'{2}, {1}, {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># c, b, a</span>

<span class="token comment" spellcheck="true"># by name</span>
<span class="token string">'Hello, {name}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Hello, Jerry</span>

<span class="token comment" spellcheck="true"># by attribute</span>
c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2j</span>
<span class="token string">'real: {0.real}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># real: 1.0</span>

<span class="token comment" spellcheck="true"># by index</span>
<span class="token string">'X: {0[0]}, Y: {0[1]}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X: 1, Y: 2</span>

<span class="token comment" spellcheck="true"># format number</span>
<span class="token string">'{:.2f}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 1.20</span>
<span class="token string">'{:.2%}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">0.012</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1.20%</span>
<span class="token string">'{:,}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1234567</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1,234,567</span>

<span class="token comment" spellcheck="true"># padding</span>
<span class="token string">'{:>05}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 00001</span>
</code></pre>
<p>Furthermore, Python 3.6 introduces literal string interpolation (<a href="https://www.python.org/dev/peps/pep-0498/" target="_blank" rel="external">PEP 498</a>).</p>
<pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Jerry'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Hello, {name}'</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><p>Raise and catch exceptions in a more standard way:</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Old</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
  <span class="token keyword">raise</span> Exception<span class="token punctuation">,</span> <span class="token string">'message'</span>
<span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>
  tb <span class="token operator">=</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># New</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
  <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
  tb <span class="token operator">=</span> e<span class="token punctuation">.</span>__traceback__
</code></pre>
<h2 id="Global-Function-Changes"><a href="#Global-Function-Changes" class="headerlink" title="Global Function Changes"></a>Global Function Changes</h2><p>Some global functions are (re)moved to reduce duplication and language cruft.</p>
<ul>
<li><code>reduce</code> is removed, use <code>functools.reduce</code>, or explict <code>for</code> loop instead.</li>
<li><code>apply</code> is removed, use <code>f(*args)</code> instead of <code>apply(f, args)</code>.</li>
<li><code>execfile</code> is removed, use <code>exec(open(fn).read())</code></li>
<li>Removed backticks, use <code>repr</code> instread.</li>
<li><code>raw_input</code> is renamed to <code>input</code>, and the old <code>input</code> behaviour can be achieved by <code>eval(input())</code></li>
</ul>
<h2 id="Renaming-Modules-and-Relative-Import"><a href="#Renaming-Modules-and-Relative-Import" class="headerlink" title="Renaming Modules and Relative Import"></a>Renaming Modules and Relative Import</h2><ul>
<li>Different URL modules are unified into <code>urllib</code> module, e.g.</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token punctuation">,</span> Request
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode
req <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">'http://shzhangji.com?'</span> <span class="token operator">+</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>Some modules are renamed according to <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="external">PEP 8</a>, such as:<ul>
<li>ConfigParser -&gt; configparser</li>
<li>copy_reg -&gt; copyreg</li>
<li>test.test_support -&gt; test.support</li>
</ul>
</li>
<li>Some modules have both pure Python implementation along with an accelerated version, like StringIO and cStringIO. In Python 3, user should always import the standard module, and fallback would happen automatically.<ul>
<li>StringIO + cStringIO -&gt; io</li>
<li>pickle + cPickle -&gt; pickle</li>
</ul>
</li>
<li>All <code>import</code> forms are interpreted as absolute imports, unless started with <code>.</code>:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> somemod
<span class="token keyword">from</span> <span class="token punctuation">.</span>somemod <span class="token keyword">import</span> moremod
</code></pre>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/3/whatsnew/3.0.html" target="_blank" rel="external">What’s New In Python 3.0</a></li>
<li><a href="http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html" target="_blank" rel="external">Porting Code to Python 3 with 2to3</a></li>
<li><a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html" target="_blank" rel="external">The key differences between Python 2.7.x and Python 3.x with examples</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Few years ago I was programming Python 2.7, when 3.x was still not an option, because of its backward-incompatibiliy and lack of popular third-party libraries support. But now it’s safe to say Python 3 is &lt;a href=&quot;http://py3readiness.org/&quot;&gt;totally ready&lt;/a&gt;, and here’s a list of references for those (including me) who are adopting Python 3 with a 2.x background.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All Strings Are Unicode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt; Becomes a Function&lt;/li&gt;
&lt;li&gt;Less Lists More Views&lt;/li&gt;
&lt;li&gt;Integer Division Returns Float&lt;/li&gt;
&lt;li&gt;Comparison Operators Raises &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set Literal Support&lt;/li&gt;
&lt;li&gt;New String Formatting&lt;/li&gt;
&lt;li&gt;Exception Handling&lt;/li&gt;
&lt;li&gt;Global Function Changes&lt;/li&gt;
&lt;li&gt;Renaming Modules and Relative Import&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;All-Strings-Are-Unicode&quot;&gt;&lt;a href=&quot;#All-Strings-Are-Unicode&quot; class=&quot;headerlink&quot; title=&quot;All Strings Are Unicode&quot;&gt;&lt;/a&gt;All Strings Are Unicode&lt;/h2&gt;&lt;p&gt;When dealing with non-ASCII encodings in Python 2, there’re &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;u&amp;#39;...&amp;#39;&lt;/code&gt;, &lt;code&gt;s.encode()&lt;/code&gt;, etc. In Python 3, there’re only &lt;strong&gt;text&lt;/strong&gt; and &lt;strong&gt;binary data&lt;/strong&gt;. The former is &lt;code&gt;str&lt;/code&gt;, strings that are always represented in Unicode; the later is &lt;code&gt;bytes&lt;/code&gt;, which is just a sequence of byte numbers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conversion between &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;# str to bytes
&amp;#39;str&amp;#39;.encode(&amp;#39;UTF-8&amp;#39;)
bytes(&amp;#39;str&amp;#39;, encoding=&amp;#39;UTF-8&amp;#39;)

# bytes to str
b&amp;#39;bytes&amp;#39;.decode(&amp;#39;UTF-8&amp;#39;)
str(b&amp;#39;bytes&amp;#39;, encoding=&amp;#39;UTF-8&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basestring&lt;/code&gt; is removed, use &lt;code&gt;str&lt;/code&gt; as type: &lt;code&gt;isinstance(s, str)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bytes&lt;/code&gt; is immutable, the corresponding mutable version is &lt;code&gt;bytearray&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The default source file encoding is UTF-8 now.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>View Spark Source in Eclipse</title>
    <link href="http://shzhangji.com/blog/2015/09/01/view-spark-source-in-eclipse/"/>
    <id>http://shzhangji.com/blog/2015/09/01/view-spark-source-in-eclipse/</id>
    <published>2015-09-01T10:38:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reading source code is a great way to learn opensource projects. I used to read Java projects’ source code on <a href="http://grepcode.com/" target="_blank" rel="external">GrepCode</a> for it is online and has very nice cross reference features. As for Scala projects such as <a href="http://spark.apache.org" target="_blank" rel="external">Apache Spark</a>, though its source code can be found on <a href="https://github.com/apache/spark/" target="_blank" rel="external">GitHub</a>, it’s quite necessary to setup an IDE to view the code more efficiently. Here’s a howto of viewing Spark source code in Eclipse.</p>
<h2 id="Install-Eclipse-and-Scala-IDE-Plugin"><a href="#Install-Eclipse-and-Scala-IDE-Plugin" class="headerlink" title="Install Eclipse and Scala IDE Plugin"></a>Install Eclipse and Scala IDE Plugin</h2><p>One can download Eclipse from <a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">here</a>. I recommend the “Eclipse IDE for Java EE Developers”, which contains a lot of daily-used features.</p>
<p><img src="/images/scala-ide.png" alt=""></p>
<p>Then go to Scala IDE’s <a href="http://scala-ide.org/download/current.html" target="_blank" rel="external">official site</a> and install the plugin through update site or zip archive.</p>
<h2 id="Generate-Project-File-with-Maven"><a href="#Generate-Project-File-with-Maven" class="headerlink" title="Generate Project File with Maven"></a>Generate Project File with Maven</h2><p>Spark is mainly built with Maven, so make sure you have Maven installed on your box, and download the latest Spark source code from <a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">here</a>, unarchive it, and execute the following command:</p>
<pre class=" language-bash"><code class="language-bash">$ mvn -am -pl core dependency:resolve eclipse:eclipse
</code></pre>
<a id="more"></a>
<p>This command does a bunch of things. First, it indicates what modules should be built. Spark is a large project with multiple modules. Currently we’re only interested in its core module, so <code>-pl</code> or <code>--projects</code> is used. <code>-am</code> or <code>--also-make</code> tells Maven to build core module’s dependencies as well. We can see the module list in output:</p>
<pre class=" language-text"><code class="language-text">[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] Spark Project Parent POM
[INFO] Spark Launcher Project
[INFO] Spark Project Networking
[INFO] Spark Project Shuffle Streaming Service
[INFO] Spark Project Unsafe
[INFO] Spark Project Core
</code></pre>
<p><code>dependency:resolve</code> tells Maven to download all dependencies. <code>eclipse:eclipse</code> will generate the <code>.project</code> and <code>.classpath</code> files for Eclipse. But the result is not perfect, both files need some fixes.</p>
<p>Edit <code>core/.classpath</code>, change the following two lines:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathentry</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/scala<span class="token punctuation">"</span></span> <span class="token attr-name">including</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**/*.java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathentry</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/test/scala<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target/scala-2.10/test-classes<span class="token punctuation">"</span></span> <span class="token attr-name">including</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**/*.java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<p>to</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathentry</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/main/scala<span class="token punctuation">"</span></span> <span class="token attr-name">including</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**/*.java|**/*.scala<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathentry</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src/test/scala<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target/scala-2.10/test-classes<span class="token punctuation">"</span></span> <span class="token attr-name">including</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**/*.java|**/*.scala<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</code></pre>
<p>Edit <code>core/.project</code>, make it looks like this:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buildSpec</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>buildCommand</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>org.scala-ide.sdt.core.scalabuilder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buildCommand</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>buildSpec</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>natures</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nature</span><span class="token punctuation">></span></span>org.scala-ide.sdt.core.scalanature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nature</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nature</span><span class="token punctuation">></span></span>org.eclipse.jdt.core.javanature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nature</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>natures</span><span class="token punctuation">></span></span>
</code></pre>
<p>Now you can import “Existing Projects into Workspace”, including <code>core</code>, <code>launcher</code>, <code>network</code>, and <code>unsafe</code>.</p>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="Access-restriction-The-type-‘Unsafe’-is-not-API"><a href="#Access-restriction-The-type-‘Unsafe’-is-not-API" class="headerlink" title="Access restriction: The type ‘Unsafe’ is not API"></a>Access restriction: The type ‘Unsafe’ is not API</h3><p>For module <code>spark-unsafe</code>, Eclipse will report an error “Access restriction: The type ‘Unsafe’ is not API (restriction on required library /path/to/jre/lib/rt.jar”. To fix this, right click the “JRE System Library” entry in Package Explorer, change it to “Workspace default JRE”.</p>
<h3 id="Download-Sources-and-Javadocs"><a href="#Download-Sources-and-Javadocs" class="headerlink" title="Download Sources and Javadocs"></a>Download Sources and Javadocs</h3><p>Add the following entry into pom’s project / build / plugins:</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-eclipse-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>downloadSources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>downloadSources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>downloadJavadocs</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>downloadJavadocs</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="build-helper-maven-plugin"><a href="#build-helper-maven-plugin" class="headerlink" title="build-helper-maven-plugin"></a>build-helper-maven-plugin</h3><p>Since Spark is a mixture of Java and Scala code, and the maven-eclipse-plugin only knows about Java source files, so we need to use build-helper-maven-plugin to include the Scala sources, as is described <a href="http://docs.scala-lang.org/tutorials/scala-with-maven.html#integration-with-eclipse-scala-ide24" target="_blank" rel="external">here</a>. Fortunately, Spark’s pom.xml has already included this setting.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://docs.scala-lang.org/tutorials/scala-with-maven.html" target="_blank" rel="external">http://docs.scala-lang.org/tutorials/scala-with-maven.html</a></li>
<li><a href="https://wiki.scala-lang.org/display/SIW/ScalaEclipseMaven" target="_blank" rel="external">https://wiki.scala-lang.org/display/SIW/ScalaEclipseMaven</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/SPARK/Useful+Developer+Tools" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/SPARK/Useful+Developer+Tools</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reading source code is a great way to learn opensource projects. I used to read Java projects’ source code on &lt;a href=&quot;http://grepcode.com/&quot;&gt;GrepCode&lt;/a&gt; for it is online and has very nice cross reference features. As for Scala projects such as &lt;a href=&quot;http://spark.apache.org&quot;&gt;Apache Spark&lt;/a&gt;, though its source code can be found on &lt;a href=&quot;https://github.com/apache/spark/&quot;&gt;GitHub&lt;/a&gt;, it’s quite necessary to setup an IDE to view the code more efficiently. Here’s a howto of viewing Spark source code in Eclipse.&lt;/p&gt;
&lt;h2 id=&quot;Install-Eclipse-and-Scala-IDE-Plugin&quot;&gt;&lt;a href=&quot;#Install-Eclipse-and-Scala-IDE-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Install Eclipse and Scala IDE Plugin&quot;&gt;&lt;/a&gt;Install Eclipse and Scala IDE Plugin&lt;/h2&gt;&lt;p&gt;One can download Eclipse from &lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;here&lt;/a&gt;. I recommend the “Eclipse IDE for Java EE Developers”, which contains a lot of daily-used features.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/scala-ide.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then go to Scala IDE’s &lt;a href=&quot;http://scala-ide.org/download/current.html&quot;&gt;official site&lt;/a&gt; and install the plugin through update site or zip archive.&lt;/p&gt;
&lt;h2 id=&quot;Generate-Project-File-with-Maven&quot;&gt;&lt;a href=&quot;#Generate-Project-File-with-Maven&quot; class=&quot;headerlink&quot; title=&quot;Generate Project File with Maven&quot;&gt;&lt;/a&gt;Generate Project File with Maven&lt;/h2&gt;&lt;p&gt;Spark is mainly built with Maven, so make sure you have Maven installed on your box, and download the latest Spark source code from &lt;a href=&quot;http://spark.apache.org/downloads.html&quot;&gt;here&lt;/a&gt;, unarchive it, and execute the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ mvn -am -pl core dependency:resolve eclipse:eclipse
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="spark" scheme="http://shzhangji.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming Logging Configuration</title>
    <link href="http://shzhangji.com/blog/2015/05/31/spark-streaming-logging-configuration/"/>
    <id>http://shzhangji.com/blog/2015/05/31/spark-streaming-logging-configuration/</id>
    <published>2015-05-31T10:18:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark Streaming applications tend to run forever, so their log files should be properly handled, to avoid exploding server hard drives. This article will give some practical advices of dealing with these log files, on both Spark on YARN and standalone mode.</p>
<h2 id="Log4j’s-RollingFileAppender"><a href="#Log4j’s-RollingFileAppender" class="headerlink" title="Log4j’s RollingFileAppender"></a>Log4j’s RollingFileAppender</h2><p>Spark uses log4j as logging facility. The default configuraiton is to write all logs into standard error, which is fine for batch jobs. But for streaming jobs, we’d better use rolling-file appender, to cut log files by size and keep only several recent files. Here’s an example:</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, rolling</span>

<span class="token attr-name">log4j.appender.rolling</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.RollingFileAppender</span>
<span class="token attr-name">log4j.appender.rolling.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.rolling.layout.conversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%d] %p %m (%c)%n</span>
<span class="token attr-name">log4j.appender.rolling.maxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">50MB</span>
<span class="token attr-name">log4j.appender.rolling.maxBackupIndex</span><span class="token punctuation">=</span><span class="token attr-value">5</span>
<span class="token attr-name">log4j.appender.rolling.file</span><span class="token punctuation">=</span><span class="token attr-value">/var/log/spark/${dm.logging.name}.log</span>
<span class="token attr-name">log4j.appender.rolling.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>

<span class="token attr-name">log4j.logger.org.apache.spark</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span>
<span class="token attr-name">log4j.logger.org.eclipse.jetty</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span>

<span class="token attr-name">log4j.logger.com.anjuke.dm</span><span class="token punctuation">=</span><span class="token attr-value">${dm.logging.level}</span>
</code></pre>
<p>This means log4j will roll the log file by 50MB and keep only 5 recent files. These files are saved in <code>/var/log/spark</code> directory, with filename picked from system property <code>dm.logging.name</code>. We also set the logging level of our package <code>com.anjuke.dm</code> according to <code>dm.logging.level</code> property. Another thing to mention is that we set <code>org.apache.spark</code> to level <code>WARN</code>, so as to ignore verbose logs from spark.</p>
<a id="more"></a>
<h2 id="Standalone-Mode"><a href="#Standalone-Mode" class="headerlink" title="Standalone Mode"></a>Standalone Mode</h2><p>In standalone mode, Spark Streaming driver is running on the machine where you submit the job, and each Spark worker node will run an executor for this job. So you need to setup log4j for both driver and executor.</p>
<p>For driver, since it’s a long-running application, we tend to use some process management tools like <a href="http://supervisord.org/" target="_blank" rel="external">supervisor</a> to monitor it. And supervisor itself provides the facility of rolling log files, so we can safely write all logs into standard output when setting up driver’s log4j.</p>
<p>For executor, there’re two approaches. One is using <code>spark.executor.logs.rolling.strategy</code> provided by Spark 1.1 and above. It has both time-based and size-based rolling methods. These log files are stored in Spark’s work directory. You can find more details in the <a href="https://spark.apache.org/docs/1.1.0/configuration.html" target="_blank" rel="external">documentation</a>.</p>
<p>The other approach is to setup log4j manually, when you’re using a legacy version, or want to gain more control on the logging process. Here are the steps:</p>
<ol>
<li>Make sure the logging directory exists on all worker nodes. You can use some provisioning tools like <a href="https://github.com/ansible/ansible" target="_blank" rel="external">ansbile</a> to create them.</li>
<li>Create driver’s and executor’s log4j configuration files, and distribute the executor’s to all worker nodes.</li>
<li>Use the above two files in <code>spark-submit</code> command:</li>
</ol>
<pre><code>spark-submit
  --master spark://127.0.0.1:7077
  --driver-java-options &quot;-Dlog4j.configuration=file:/path/to/log4j-driver.properties -Ddm.logging.level=DEBUG&quot;
  --conf &quot;spark.executor.extraJavaOptions=-Dlog4j.configuration=file:/path/to/log4j-executor.properties -Ddm.logging.name=myapp -Ddm.logging.level=DEBUG&quot;
  ...
</code></pre><h2 id="Spark-on-YARN"><a href="#Spark-on-YARN" class="headerlink" title="Spark on YARN"></a>Spark on YARN</h2><p><a href="http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/index.html" target="_blank" rel="external">YARN</a> is a <strong>resource manager</strong> introduced by Hadoop2. Now we can run differenct computational frameworks on the same cluster, like MapReduce, Spark, Storm, etc. The basic unit of YARN is called container, which represents a certain amount of resource (currently memory and virtual CPU cores). Every container has its working directory, and all related files such as application command (jars) and log files are stored in this directory.</p>
<p>When running Spark on YARN, there is a system property <code>spark.yarn.app.container.log.dir</code> indicating the container’s log directory. We only need to replace one line of the above log4j config:</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log4j.appender.rolling.file</span><span class="token punctuation">=</span><span class="token attr-value">${spark.yarn.app.container.log.dir}/spark.log</span>
</code></pre>
<p>And these log files can be viewed on YARN’s web UI:</p>
<p><img src="/images/spark/yarn-logs.png" alt=""></p>
<p>The <code>spark-submit</code> command is as following:</p>
<pre><code>spark-submit
  --master yarn-cluster
  --files /path/to/log4j-spark.properties
  --conf &quot;spark.driver.extraJavaOptions=-Dlog4j.configuration=log4j-spark.properties&quot;
  --conf &quot;spark.executor.extraJavaOptions=-Dlog4j.configuration=log4j-spark.properties&quot;
  ...
</code></pre><p>As you can see, both driver and executor use the same configuration file. That is because in <code>yarn-cluster</code> mode, driver is also run as a container in YARN. In fact, the <code>spark-submit</code> command will just quit after job submission.</p>
<p>If YARN’s <a href="http://zh.hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/" target="_blank" rel="external">log aggregation</a> is enabled, application logs will be saved in HDFS after the job is done. One can use <code>yarn logs</code> command to view the files or browse directly into HDFS directory indicated by <code>yarn.nodemanager.log-dirs</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark Streaming applications tend to run forever, so their log files should be properly handled, to avoid exploding server hard drives. This article will give some practical advices of dealing with these log files, on both Spark on YARN and standalone mode.&lt;/p&gt;
&lt;h2 id=&quot;Log4j’s-RollingFileAppender&quot;&gt;&lt;a href=&quot;#Log4j’s-RollingFileAppender&quot; class=&quot;headerlink&quot; title=&quot;Log4j’s RollingFileAppender&quot;&gt;&lt;/a&gt;Log4j’s RollingFileAppender&lt;/h2&gt;&lt;p&gt;Spark uses log4j as logging facility. The default configuraiton is to write all logs into standard error, which is fine for batch jobs. But for streaming jobs, we’d better use rolling-file appender, to cut log files by size and keep only several recent files. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;properties&quot;&gt;log4j.rootLogger=INFO, rolling

log4j.appender.rolling=org.apache.log4j.RollingFileAppender
log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling.layout.conversionPattern=[%d] %p %m (%c)%n
log4j.appender.rolling.maxFileSize=50MB
log4j.appender.rolling.maxBackupIndex=5
log4j.appender.rolling.file=/var/log/spark/${dm.logging.name}.log
log4j.appender.rolling.encoding=UTF-8

log4j.logger.org.apache.spark=WARN
log4j.logger.org.eclipse.jetty=WARN

log4j.logger.com.anjuke.dm=${dm.logging.level}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means log4j will roll the log file by 50MB and keep only 5 recent files. These files are saved in &lt;code&gt;/var/log/spark&lt;/code&gt; directory, with filename picked from system property &lt;code&gt;dm.logging.name&lt;/code&gt;. We also set the logging level of our package &lt;code&gt;com.anjuke.dm&lt;/code&gt; according to &lt;code&gt;dm.logging.level&lt;/code&gt; property. Another thing to mention is that we set &lt;code&gt;org.apache.spark&lt;/code&gt; to level &lt;code&gt;WARN&lt;/code&gt;, so as to ignore verbose logs from spark.&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="spark" scheme="http://shzhangji.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Performance Tips</title>
    <link href="http://shzhangji.com/blog/2015/04/28/elasticsearch-performance-tips/"/>
    <id>http://shzhangji.com/blog/2015/04/28/elasticsearch-performance-tips/</id>
    <published>2015-04-28T15:08:00.000Z</published>
    <updated>2017-03-24T02:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently we’re using ElasticSearch as a data backend of our recommendation API, to serve both offline and online computed data to users. Thanks to ElasticSearch’s rich and out-of-the-box functionality, it doesn’t take much trouble to setup the cluster. However, we still encounter some misuse and unwise configurations. So here’s a list of ElasticSearch performance tips that we learned from practice.</p>
<h2 id="Tip-1-Set-Num-of-shards-to-Num-of-nodes"><a href="#Tip-1-Set-Num-of-shards-to-Num-of-nodes" class="headerlink" title="Tip 1 Set Num-of-shards to Num-of-nodes"></a>Tip 1 Set Num-of-shards to Num-of-nodes</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard" target="_blank" rel="external">Shard</a> is the foundation of ElasticSearch’s distribution capability. Every index is splitted into several shards (default 5) and are distributed across cluster nodes. But this capability does not come free. Since data being queried reside in all shards (this behaviour can be changed by <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-routing" target="_blank" rel="external">routing</a>), ElasticSearch has to run this query on every shard, fetch the result, and merge them, like a map-reduce process. So if there’re too many shards, more than the number of cluter nodes, the query will be executed more than once on the same node, and it’ll also impact the merge phase. On the other hand, too few shards will also reduce the performance, for not all nodes are being utilized.</p>
<p>Shards have two roles, primary shard and replica shard. Replica shard serves as a backup to the primary shard. When primary goes down, the replica takes its job. It also helps improving the search and get performance, for these requests can be executed on either primary or replica shard.</p>
<p>Shards can be visualized by <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard" target="_blank" rel="external">elasticsearch-head</a> plugin:</p>
<p><img src="/images/elasticsearch/shards-head.png" alt=""></p>
<p>The <code>cu_docs</code> index has two shards <code>0</code> and <code>1</code>, with <code>number_of_replicas</code> set to 1. Primary shard <code>0</code> (bold bordered) resides in server <code>Leon</code>, and its replica in <code>Pris</code>. They are green becuase all primary shards have enough repicas sitting in different servers, so the cluster is healthy.</p>
<p>Since <code>number_of_shards</code> of an index cannot be changed after creation (while <code>number_of_replicas</code> can), one should choose this config wisely. Here are some suggestions:</p>
<ol>
<li>How many nodes do you have, now and future? If you’re sure you’ll only have 3 nodes, set number of shards to 2 and replicas to 1, so there’ll be 4 shards across 3 nodes. If you’ll add some servers in the future, you can set number of shards to 3, so when the cluster grows to 5 nodes, there’ll be 6 distributed shards.</li>
<li>How big is your index? If it’s small, one shard with one replica will due.</li>
<li>How is the read and write frequency, respectively? If it’s search heavy, setup more relicas.</li>
</ol>
<a id="more"></a>
<h2 id="Tip-2-Tuning-Memory-Usage"><a href="#Tip-2-Tuning-Memory-Usage" class="headerlink" title="Tip 2 Tuning Memory Usage"></a>Tip 2 Tuning Memory Usage</h2><p>ElasticSearch and its backend <a href="http://lucene.apache.org/" target="_blank" rel="external">Lucene</a> are both Java application. There’re various memory tuning settings related to heap and native memory.</p>
<h3 id="Set-Max-Heap-Size-to-Half-of-Total-Memory"><a href="#Set-Max-Heap-Size-to-Half-of-Total-Memory" class="headerlink" title="Set Max Heap Size to Half of Total Memory"></a>Set Max Heap Size to Half of Total Memory</h3><p>Generally speaking, more heap memory leads to better performance. But in ElasticSearch’s case, Lucene also requires a lot of native memory (or off-heap memory), to store index segments and provide fast search performance. But it does not load the files by itself. Instead, it relies on the operating system to cache the segement files in memory.</p>
<p>Say we have 16G memory and set -Xmx to 8G, it doesn’t mean the remaining 8G is wasted. Except for the memory OS preserves for itself, it will cache the frequently accessed disk files in memory automatically, which results in a huge performance gain.</p>
<p>Do not set heap size over 32G though, even you have more than 64G memory. The reason is described in <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html#compressed_oops" target="_blank" rel="external">this link</a>.</p>
<p>Also, you should probably set -Xms to 8G as well, to avoid the overhead of heap memory growth.</p>
<h3 id="Disable-Swapping"><a href="#Disable-Swapping" class="headerlink" title="Disable Swapping"></a>Disable Swapping</h3><p>Swapping is a way to move unused program code and data to disk so as to provide more space for running applications and file caching. It also provides a buffer for the system to recover from memory exhaustion. But for critical application like ElasticSearch, being swapped is definitely a performance killer.</p>
<p>There’re several ways to disable swapping, and our choice is setting <code>bootstrap.mlockall</code> to true. This tells ElasticSearch to lock its memory space in RAM so that OS will not swap it out. One can confirm this setting via <code>http://localhost:9200/_nodes/process?pretty</code>.</p>
<p>If ElasticSearch is not started as root (and it probably shouldn’t), this setting may not take effect. For Ubuntu server, one needs to add <code>&lt;user&gt; hard memlock unlimited</code> to <code>/etc/security/limits.conf</code>, and run <code>ulimit -l unlimited</code> before starting ElasticSearch process.</p>
<h3 id="Increase-mmap-Counts"><a href="#Increase-mmap-Counts" class="headerlink" title="Increase mmap Counts"></a>Increase <code>mmap</code> Counts</h3><p>ElasticSearch uses memory mapped files, and the default <code>mmap</code> counts is low. Add <code>vm.max_map_count=262144</code> to <code>/etc/sysctl.conf</code>, run <code>sysctl -p /etc/sysctl.conf</code> as root, and then restart ElasticSearch.</p>
<h2 id="Tip-3-Setup-a-Cluster-with-Unicast"><a href="#Tip-3-Setup-a-Cluster-with-Unicast" class="headerlink" title="Tip 3 Setup a Cluster with Unicast"></a>Tip 3 Setup a Cluster with Unicast</h2><p>ElasticSearch has two options to form a cluster, multicast and unicast. The former is suitable when you have a large group of servers and a well configured network. But we found unicast more concise and less error-prone.</p>
<p>Here’s an example of using unicast:</p>
<pre><code>node.name: &quot;NODE-1&quot;
discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: [&quot;node-1.example.com&quot;, &quot;node-2.example.com&quot;, &quot;node-3.example.com&quot;]
discovery.zen.minimum_master_nodes: 2
</code></pre><p>The <code>discovery.zen.minimum_master_nodes</code> setting is a way to prevent split-brain symptom, i.e. more than one node thinks itself the master of the cluster. And for this setting to work, you should have an odd number of nodes, and set this config to <code>ceil(num_of_nodes / 2)</code>. In the above cluster, you can lose at most one node. It’s much like a quorum in <a href="http://zookeeper.apache.org" target="_blank" rel="external">Zookeeper</a>.</p>
<h2 id="Tip-4-Disable-Unnecessary-Features"><a href="#Tip-4-Disable-Unnecessary-Features" class="headerlink" title="Tip 4 Disable Unnecessary Features"></a>Tip 4 Disable Unnecessary Features</h2><p>ElasticSearch is a full-featured search engine, but you should always tailor it to your own needs. Here’s a brief list:</p>
<ul>
<li>Use corrent index type. There’re <code>index</code>, <code>not_analyzed</code>, and <code>no</code>. If you don’t need to search the field, set it to <code>no</code>; if you only search for full match, use <code>not_analyzed</code>.</li>
<li>For search-only fields, set <code>store</code> to false.</li>
<li>Disable <code>_all</code> field, if you always know which field to search.</li>
<li>Disable <code>_source</code> fields, if documents are big and you don’t need the update capability.</li>
<li>If you have a document key, set this field in <code>_id</code> - <code>path</code>, instead of index the field twice.</li>
<li>Set <code>index.refresh_interval</code> to a larger number (default 1s), if you don’t need near-realtime search. It’s also an important option in bulk-load operation described below.</li>
</ul>
<h2 id="Tip-5-Use-Bulk-Operations"><a href="#Tip-5-Use-Bulk-Operations" class="headerlink" title="Tip 5 Use Bulk Operations"></a>Tip 5 Use Bulk Operations</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/bulk.html" target="_blank" rel="external">Bulk is cheaper</a></p>
<ul>
<li>Bulk Read<ul>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html" target="_blank" rel="external">Multi Get</a> to retrieve multiple documents by a list of ids.</li>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html" target="_blank" rel="external">Scroll</a> to search a large number of documents.</li>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/1.4/msearch.html" target="_blank" rel="external">MultiSearch api</a> to run search requests in parallel.</li>
</ul>
</li>
<li>Bulk Write<ul>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/1.4/bulk.html" target="_blank" rel="external">Bulk API</a> to index, update, delete multiple documents.</li>
<li>Alter <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html" target="_blank" rel="external">index aliases</a> simultaneously.</li>
</ul>
</li>
<li>Bulk Load: when initially building a large index, do the following,<ul>
<li>Set <code>number_of_relicas</code> to 0, so no relicas will be created;</li>
<li>Set <code>index.refresh_interval</code> to -1, disabling nrt search;</li>
<li>Bulk build the documents;</li>
<li>Call <code>optimize</code> on the index, so newly built docs are available for search;</li>
<li>Reset replicas and refresh interval, let ES cluster recover to green.</li>
</ul>
</li>
</ul>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><ul>
<li>File descriptors: system default is too small for ES, set it to 64K will be OK. If <code>ulimit -n 64000</code> does not work, you need to add <code>&lt;user&gt; hard nofile 64000</code> to <code>/etc/security/limits.conf</code>, just like the <code>memlock</code> setting mentioned above.</li>
<li>When using ES client library, it will create a lot of worker threads according to the number of processors. Sometimes it’s not necessary. This behaviour can be changed by setting <code>processors</code> to a lower value like 2:</li>
</ul>
<pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> settings <span class="token operator">=</span> ImmutableSettings<span class="token punctuation">.</span>settingsBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"processors"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> uri <span class="token operator">=</span> ElasticsearchClientUri<span class="token punctuation">(</span><span class="token string">"elasticsearch://127.0.0.1:9300"</span><span class="token punctuation">)</span>
ElasticClient<span class="token punctuation">.</span>remote<span class="token punctuation">(</span>settings<span class="token punctuation">,</span> uri<span class="token punctuation">)</span>
</code></pre>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li>
<li><a href="http://cpratt.co/how-many-shards-should-elasticsearch-indexes-have/" target="_blank" rel="external">http://cpratt.co/how-many-shards-should-elasticsearch-indexes-have/</a></li>
<li><a href="https://www.elastic.co/blog/performance-considerations-elasticsearch-indexing" target="_blank" rel="external">https://www.elastic.co/blog/performance-considerations-elasticsearch-indexing</a></li>
<li><a href="https://www.loggly.com/blog/nine-tips-configuring-elasticsearch-for-high-performance/" target="_blank" rel="external">https://www.loggly.com/blog/nine-tips-configuring-elasticsearch-for-high-performance/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently we’re using ElasticSearch as a data backend of our recommendation API, to serve both offline and online computed data to users. Thanks to ElasticSearch’s rich and out-of-the-box functionality, it doesn’t take much trouble to setup the cluster. However, we still encounter some misuse and unwise configurations. So here’s a list of ElasticSearch performance tips that we learned from practice.&lt;/p&gt;
&lt;h2 id=&quot;Tip-1-Set-Num-of-shards-to-Num-of-nodes&quot;&gt;&lt;a href=&quot;#Tip-1-Set-Num-of-shards-to-Num-of-nodes&quot; class=&quot;headerlink&quot; title=&quot;Tip 1 Set Num-of-shards to Num-of-nodes&quot;&gt;&lt;/a&gt;Tip 1 Set Num-of-shards to Num-of-nodes&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard&quot;&gt;Shard&lt;/a&gt; is the foundation of ElasticSearch’s distribution capability. Every index is splitted into several shards (default 5) and are distributed across cluster nodes. But this capability does not come free. Since data being queried reside in all shards (this behaviour can be changed by &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-routing&quot;&gt;routing&lt;/a&gt;), ElasticSearch has to run this query on every shard, fetch the result, and merge them, like a map-reduce process. So if there’re too many shards, more than the number of cluter nodes, the query will be executed more than once on the same node, and it’ll also impact the merge phase. On the other hand, too few shards will also reduce the performance, for not all nodes are being utilized.&lt;/p&gt;
&lt;p&gt;Shards have two roles, primary shard and replica shard. Replica shard serves as a backup to the primary shard. When primary goes down, the replica takes its job. It also helps improving the search and get performance, for these requests can be executed on either primary or replica shard.&lt;/p&gt;
&lt;p&gt;Shards can be visualized by &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard&quot;&gt;elasticsearch-head&lt;/a&gt; plugin:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/elasticsearch/shards-head.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cu_docs&lt;/code&gt; index has two shards &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, with &lt;code&gt;number_of_replicas&lt;/code&gt; set to 1. Primary shard &lt;code&gt;0&lt;/code&gt; (bold bordered) resides in server &lt;code&gt;Leon&lt;/code&gt;, and its replica in &lt;code&gt;Pris&lt;/code&gt;. They are green becuase all primary shards have enough repicas sitting in different servers, so the cluster is healthy.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;number_of_shards&lt;/code&gt; of an index cannot be changed after creation (while &lt;code&gt;number_of_replicas&lt;/code&gt; can), one should choose this config wisely. Here are some suggestions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many nodes do you have, now and future? If you’re sure you’ll only have 3 nodes, set number of shards to 2 and replicas to 1, so there’ll be 4 shards across 3 nodes. If you’ll add some servers in the future, you can set number of shards to 3, so when the cluster grows to 5 nodes, there’ll be 6 distributed shards.&lt;/li&gt;
&lt;li&gt;How big is your index? If it’s small, one shard with one replica will due.&lt;/li&gt;
&lt;li&gt;How is the read and write frequency, respectively? If it’s search heavy, setup more relicas.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="elasticsearch" scheme="http://shzhangji.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Use WebJars in Scalatra Project</title>
    <link href="http://shzhangji.com/blog/2014/05/27/use-webjars-in-scalatra-project/"/>
    <id>http://shzhangji.com/blog/2014/05/27/use-webjars-in-scalatra-project/</id>
    <published>2014-05-27T09:44:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>As I’m working with my first <a href="http://www.scalatra.org/" target="_blank" rel="external">Scalatra</a> project, I automatically think of using <a href="http://www.webjars.org/" target="_blank" rel="external">WebJars</a> to manage Javascript library dependencies, since it’s more convenient and seems like a good practice. Though there’s no <a href="http://www.webjars.org/documentation" target="_blank" rel="external">official support</a> for Scalatra framework, the installation process is not very complex. But this doesn’t mean I didn’t spend much time on this. I’m still a newbie to Scala, and there’s only a few materials on this subject.</p>
<h2 id="Add-WebJars-Dependency-in-SBT-Build-File"><a href="#Add-WebJars-Dependency-in-SBT-Build-File" class="headerlink" title="Add WebJars Dependency in SBT Build File"></a>Add WebJars Dependency in SBT Build File</h2><p>Scalatra uses <code>.scala</code> configuration file instead of <code>.sbt</code>, so let’s add dependency into <code>project/build.scala</code>. Take <a href="http://dojotoolkit.org/" target="_blank" rel="external">Dojo</a> for example.</p>
<pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> DwExplorerBuild <span class="token keyword">extends</span> Build <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">lazy</span> <span class="token keyword">val</span> project <span class="token operator">=</span> Project <span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    settings <span class="token operator">=</span> Defaults<span class="token punctuation">.</span>defaultSettings <span class="token operator">++</span> ScalatraPlugin<span class="token punctuation">.</span>scalatraWithJRebel <span class="token operator">++</span> scalateSettings <span class="token operator">++</span> Seq<span class="token punctuation">(</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      libraryDependencies <span class="token operator">++</span><span class="token operator">=</span> Seq<span class="token punctuation">(</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token string">"org.webjars"</span> <span class="token operator">%</span> <span class="token string">"dojo"</span> <span class="token operator">%</span> <span class="token string">"1.9.3"</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To view this dependency in Eclipse, you need to run <code>sbt eclipse</code> again. In the <em>Referenced Libraries</em> section, you can see a <code>dojo-1.9.3.jar</code>, and the library lies in <code>META-INF/resources/webjars/</code>.</p>
<a id="more"></a>
<h2 id="Add-a-Route-for-WebJars-Resources"><a href="#Add-a-Route-for-WebJars-Resources" class="headerlink" title="Add a Route for WebJars Resources"></a>Add a Route for WebJars Resources</h2><p>Find the <code>ProjectNameStack.scala</code> file and add the following lines at the bottom of the trait:</p>
<pre class=" language-scala"><code class="language-scala"><span class="token keyword">trait</span> ProjectNameStack <span class="token keyword">extends</span> ScalatraServlet <span class="token keyword">with</span> ScalateSupport <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  get<span class="token punctuation">(</span><span class="token string">"/webjars/*"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> resourcePath <span class="token operator">=</span> <span class="token string">"/META-INF/resources/webjars/"</span> <span class="token operator">+</span> params<span class="token punctuation">(</span><span class="token string">"splat"</span><span class="token punctuation">)</span>
    Option<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getResourceAsStream<span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> Some<span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span>
        contentType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span>getMimeType<span class="token punctuation">(</span>resourcePath<span class="token punctuation">)</span>
        IOUtil<span class="token punctuation">.</span>loadBytes<span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">case</span> None <span class="token keyword">=></span> resourceNotFound<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>That’s it!</strong> Now you can refer to the WebJars resources in views, like this:</p>
<pre class=" language-ssp"><code class="language-ssp">#set (title)
Hello, Dojo!
#end

<div id="greeting"></div>

<script type="text/javascript" src="${uri("/webjars/dojo/1.9.3/dojo/dojo.js")}" data-dojo-config="async: true"></script>
<script type="text/javascript">
require([
    'dojo/dom',
    'dojo/dom-construct'
], function (dom, domConstruct) {
    var greetingNode = dom.byId('greeting');
    domConstruct.place('<i>Dojo!</i>', greetingNode);
});
</script>
</code></pre>
<h3 id="Some-Explanations-on-This-Route"><a href="#Some-Explanations-on-This-Route" class="headerlink" title="Some Explanations on This Route"></a>Some Explanations on This Route</h3><ul>
<li><code>/webjars/*</code> is a <a href="http://www.scalatra.org/2.2/guides/http/routes.html#toc_233" target="_blank" rel="external">Wildcards</a> and <code>params(&quot;splat&quot;)</code> is to extract the asterisk part.</li>
<li><code>resourcePath</code> points to the WebJars resources in the jar file, as we saw in Eclipse. It is then fetched as an <code>InputStream</code> with <code>getResourceAsStream()</code>.</li>
<li><code>servletContext.getMimeType()</code> is a handy method to determine the content type of the requested resource, instead of parsing it by ourselves. I find this in SpringMVC’s <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-webmvc/3.2.7.RELEASE/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#ResourceHttpRequestHandler.handleRequest%28javax.servlet.http.HttpServletRequest%2Cjavax.servlet.http.HttpServletResponse%29" target="_blank" rel="external">ResourceHttpRequestHandler</a>.</li>
<li><code>IOUtil</code> is a utiliy class that comes with <a href="http://scalate.fusesource.org/" target="_blank" rel="external">Scalate</a>, so don’t forget to import it first.</li>
</ul>
<p>At first I tried to figure out whether Scalatra provides a conveniet way to serve static files in classpath, I failed. So I decided to serve them by my own, and <a href="https://gist.github.com/laurilehmijoki/4483113" target="_blank" rel="external">this gist</a> was very helpful.</p>
<p>Anyway, I’ve spent more than half a day to solve this problem, and it turned out to be a very challenging yet interesting way to learn a new language, new framework, and new tools. Keep moving!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As I’m working with my first &lt;a href=&quot;http://www.scalatra.org/&quot;&gt;Scalatra&lt;/a&gt; project, I automatically think of using &lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt; to manage Javascript library dependencies, since it’s more convenient and seems like a good practice. Though there’s no &lt;a href=&quot;http://www.webjars.org/documentation&quot;&gt;official support&lt;/a&gt; for Scalatra framework, the installation process is not very complex. But this doesn’t mean I didn’t spend much time on this. I’m still a newbie to Scala, and there’s only a few materials on this subject.&lt;/p&gt;
&lt;h2 id=&quot;Add-WebJars-Dependency-in-SBT-Build-File&quot;&gt;&lt;a href=&quot;#Add-WebJars-Dependency-in-SBT-Build-File&quot; class=&quot;headerlink&quot; title=&quot;Add WebJars Dependency in SBT Build File&quot;&gt;&lt;/a&gt;Add WebJars Dependency in SBT Build File&lt;/h2&gt;&lt;p&gt;Scalatra uses &lt;code&gt;.scala&lt;/code&gt; configuration file instead of &lt;code&gt;.sbt&lt;/code&gt;, so let’s add dependency into &lt;code&gt;project/build.scala&lt;/code&gt;. Take &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; for example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;object DwExplorerBuild extends Build {
  ...
  lazy val project = Project (
    ...
    settings = Defaults.defaultSettings ++ ScalatraPlugin.scalatraWithJRebel ++ scalateSettings ++ Seq(
      ...
      libraryDependencies ++= Seq(
        ...
        &amp;quot;org.webjars&amp;quot; % &amp;quot;dojo&amp;quot; % &amp;quot;1.9.3&amp;quot;
      ),
      ...
    )
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view this dependency in Eclipse, you need to run &lt;code&gt;sbt eclipse&lt;/code&gt; again. In the &lt;em&gt;Referenced Libraries&lt;/em&gt; section, you can see a &lt;code&gt;dojo-1.9.3.jar&lt;/code&gt;, and the library lies in &lt;code&gt;META-INF/resources/webjars/&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="scala" scheme="http://shzhangji.com/tags/scala/"/>
    
      <category term="scalatra" scheme="http://shzhangji.com/tags/scalatra/"/>
    
      <category term="webjars" scheme="http://shzhangji.com/tags/webjars/"/>
    
  </entry>
  
  <entry>
    <title>Generate Auto-increment Id in Map-reduce Job</title>
    <link href="http://shzhangji.com/blog/2013/10/31/generate-auto-increment-id-in-map-reduce-job/"/>
    <id>http://shzhangji.com/blog/2013/10/31/generate-auto-increment-id-in-map-reduce-job/</id>
    <published>2013-10-31T01:35:00.000Z</published>
    <updated>2017-07-15T10:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>In DBMS world, it’s easy to generate a unique, auto-increment id, using MySQL’s <a href="http://dev.mysql.com/doc/refman/5.1/en/example-auto-increment.html" target="_blank" rel="external">AUTO_INCREMENT attribute</a> on a primary key or MongoDB’s <a href="http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/" target="_blank" rel="external">Counters Collection</a> pattern. But when it comes to a distributed, parallel processing framework, like Hadoop Map-reduce, it is not that straight forward. The best solution to identify every record in such framework is to use UUID. But when an integer id is required, it’ll take some steps.</p>
<h2 id="Solution-A-Single-Reducer"><a href="#Solution-A-Single-Reducer" class="headerlink" title="Solution A: Single Reducer"></a>Solution A: Single Reducer</h2><p>This is the most obvious and simple one, just use the following code to specify reducer numbers to 1:</p>
<pre class=" language-java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>And also obvious, there are several demerits:</p>
<ol>
<li>All mappers output will be copied to one task tracker.</li>
<li>Only one process is working on shuffel &amp; sort.</li>
<li>When producing output, there’s also only one process.</li>
</ol>
<p>The above is not a problem for small data sets, or at least small mapper outputs. And it is also the approach that Pig and Hive use when they need to perform a total sort. But when hitting a certain threshold, the sort and copy phase will become very slow and unacceptable.</p>
<a id="more"></a>
<h2 id="Solution-B-Increment-by-Number-of-Tasks"><a href="#Solution-B-Increment-by-Number-of-Tasks" class="headerlink" title="Solution B: Increment by Number of Tasks"></a>Solution B: Increment by Number of Tasks</h2><p>Inspired by a <a href="http://mail-archives.apache.org/mod_mbox/hadoop-common-user/200904.mbox/%3C49E13557.7090504@domaintools.com%3E" target="_blank" rel="external">mailing list</a> that is quite hard to find, which is inspired by MySQL master-master setup (with auto_increment_increment and auto_increment_offset), there’s a brilliant way to generate a globally unique integer id across mappers or reducers. Let’s take mapper for example:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JobMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> LongWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> increment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>
            InterruptedException <span class="token punctuation">{</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        id <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getTaskAttemptID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTaskID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        increment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"mapred.map.tasks"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>increment <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"mapred.map.tasks is zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>LongWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        id <span class="token operator">+=</span> increment<span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d, %s"</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>The basic idea is simple:</p>
<ol>
<li>Set the initial id to current tasks’s id.</li>
<li>When mapping each row, increment the id by the number of tasks.</li>
</ol>
<p>It’s also applicable to reducers.</p>
<h2 id="Solution-C-Sorted-Auto-increment-Id"><a href="#Solution-C-Sorted-Auto-increment-Id" class="headerlink" title="Solution C: Sorted Auto-increment Id"></a>Solution C: Sorted Auto-increment Id</h2><p>Here’s a real senario: we have several log files pulled from different machines, and we want to identify each row by an auto-increment id, and they should be in time sequence order.</p>
<p>We know Hadoop has a sort phase, so we can use timestamp as the mapper output key, and the framework will do the trick. But the sorting thing happends in one reducer (partition, in fact), so when using multiple reducer tasks, the result is not in total order. To achieve this, we can use the <a href="http://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapred/lib/TotalOrderPartitioner.html" target="_blank" rel="external">TotalOrderPartitioner</a>.</p>
<p>How about the incremental id? Even though the outputs are in total order, Solution B is not applicable here. So we take another approach: seperate the job in two phases, use the reducer to do sorting <em>and</em> counting, then use the second mapper to generate the id.</p>
<p>Here’s what we gonna do:</p>
<ol>
<li>Use TotalOrderPartitioner, and generate the partition file.</li>
<li>Parse logs in mapper A, use time as the output key.</li>
<li>Let the framework do partitioning and sorting.</li>
<li>Count records in reducer, write it with <a href="http://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.html" target="_blank" rel="external">MultipleOutput</a>.</li>
<li>In mapper B, use count as offset, and increment by 1.</li>
</ol>
<p>To simplify the situation, we assume to have the following inputs and outputs:</p>
<pre class=" language-text"><code class="language-text"> Input       Output

11:00 a     1 11:00 a
12:00 b     2 11:01 aa
13:00 c     3 11:02 aaa

11:01 aa    4 12:00 b
12:01 bb    5 12:01 bb
13:01 cc    6 12:02 bbb

11:02 aaa   7 13:00 c
12:02 bbb   8 13:01 cc
13:02 ccc   9 13:02 ccc
</code></pre>
<h3 id="Generate-Partition-File"><a href="#Generate-Partition-File" class="headerlink" title="Generate Partition File"></a>Generate Partition File</h3><p>To use TotalOrderpartitioner, we need a partition file (i.e. boundaries) to tell the partitioner how to partition the mapper outputs. Usually we’ll use <a href="https://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapreduce/lib/partition/InputSampler.RandomSampler.html" target="_blank" rel="external">InputSampler.RandomSampler</a> class, but this time let’s use a manual partition file.</p>
<pre class=" language-java"><code class="language-java">SequenceFile<span class="token punctuation">.</span>Writer writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceFile<span class="token punctuation">.</span>Writer</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span> <span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partition<span class="token punctuation">,</span>
        Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> NullWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Text key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
NullWritable value <span class="token operator">=</span> NullWritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"12:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"13:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>So basically, the partitioner will partition the mapper outputs into three parts, the first part will be less than “12:00”, seceond part [“12:00”, “13:00”), thrid [“13:00”, ).</p>
<p>And then, indicate the job to use this partition file:</p>
<pre class=" language-java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span>TotalOrderPartitioner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
otalOrderPartitioner<span class="token punctuation">.</span><span class="token function">setPartitionFile</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// The number of reducers should equal the number of partitions.</span>
job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Use-MutipleOutputs"><a href="#Use-MutipleOutputs" class="headerlink" title="Use MutipleOutputs"></a>Use MutipleOutputs</h3><p>In the reducer, we need to note down the row count of this partition, to do that, we’ll need the MultipleOutputs class, which let use output multiple result files apart from the default “part-r-xxxxx”. The reducer’s code is as following:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JobReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> NullWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> MultipleOutputs<span class="token operator">&lt;</span>NullWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> mos<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> count<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipleOutputs</span><span class="token operator">&lt;</span>NullWritable<span class="token punctuation">,</span> Text<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>NullWritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> NullWritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>There’re several things to pay attention to:</p>
<ol>
<li>MultipleOutputs is declared as class member, defined in Reducer#setup method, and must be closed at Reducer#cleanup (otherwise the file will be empty).</li>
<li>When instantiating MultipleOutputs class, the generic type needs to be the same as reducer’s output key/value class.</li>
<li>In order to use a different output key/value class, additional setup needs to be done at job definition:</li>
</ol>
<pre class=" language-java"><code class="language-java">Job job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Job</span><span class="token punctuation">(</span><span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MultipleOutputs<span class="token punctuation">.</span><span class="token function">addNamedOutput</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">,</span> SequenceFileOutputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    NullWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> LongWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>For example, if the output folder is “/tmp/total-sort/“, there’ll be the following files when job is done:</p>
<pre class=" language-text"><code class="language-text">/tmp/total-sort/count-r-00001
/tmp/total-sort/count-r-00002
/tmp/total-sort/count-r-00003
/tmp/total-sort/part-r-00001
/tmp/total-sort/part-r-00002
/tmp/total-sort/part-r-00003
</code></pre>
<h3 id="Pass-Start-Ids-to-Mapper"><a href="#Pass-Start-Ids-to-Mapper" class="headerlink" title="Pass Start Ids to Mapper"></a>Pass Start Ids to Mapper</h3><p>When the second mapper processes the inputs, we want them to know the initial id of its partition, which can be calculated from the <code>count-*</code> files we produce before. To pass this information, we can use the job’s Configuration object.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Read and calculate the start id from those row-count files.</span>
Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> startIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> startId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
FileSystem fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>FileStatus file <span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">listStatus</span><span class="token punctuation">(</span>countPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    Path path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"count-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    startIds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    SequenceFile<span class="token punctuation">.</span>Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceFile<span class="token punctuation">.</span>Reader</span><span class="token punctuation">(</span>fs<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    NullWritable key <span class="token operator">=</span> NullWritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LongWritable value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reader<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    startId <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Serialize the map and pass it to Configuration.</span>
job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"startIds"</span><span class="token punctuation">,</span> Base64<span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>
        SerializationUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Serializable<span class="token punctuation">)</span> startIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Recieve it in Mapper#setup</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JobMapperB</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>NullWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> LongWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> startIds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> startId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        startIds <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">)</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>
                Base64<span class="token punctuation">.</span><span class="token function">decodeBase64</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"startIds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FileSplit<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getInputSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startId <span class="token operator">=</span> startIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>NullWritable key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>

        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongWritable</span><span class="token punctuation">(</span>startId<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="Set-the-Input-Non-splitable"><a href="#Set-the-Input-Non-splitable" class="headerlink" title="Set the Input Non-splitable"></a>Set the Input Non-splitable</h3><p>When the file is bigger than a block or so (depending on some configuration entries), Hadoop will split it, which is not good for us. So let’s define a new InputFormat class to disable the splitting behaviour:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NonSplitableSequence</span> <span class="token keyword">extends</span> <span class="token class-name">SequenceFileInputFormat</span><span class="token operator">&lt;</span>NullWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSplitable</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">,</span> Path filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// use it</span>
job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span>NonSplitableSequence<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>And that’s it, we are able to generate a unique, auto-increment id for a sorted collection, with Hadoop’s parallel computing capability. The process is rather complicated, which requires several techniques about Hadoop. It’s worthwhile to dig.</p>
<p>A workable example can be found in my <a href="https://github.com/jizhang/mapred-sandbox/blob/master/src/main/java/com/shzhangji/mapred_sandbox/AutoIncrementId2Job.java" target="_blank" rel="external">Github repository</a>. If you have some more straight-forward approach, please do let me know.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In DBMS world, it’s easy to generate a unique, auto-increment id, using MySQL’s &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/example-auto-increment.html&quot;&gt;AUTO_INCREMENT attribute&lt;/a&gt; on a primary key or MongoDB’s &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/&quot;&gt;Counters Collection&lt;/a&gt; pattern. But when it comes to a distributed, parallel processing framework, like Hadoop Map-reduce, it is not that straight forward. The best solution to identify every record in such framework is to use UUID. But when an integer id is required, it’ll take some steps.&lt;/p&gt;
&lt;h2 id=&quot;Solution-A-Single-Reducer&quot;&gt;&lt;a href=&quot;#Solution-A-Single-Reducer&quot; class=&quot;headerlink&quot; title=&quot;Solution A: Single Reducer&quot;&gt;&lt;/a&gt;Solution A: Single Reducer&lt;/h2&gt;&lt;p&gt;This is the most obvious and simple one, just use the following code to specify reducer numbers to 1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;job.setNumReduceTasks(1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And also obvious, there are several demerits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All mappers output will be copied to one task tracker.&lt;/li&gt;
&lt;li&gt;Only one process is working on shuffel &amp;amp; sort.&lt;/li&gt;
&lt;li&gt;When producing output, there’s also only one process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above is not a problem for small data sets, or at least small mapper outputs. And it is also the approach that Pig and Hive use when they need to perform a total sort. But when hitting a certain threshold, the sort and copy phase will become very slow and unacceptable.&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
  </entry>
  
  <entry>
    <title>Manage Leiningen Project Configuration</title>
    <link href="http://shzhangji.com/blog/2013/04/30/manage-leiningen-project-configuration/"/>
    <id>http://shzhangji.com/blog/2013/04/30/manage-leiningen-project-configuration/</id>
    <published>2013-04-30T08:16:00.000Z</published>
    <updated>2017-03-24T02:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Maven projects, we tend to use <code>.properties</code> files to store various configurations, and use Maven profiles to switch between development and production environments. Like the following example:</p>
<pre class=" language-text"><code class="language-text"># database.properties
mydb.jdbcUrl=${mydb.jdbcUrl}
</code></pre>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- pom.xml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>development<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mydb.jdbcUrl</span><span class="token punctuation">></span></span>jdbc:mysql://127.0.0.1:3306/mydb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mydb.jdbcUrl</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>production<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- This profile could be moved to ~/.m2/settings.xml to increase security. --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mydb.jdbcUrl</span><span class="token punctuation">></span></span>jdbc:mysql://10.0.2.15:3306/mydb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mydb.jdbcUrl</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>
</code></pre>
<p>As for Leiningen projects, there’s no variable substitution in profile facility, and although in profiles we could use <code>:resources</code> to compact production-wise files into Jar, these files are actually replacing the original ones, instead of being merged. One solution is to strictly seperate environment specific configs from the others, so the replacement will be ok. But here I take another approach, to manually load files from difference locations, and then merge them.</p>
<a id="more"></a>
<h2 id="Read-Configuration-from-clj-Files"><a href="#Read-Configuration-from-clj-Files" class="headerlink" title="Read Configuration from .clj Files"></a>Read Configuration from <code>.clj</code> Files</h2><p>Instead of using <code>.properties</code>, we’ll use <code>.clj</code> files directly, since it’s more expressive and Clojure makes it very easy to utilize them. </p>
<pre class=" language-clojure"><code class="language-clojure">(defn read-config [section]
  (let [read (fn [res-path]
               (if-let [res (clojure.java.io/resource res-path)]
                 (read-string (slurp res))
                 {}))
        default-name (str (name section) ".clj")
        default (read default-name)
        override (read (str "override/" default-name))]
    (merge default override)))
</code></pre>
<p>This function assumes the following directory layout:</p>
<pre class=" language-text"><code class="language-text">test-project/
├── README.md
├── project.clj
├── resources
│   ├── database.clj
│   └── override
│       └── database.clj
└── src
    └── test_project
        └── core.clj
</code></pre>
<p>And the <code>database.clj</code>s are like:</p>
<pre class=" language-clojure"><code class="language-clojure">; resources/database.clj
{:charset "utf-8"
 :mydb {:host "127.0.0.1"}}

; resources/override/database.clj
{:mydb {:host "10.0.2.15"}}
</code></pre>
<p>The <code>.clj</code> files simply contains a <code>map</code> object, and we use <code>read-string</code> facility to parse the map. Since the latter map is merged into the former one, we can include some default settings without worrying about whether they’ll be available.</p>
<h2 id="Places-to-Put-‘Outter-Configuration’"><a href="#Places-to-Put-‘Outter-Configuration’" class="headerlink" title="Places to Put ‘Outter Configuration’"></a>Places to Put ‘Outter Configuration’</h2><p>Here I use the word ‘outter’, which means those configs are related to environments, and will override the default settings. In this section, I’ll introduce some typical places to put these outter configs and how to use them.</p>
<h3 id="A-‘resources-override-‘-Directory"><a href="#A-‘resources-override-‘-Directory" class="headerlink" title="A ‘resources/override/‘ Directory"></a>A ‘resources/override/‘ Directory</h3><p>First of all, this directory should be removed from version control, such as <code>.gitignore</code>:</p>
<pre class=" language-text"><code class="language-text">/.project
/.settings

/resources/override
</code></pre>
<p>And then, developers can put production or local configuration files in this directory.</p>
<p>In production, there’s typically a ‘compiling server’, which can be used to store production configs. After compiling, the Jar file will include the proper configs and are ready to be deployed.</p>
<h3 id="A-Dedicated-Directory-on-Every-Server"><a href="#A-Dedicated-Directory-on-Every-Server" class="headerlink" title="A Dedicated Directory on Every Server"></a>A Dedicated Directory on Every Server</h3><p>We could simply replace the <code>override</code> directory with an absolute path, such as <code>/home/www/config</code>. The pros are that we don’t need to recompile the jar files when config changes, and some of the configs could be shared between different projects. </p>
<p>But in such approach, you’ll need a provisioning tool like Puppet to manage those configs and notify the applications to restart. For something like Hadoop MapReduce job, it’s probably not practical to have such a directory on every compute node.</p>
<p>Another thing I want to mention in this approach is that, I suggest using an environment variable to indicate the path to config directory, not hard-coded in application. As a matter of fact, you could even place all configs into env vars, as suggested by <a href="http://www.12factor.net/config" target="_blank" rel="external">12-factor apps</a>.</p>
<h3 id="A-Central-Configuration-Server"><a href="#A-Central-Configuration-Server" class="headerlink" title="A Central Configuration Server"></a>A Central Configuration Server</h3><p>As for really big corporations, a central configuration server is necessary. One popular option is to use ZooKeeper. Or your companies have some service-discovery mechanism. These are really advanced topics, and I’ll leave them to the readers.</p>
<h2 id="Manage-Configs-in-Application"><a href="#Manage-Configs-in-Application" class="headerlink" title="Manage Configs in Application"></a>Manage Configs in Application</h2><p>Lastly, I’ll share a snippet that’ll manage the configs, it’s actually quite easy:</p>
<pre class=" language-clojure"><code class="language-clojure">(def ^:private config (atom {}))

(defn get-config

  ([section]
    (if-let [config-section (get @config section)]
      config-section
      (let [config-section (read-config section)]
        (swap! config assoc section config-section)
        config-section)))

  ([section item]
    (get (get-config section) item)))
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Maven projects, we tend to use &lt;code&gt;.properties&lt;/code&gt; files to store various configurations, and use Maven profiles to switch between development and production environments. Like the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;# database.properties
mydb.jdbcUrl=${mydb.jdbcUrl}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;!-- pom.xml --&amp;gt;
&amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;development&amp;lt;/id&amp;gt;
        &amp;lt;activation&amp;gt;&amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&amp;lt;/activation&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;mydb.jdbcUrl&amp;gt;jdbc:mysql://127.0.0.1:3306/mydb&amp;lt;/mydb.jdbcUrl&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;production&amp;lt;/id&amp;gt;
        &amp;lt;!-- This profile could be moved to ~/.m2/settings.xml to increase security. --&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;mydb.jdbcUrl&amp;gt;jdbc:mysql://10.0.2.15:3306/mydb&amp;lt;/mydb.jdbcUrl&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for Leiningen projects, there’s no variable substitution in profile facility, and although in profiles we could use &lt;code&gt;:resources&lt;/code&gt; to compact production-wise files into Jar, these files are actually replacing the original ones, instead of being merged. One solution is to strictly seperate environment specific configs from the others, so the replacement will be ok. But here I take another approach, to manually load files from difference locations, and then merge them.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="clojure" scheme="http://shzhangji.com/tags/clojure/"/>
    
  </entry>
  
</feed>
