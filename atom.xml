<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ji ZHANG&#39;s Blog</title>
  
  <subtitle>If I rest, I rust.</subtitle>
  <link href="https://shzhangji.com/atom.xml" rel="self"/>
  
  <link href="https://shzhangji.com/"/>
  <updated>2024-02-07T05:28:41.000Z</updated>
  <id>https://shzhangji.com/</id>
  
  <author>
    <name>Ji ZHANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dependency Injection in Flink</title>
    <link href="https://shzhangji.com/blog/2024/02/07/dependency-injection-in-flink/"/>
    <id>https://shzhangji.com/blog/2024/02/07/dependency-injection-in-flink/</id>
    <published>2024-02-07T05:28:41.000Z</published>
    <updated>2024-02-07T05:28:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Compose dependency graph with <a href="https://github.com/google/guice">Guice</a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseModule</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> &#123;</span><br><span class="line">  <span class="meta">@Provides</span> <span class="meta">@Singleton</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">provideDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Provides</span> <span class="meta">@Singleton</span></span><br><span class="line">  <span class="keyword">public</span> UserRepository <span class="title function_">provideUserRepository</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRepositoryImpl</span>(dataSource);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create singleton injector:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppInjector</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Injector</span> <span class="variable">INJECTOR</span> <span class="operator">=</span> Guice.createInjector(<span class="keyword">new</span> <span class="title class_">DatabaseModule</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">AppInjector</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">injectMembers</span><span class="params">(Object instance)</span> &#123;</span><br><span class="line">    Holder.INJECTOR.injectMembers(instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use in Flink function:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">RichMapFunction</span>&lt;Long, User&gt; &#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">transient</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    AppInjector.injectMembers(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">map</span><span class="params">(Long userId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Objects.requireNonNull(userId, <span class="string">&quot;User ID is null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> userRepository.getById(userId).orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;User not found&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Dependency injection, or DI, is a common practice in Java programming, especially when you come from a Spring background. The most direct benefit is testability, meaning you can replace class implementation with test stub. Other benefits are separation of concerns, better class hierarchy, inversion of control, etc. Component defines its dependencies via class constructor or annotated members, and the DI framework creates a container, or context, to wire these components properly. This context is usually created at startup and lives through the application lifecycle. Some examples are Spring <code>ApplicationContext</code>, Guice <code>Injector</code>.</p><p>Flink is a distributed computing framework, and it is favorable to decouple business logic from it by dependency injection. However, Flink application is composed of functional classes, that are instantiated in driver class, or <code>main</code> method, serialized and sent to distributed task managers. We cannot inject dependencies into these classes unless all our components are serializable. Fortunately, Flink provides a lifecycle hook <code>open</code> that is called when the job starts. Combined with another common pattern, Singleton, we can make DI framework play well with Flink.</p><span id="more"></span><h2 id="Guice-crash-course"><a href="#Guice-crash-course" class="headerlink" title="Guice crash course"></a>Guice crash course</h2><p>The dependency injection framework I choose is Guice, because it is simple, light-weight, and effective. Usually we declare class dependencies with constructor, add all components to a module, and let Guice do the rest.</p><h3 id="Declare-dependencies"><a href="#Declare-dependencies" class="headerlink" title="Declare dependencies"></a>Declare dependencies</h3><p>There are three ways to declare dependencies for a class. The constructor approach is preferable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.inject.Inject;</span><br><span class="line"><span class="comment">// Or import jakarta.inject.Inject;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Constructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UserRepositoryImpl</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dataSource = dataSource;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Member</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSource</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dataSource = dataSource;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-components-to-module"><a href="#Add-components-to-module" class="headerlink" title="Add components to module"></a>Add components to module</h3><p>Module is a mechanism of Guice to configure the components. How to initialize them, which concrete class implements the interface, what to do when there are multiple implementations, etc. Components are grouped into modules, and modules can be grouped together themselves. There are plenty of topics here, one can refer to its <a href="https://github.com/google/guice/wiki/Bindings">documentation</a>, and I will cover some basic usage.</p><p>First, components can be created implicitly, as long as Guice can figure out the dependency graph solely by class type and annotation. For instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImplementedBy(UserRepositoryImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">UserRespository</span> &#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">private</span> HikariDataSource dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">injector</span> <span class="operator">=</span> Guice.createInjector();</span><br><span class="line">injector.getInstance(UserRepository.class);</span><br></pre></td></tr></table></figure><p><code>dataSource</code> is typed <code>HikariDataSource</code>, which is a concrete class, so Guice knows how to create it. If it is <code>DataSource</code>, Guice would raise a missing implementation error. For <code>UserRepository</code>, however, Guice knows the implementation because we declare it by <code>ImplementedBy</code> annotation. Otherwise, we need to declare this relationship in a module:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.inject.AbstractModule;</span><br><span class="line"><span class="keyword">import</span> com.google.inject.Provides;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Add bindings</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseModule</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">()</span> &#123;</span><br><span class="line">    bind(UserRepository.class).to(UserRepositoryImpl.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Use provider method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseModule</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> &#123;</span><br><span class="line">  <span class="meta">@Provides</span></span><br><span class="line">  <span class="keyword">public</span> UserRepository <span class="title function_">provideUserRepository</span><span class="params">(UserRepositoryImpl impl)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> impl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">injector</span> <span class="operator">=</span> Guice.createInjector(<span class="keyword">new</span> <span class="title class_">DatabaseModule</span>());</span><br><span class="line">injector.getInstance(UserRepository.class);</span><br></pre></td></tr></table></figure><p>These two methods are equivalent. The second approach can be interpreted in this way:</p><ul><li>User requests for a <code>UserRepository</code> instance.</li><li>Guice sees the <code>provideUserRepository</code> method, due to its annotation and return type.</li><li>The method requires a <code>UserRepositoryImpl</code> parameter.</li><li>Guice creates the implementation instance implicitly, because it is a concrete class.</li><li>The method gets the instance, possibly modifies it, and returns it to the user.</li></ul><p>The second approach is a little different from what we use before, where the parameter is <code>DataSource</code>, and we create <code>UserRepositoryImpl</code> manually:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="keyword">public</span> UserRepository <span class="title function_">provideUserRepository</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRepositoryImpl</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this case, the <code>Inject</code> annotation in <code>UserRepositoryImpl</code> can be omitted, because Guice is not responsible for creating the instance, unless you deliberately try to get a <code>UserRepositoryImpl</code> instance from it.</p><p>In provider method, we can configure the instance we return:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provides</span> <span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">provideDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>();</span><br><span class="line">  config.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flink_di&quot;</span>);</span><br><span class="line">  config.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">  config.setPassword(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lastly, modules can be grouped together:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EtlModule</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">()</span> &#123;</span><br><span class="line">    install(<span class="keyword">new</span> <span class="title class_">ConfigModule</span>());</span><br><span class="line">    install(<span class="keyword">new</span> <span class="title class_">DatabaseModule</span>());</span><br><span class="line">    install(<span class="keyword">new</span> <span class="title class_">RedisModule</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">injector</span> <span class="operator">=</span> Guice.createInjector(<span class="keyword">new</span> <span class="title class_">EtlModule</span>());</span><br></pre></td></tr></table></figure><h3 id="Named-and-scoped-components"><a href="#Named-and-scoped-components" class="headerlink" title="Named and scoped components"></a>Named and scoped components</h3><p>When there are multiple instances for a type with different configuration, use <code>Named</code> annotation to tell them apart. It is also possible to create <a href="https://github.com/google/guice/wiki/BindingAnnotations">custom annotations</a>, or use bindings in <code>AbstractModule#configure</code> instead of provider method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseModule</span> <span class="keyword">extends</span> <span class="title class_">AbstractModule</span> &#123;</span><br><span class="line">  <span class="meta">@Provides</span> <span class="meta">@Named(&quot;customer&quot;)</span> <span class="meta">@Singleton</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">provideCustomerDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Provides</span> <span class="meta">@Named(&quot;product&quot;)</span> <span class="meta">@Singleton</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">provideProductDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRepositoryImpl</span> <span class="keyword">extends</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="meta">@Named(&quot;customer&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both data sources and the implementation instance are annotated with <code>Singleton</code>, meaning Guice will return the same instance when it is requested. Otherwise, it works like the <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-prototype">prototype scope</a> in Spring.</p><h2 id="Flink-pipeline-serialization"><a href="#Flink-pipeline-serialization" class="headerlink" title="Flink pipeline serialization"></a>Flink pipeline serialization</h2><p>Consider this simple pipeline that transforms a stream of ID to user models and print to the console.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStreamSource&lt;Long&gt; source = env.fromElements(<span class="number">1L</span>);</span><br><span class="line">DataStream&lt;User&gt; users = source.map(<span class="keyword">new</span> <span class="title class_">UserMapper</span>());</span><br><span class="line">users.print();</span><br><span class="line"></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><p>Under the hood, Flink will build this pipeline into a job graph, serialize it, and send to remote task managers. The <code>map</code> operator takes a <code>MapFunction</code> implementation, in this case a <code>UserMapper</code> instance. This instance is wrapped in <code>SimpleUdfStreamOperatorFactory</code> and gets serialized with Java object serialization mechanism.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.flink.util.InstantiationUtil</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serializeObject(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">      <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos)) &#123;</span><br><span class="line">    oos.writeObject(o);</span><br><span class="line">    oos.flush();</span><br><span class="line">    <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pipeline operators become a series of configuration hash maps and are sent to the job manager by a remote call.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.apache.flink.configuration.Configuration &#123;</span><br><span class="line">  operatorName=Map,</span><br><span class="line">  serializedUdfClassName=org.apache.flink.streaming.api.operators.SimpleUdfStreamOperatorFactory,</span><br><span class="line">  serializedUDF=[B@6c67e137,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For <code>ObjectOutputStream</code> to work, every class in the pipeline must implement the <code>Serializable</code> interface, as well as their member fields. For <code>UserMapper</code>, it extends <code>RichMapFunction</code> which implements the <code>Serializable</code> interface. However, if we add a dependency and that object is not serializable, an error would occur:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">RichMapFunction</span>&lt;Long, User&gt; &#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  UserRepository userRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="type">var</span> <span class="variable">injector</span> <span class="operator">=</span> Guice.createInjector(<span class="keyword">new</span> <span class="title class_">DatabaseModule</span>());</span><br><span class="line"><span class="type">var</span> <span class="variable">userMapper</span> <span class="operator">=</span> injector.getInstance(UserMapper.class);</span><br><span class="line">DataStream&lt;User&gt; users = source.map(userMapper);</span><br><span class="line"><span class="comment">// java.io.NotSerializableException: com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator</span></span><br></pre></td></tr></table></figure><p>This is because <code>HikariDataSource</code> is not serializable. As a result, it is not possible to carry <code>userRepository</code> through serialization, but set it after <code>UserMapper</code> is restored and opened, as is demonstrated at the beginning of this article. We add <code>transient</code> keyword to inform Java to not include this field when serializing.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">RichMapFunction</span>&lt;Long, User&gt; &#123;</span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  <span class="keyword">transient</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    AppInjector.injectMembers(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>AppInjector</code>, we use the Singleton pattern to ensure there is only one Guice injector, and Guice itself works in a thread-safe manner so heavy resources like connection pool can be shared among different user defined functions.</p><h2 id="Unit-testing"><a href="#Unit-testing" class="headerlink" title="Unit testing"></a>Unit testing</h2><p>As mentioned earlier, dependency injection improves testability. To test the <code>UserMapper</code>, we can mock the dependency and test it like a plain function. Other testing techniques can be found in the <a href="https://nightlies.apache.org/flink/flink-docs-release-1.18/docs/dev/datastream/testing/">documentation</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">userRepository</span> <span class="operator">=</span> mock(UserRepository.class);</span><br><span class="line">    when(userRepository.getById(<span class="number">1L</span>))</span><br><span class="line">        .thenReturn(Optional.of(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;jizhang&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">userMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserMapper</span>();</span><br><span class="line">    userMapper.userRepository = userRepository;</span><br><span class="line">    assertEquals(<span class="string">&quot;jizhang&quot;</span>, userMapper.map(<span class="number">1L</span>).getUsername());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/google/guice/wiki/GettingStarted">https://github.com/google/guice/wiki/GettingStarted</a></li><li><a href="https://getindata.com/blog/writing-flink-jobs-using-spring-dependency-injection-framework/">https://getindata.com/blog/writing-flink-jobs-using-spring-dependency-injection-framework/</a></li><li><a href="https://medium.com/airteldigital/designing-and-developing-a-real-time-streaming-platform-with-flink-and-google-guice-213b40e063de">https://medium.com/airteldigital/designing-and-developing-a-real-time-streaming-platform-with-flink-and-google-guice-213b40e063de</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Compose dependency graph with &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Guice&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;DatabaseModule&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;AbstractModule&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DataSource &lt;span class=&quot;title function_&quot;&gt;provideDataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;HikariDataSource&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; UserRepository &lt;span class=&quot;title function_&quot;&gt;provideUserRepository&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DataSource dataSource)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserRepositoryImpl&lt;/span&gt;(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Create singleton injector:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;AppInjector&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Holder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Injector&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;INJECTOR&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Guice.createInjector(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;DatabaseModule&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;AppInjector&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;injectMembers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object instance)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Holder.INJECTOR.injectMembers(instance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Use in Flink function:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserMapper&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RichMapFunction&lt;/span&gt;&amp;lt;Long, User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;transient&lt;/span&gt; UserRepository userRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Configuration parameters)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AppInjector.injectMembers(&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title function_&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long userId)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Objects.requireNonNull(userId, &lt;span class=&quot;string&quot;&gt;&amp;quot;User ID is null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; userRepository.getById(userId).orElseThrow(() -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;User not found&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;Dependency injection, or DI, is a common practice in Java programming, especially when you come from a Spring background. The most direct benefit is testability, meaning you can replace class implementation with test stub. Other benefits are separation of concerns, better class hierarchy, inversion of control, etc. Component defines its dependencies via class constructor or annotated members, and the DI framework creates a container, or context, to wire these components properly. This context is usually created at startup and lives through the application lifecycle. Some examples are Spring &lt;code&gt;ApplicationContext&lt;/code&gt;, Guice &lt;code&gt;Injector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Flink is a distributed computing framework, and it is favorable to decouple business logic from it by dependency injection. However, Flink application is composed of functional classes, that are instantiated in driver class, or &lt;code&gt;main&lt;/code&gt; method, serialized and sent to distributed task managers. We cannot inject dependencies into these classes unless all our components are serializable. Fortunately, Flink provides a lifecycle hook &lt;code&gt;open&lt;/code&gt; that is called when the job starts. Combined with another common pattern, Singleton, we can make DI framework play well with Flink.&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="flink" scheme="https://shzhangji.com/tags/flink/"/>
    
    <category term="guice" scheme="https://shzhangji.com/tags/guice/"/>
    
  </entry>
  
  <entry>
    <title>Define API Data Models with Pydantic</title>
    <link href="https://shzhangji.com/blog/2024/01/28/define-api-data-models-with-pydantic/"/>
    <id>https://shzhangji.com/blog/2024/01/28/define-api-data-models-with-pydantic/</id>
    <published>2024-01-28T09:53:28.000Z</published>
    <updated>2024-01-28T09:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>In modern architecture, frontend and backend are separated and maintained by different teams. To cooperate, backend exposes services as API endpoints with carefully designed data models, for both request and response. In Python, there are numerous ways to complete this task, such as WTForms, marshmallow. There are also frameworks that are designed to build API server, like FastAPI, Connexion, both are built around OpenAPI specification. In this article, I will introduce <a href="https://pydantic.dev/">Pydantic</a>, a validation and serialization library for Python, to build and enforce API request and response models. The web framework I choose is Flask, but Pydantic is framework-agnostic and can also be used in non-web applications.</p><p><img src="/images/api-pydantic/pydantic.png" alt="Pydantic"></p><h2 id="Define-response-model"><a href="#Define-response-model" class="headerlink" title="Define response model"></a>Define response model</h2><p>After <code>pip install pydantic</code>, let’s define a simple response model to return the currently logged-in user:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    last_login: datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/current-user&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">current_user</span>() -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    user = User(<span class="built_in">id</span>=<span class="number">1</span>, username=<span class="string">&#x27;jizhang&#x27;</span>, last_login=datetime.now())</span><br><span class="line">    <span class="keyword">return</span> user.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Then use <a href="https://httpie.io/">httpie</a> to test the API:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/current-user</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;username&quot;: &quot;jizhang&quot;,</span><br><span class="line">    &quot;last_login&quot;: &quot;2024-01-25T10:25:23.670431&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>We create Pydantic model by extending <code>BaseModel</code>, which is the basic approach. There are others ways like <code>dataclass</code>, <code>TypeAdapter</code>, or dynamic creation of models.</li><li>Model fields are simply defined by class attributes and type annotations. Unlike other SerDe libraries, Pydantic is natively built with Python type hints. If you are not familiar with it, please check out my previous <a href="https://shzhangji.com/blog/2024/01/19/python-static-type-check/">blog post</a>.</li><li>In the API, we manually create a model instance <code>user</code>. Usually we create them from request body or database models, which will be demonstrated later.</li><li>Then we serialize, or “dump” the model into a Python dict, that in turn is transformed by Flask into a JSON string. We can also use <code>user.model_dump_json()</code>, which returns the JSON string directly, but then the response header needs to be manually set to <code>application/json</code>, so we would rather let Flask do the job.</li><li><code>mode=&quot;json&quot;</code> tells Pydantic to serialize field values into JSON representable types. For instance, <code>datetime</code> and <code>Decimal</code> will be converted to string. Flask can also do this conversion, but we prefer keeping serialization in Pydantic model for clarity and ease of change.</li></ul><span id="more"></span><h3 id="Create-from-SQLAlchemy-model"><a href="#Create-from-SQLAlchemy-model" class="headerlink" title="Create from SQLAlchemy model"></a>Create from SQLAlchemy model</h3><p>Using model constructor to create instance is one way. We can also create from a Python dictionary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.model_validate(&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;jizhang&#x27;</span>, <span class="string">&#x27;last_login&#x27;</span>: datetime.now()&#125;)</span><br></pre></td></tr></table></figure><p>Or an arbitrary class instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserDto</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>: <span class="built_in">int</span>, username: <span class="built_in">str</span>, last_login: datetime</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.last_login = last_login</span><br><span class="line"></span><br><span class="line">user = User.model_validate(UserDto(<span class="number">1</span>, <span class="string">&#x27;jizhang&#x27;</span>, datetime.now()), from_attributes=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>UserDto</code> can also be a Python dataclass. You may notice the <code>from_attributes</code> parameter, which means field values are extracted from object’s attributes, instead of dictionary key value pairs. If the model is always created from objects, we can add this configuration to the model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    model_config = ConfigDict(from_attributes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">user = User.model_validate(user_dto)</span><br></pre></td></tr></table></figure><p>This is actually how we integrate with SQLAlchemy, creating Pydantic model instance from SQLAlchemy model instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Mapped, mapped_column</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserOrm</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span>: Mapped[<span class="built_in">int</span>] = mapped_column(primary_key=<span class="literal">True</span>)</span><br><span class="line">    username: Mapped[<span class="built_in">str</span>]</span><br><span class="line">    password: Mapped[<span class="built_in">str</span>]</span><br><span class="line">    last_login: Mapped[datetime]</span><br><span class="line"></span><br><span class="line">user_orm = db.session.get_one(UserOrm, <span class="number">1</span>)</span><br><span class="line">user = User.model_validate(user_orm)</span><br></pre></td></tr></table></figure><p>Would it be nice if our model is both Pydantic model <em>and</em> SQLAlchemy model? <a href="https://sqlmodel.tiangolo.com/">SQLModel</a> is exactly designed for this purpose:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlmodel <span class="keyword">import</span> SQLModel, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(SQLModel, table=<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="type">Optional</span>[<span class="built_in">int</span>] = Field(default=<span class="literal">None</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    last_login: datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read from database</span></span><br><span class="line">user = db.session.get_one(User, <span class="number">1</span>)</span><br><span class="line">user.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create from request data</span></span><br><span class="line">user = User.model_validate(request.get_json())</span><br><span class="line">db.session.add(user)</span><br></pre></td></tr></table></figure><p>But personally I am not in favor of this approach, for it mixes classes from two layers, domain layer and presentation layer. Now the class has two reasons to change, thus violating the single responsibility principle. Use it judiciously.</p><h3 id="Nested-models"><a href="#Nested-models" class="headerlink" title="Nested models"></a>Nested models</h3><p>To return a list of users, we can either create a dedicated response model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserListResponse</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    users: <span class="built_in">list</span>[User]</span><br><span class="line"></span><br><span class="line">user_orms = user_svc.get_list()</span><br><span class="line">response = UserListResponse(users=user_orms)</span><br><span class="line">response.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Or, if you prefer to return a list, we can create a custom type with <code>TypeAdapter</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> TypeAdapter</span><br><span class="line"></span><br><span class="line">UserList = TypeAdapter(<span class="built_in">list</span>[User])</span><br><span class="line"></span><br><span class="line">user_orms = user_svc.get_list()</span><br><span class="line">user_list = UserList.validate_python(user_orms)</span><br><span class="line">UserList.dump_python(user_list, mode=<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>I recommend the first approach, since it would be easier to add model attributes in the future.</p><h3 id="Custom-serialization"><a href="#Custom-serialization" class="headerlink" title="Custom serialization"></a>Custom serialization</h3><p>By default, <code>datetime</code> object is serialized into ISO 8601 string. If you prefer a different representation, custom serializers can be added. There are several ways to accomplish this task. Decorate a class method with <code>field_serializer</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> field_serializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    last_login: datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">    @field_serializer(<span class="params"><span class="string">&#x27;last_login&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">serialize_last_login</span>(<span class="params">self, value: datetime</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> value.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Create a new type with custom serializer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> PlainSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_datetime</span>(<span class="params">dt: datetime</span>):</span><br><span class="line">    <span class="keyword">return</span> dt.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">CustomDatetime = Annotated[datetime, PlainSerializer(format_datetime)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    last_login: CustomDatetime</span><br></pre></td></tr></table></figure><p><code>Annotated</code> is widely used in Pydantic, to attach extra information like custom serialization and validation to an existing type. In this example, we use a <code>PlainSerializer</code>, which takes a function or lambda to serialize the field. There is also a <code>WrapSerializer</code>, that can be used to apply transformation before and after the default serializer.</p><p>Finally, there is the <code>model_serializer</code> decorator that can be used to transform the whole model, as well as individual fields.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> model_serializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    last_login: datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_serializer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">serialize_model</span>(<span class="params">self</span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: self.<span class="built_in">id</span>,</span><br><span class="line">            <span class="string">&#x27;last_login&#x27;</span>: self.last_login.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserListResponse</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    users: <span class="built_in">list</span>[User]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_serializer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">serialize_model</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">return</span> self.users</span><br></pre></td></tr></table></figure><p>Now <code>UserListResponse</code> will be dumped into a list, instead of a dictionary.</p><h3 id="Field-alias"><a href="#Field-alias" class="headerlink" title="Field alias"></a>Field alias</h3><p>Sometimes we want to change the key name in serialized data. For instance, change <code>users</code> to <code>userList</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserListResponse</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    users: <span class="built_in">list</span>[User] = Field(serialization_alias=<span class="string">&#x27;userList&#x27;</span>)</span><br><span class="line"></span><br><span class="line">response = UserListResponse(users=user_orms)</span><br><span class="line">response.model_dump(mode=<span class="string">&#x27;json&#x27;</span>, by_alias=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># &#123;&quot;userList&quot;: []&#125;</span></span><br></pre></td></tr></table></figure><p><code>serialization_alias</code> indicates that the alias is only used for serialization. When creating models, we still use <code>users</code> as the key. To change both keys to <code>userList</code>, use <code>Field(alias=&#39;userList&#39;)</code>. If this conversion is universal, say you want all your request and response data to use camelCase for keys, add these configurations to your model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic.alias_generators <span class="keyword">import</span> to_camel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserListResponse</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    model_config = ConfigDict(alias_generator=to_camel, populate_by_name=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    user_list: <span class="built_in">list</span>[User]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create from request data</span></span><br><span class="line">UserListResponse.model_validate(&#123;<span class="string">&#x27;userList&#x27;</span>: []&#125;)</span><br><span class="line"><span class="comment"># This still works</span></span><br><span class="line">UserListResponse(user_list=[])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump to response data</span></span><br><span class="line">response.model_dump(mode=<span class="string">&#x27;json&#x27;</span>, by_alias=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># &#123;&quot;userList&quot;: []&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Computed-fields"><a href="#Computed-fields" class="headerlink" title="Computed fields"></a>Computed fields</h3><p>Fields may derive from other fields:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> computed_field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @computed_field  </span><span class="comment"># type: ignore[misc]</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">link</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> url_for(<span class="string">&#x27;article&#x27;</span>, <span class="built_in">id</span>=self.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><p>If the field requires extra information, we can add a private attribute to the model. The attribute’s name starts with an underscore, and Pydantic will ignore it in serialization and validation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> PrivateAttr</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    category_id: <span class="built_in">int</span></span><br><span class="line">    _categories: <span class="built_in">dict</span>[<span class="built_in">int</span>, <span class="built_in">str</span>] = PrivateAttr(default_factory=<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @computed_field  </span><span class="comment"># type: ignore[misc]</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">category_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self._categories.get(self.category_id, <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">article = Article(category_id=<span class="number">1</span>)</span><br><span class="line">article._categories = &#123;<span class="number">1</span>: <span class="string">&#x27;Big Data&#x27;</span>&#125;</span><br><span class="line">article.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"><span class="comment"># &#123;&quot;category_id&quot;: 1, &quot;category_name&quot;: &quot;Big Data&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Define-request-model"><a href="#Define-request-model" class="headerlink" title="Define request model"></a>Define request model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span> = Field(exclude=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserResponse</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/create-user&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>() -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    form = UserForm.model_validate(request.get_json())</span><br><span class="line">    user_orm = UserOrm(**<span class="built_in">dict</span>(form), last_login=datetime.now())</span><br><span class="line">    db.session.add(user_orm)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    response = CreateUserResponse(<span class="built_in">id</span>=user_orm.<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> response.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>model_validate</code> takes the dictionary returned by <code>get_json</code>, validates it, and constructs a model instance. There is also a <code>model_validate_json</code> method that accepts JSON string.</li><li>The validated form data is then passed to an ORM model. Usually this is done by manual assignments, because fields like <code>password</code> need to be properly encrypted.</li><li><code>Field(exclude=True)</code> indicates that this field will be excluded in serialization. This is helpful when you do not want some information leaking to the client.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/create-user username=jizhang password=password</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Query parameters can be modeled in a similar way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    tags: <span class="built_in">str</span></span><br><span class="line">    keyword: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/article/search&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article_search</span>() -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    form = SearchForm.model_validate(request.args.to_dict())</span><br><span class="line">    <span class="keyword">return</span> form.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Use <code>==</code> to tell httpie to use GET method:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/article/search tags==a,b,c keyword==test</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;keyword&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;tags&quot;: &quot;a,b,c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Custom-deserialization"><a href="#Custom-deserialization" class="headerlink" title="Custom deserialization"></a>Custom deserialization</h3><p>Let’s see how to parse <code>tags</code> string to a list of tags:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    tags: <span class="built_in">list</span>[<span class="built_in">str</span>]</span><br><span class="line">    keyword: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @field_validator(<span class="params"><span class="string">&#x27;tags&#x27;</span>, mode=<span class="string">&#x27;before&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_tags</span>(<span class="params">cls, value: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">form = SearchForm.model_validate(request.args.to_dict())</span><br><span class="line"><span class="built_in">print</span>(form.tags)</span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>field_validator</code> is used to compose custom validation rules, which will be discussed in a later section. Normally it executes after Pydantic has done the default validation. In this case, <code>tags</code> is declared as <code>list[str]</code> and Pydantic would raise an error when a string is passed to it. So we use <code>mode=&#39;before&#39;</code> to apply this function on the raw input data, and transform it into a list of tags.</p><p>There are also annotated validator and <code>model_validator</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BeforeValidator</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_tags</span>(<span class="params">tags: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">return</span> tags.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">TagList = Annotated[<span class="built_in">list</span>[<span class="built_in">str</span>], BeforeValidator(parse_tags)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    tags: TagList</span><br><span class="line">    keyword: <span class="type">Optional</span>[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_validator(<span class="params">mode=<span class="string">&#x27;before&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_model</span>(<span class="params">cls, data: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]</span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data[<span class="string">&#x27;keyword&#x27;</span>].strip():</span><br><span class="line">            data[<span class="string">&#x27;keyword&#x27;</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h3 id="Required-field-and-default-value"><a href="#Required-field-and-default-value" class="headerlink" title="Required field and default value"></a>Required field and default value</h3><p>By default, all model attributes are required. Though <code>keyword</code> is defined as <code>Optional</code>, Pydantic will still raise an error if <code>keyword</code> is missing in the input data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SearchForm.model_validate_json(<span class="string">&#x27;&#123;&quot;tags&quot;: &quot;a,b,c&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># ValidationError keyword Field required</span></span><br><span class="line"></span><br><span class="line">form = SearchForm.model_validate_json(<span class="string">&#x27;&#123;&quot;tags&quot;: &quot;a,b,c&quot;, &quot;keyword&quot;: null&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(form.keyword)</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure><p>There are several ways to provide a default value for missing keys:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span>, Annotated</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    keyword_1: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    keyword_2: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(default=<span class="literal">None</span>)</span><br><span class="line">    keyword_3: Annotated[<span class="type">Optional</span>[<span class="built_in">str</span>], Field(default=<span class="literal">None</span>)]</span><br><span class="line"></span><br><span class="line">    tags: <span class="built_in">list</span>[<span class="built_in">str</span>] = Field(default_factory=<span class="built_in">list</span>)</span><br><span class="line">    create_time: datetime = Field(default_factory=datetime.now)</span><br><span class="line">    uuid: <span class="built_in">str</span> = Field(default_factory=<span class="keyword">lambda</span>: uuid4().<span class="built_in">hex</span>)</span><br><span class="line"></span><br><span class="line">    tag_list: <span class="built_in">list</span>[<span class="built_in">str</span>] = []  <span class="comment"># This is OK</span></span><br></pre></td></tr></table></figure><p><code>default_factory</code> is useful when the default value is dynamically generated. For <code>list</code> and <code>dict</code>, it is okay to use literals <code>[]</code> and <code>&#123;&#125;</code>, because Pydantic will make a deep copy of it.</p><h3 id="Type-conversion"><a href="#Type-conversion" class="headerlink" title="Type conversion"></a>Type conversion</h3><p>For GET requests, input data are always of type <code>dict[str, str]</code>. For POST requests, though the client could send different types of values via JSON, like boolean and number, there are some types that are not representable in JSON, datetime for an example. When creating models, Pydantic will do proper type conversion. It is actually a part of validation, to ensure the client provides the correct data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConversionForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    int_value: <span class="built_in">int</span></span><br><span class="line">    decimal_value: Decimal</span><br><span class="line">    bool_value: <span class="built_in">bool</span></span><br><span class="line">    datetime_value: datetime</span><br><span class="line">    array_value: <span class="built_in">list</span>[<span class="built_in">int</span>]</span><br><span class="line">    object_value: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Validate data returned by request.get_json()</span></span><br><span class="line">ConversionForm.model_validate(&#123;</span><br><span class="line">    <span class="string">&#x27;int_value&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;decimal_value&#x27;</span>: <span class="string">&#x27;10.24&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bool_value&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;datetime_value&#x27;</span>: <span class="string">&#x27;2024-01-27 17:02:00&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;array_value&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;object_value&#x27;</span>: &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;10&#x27;</span>&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>As a side note, if you are to create model with constructor, and pass a data type that does not match the model definition, mypy will raise an error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConversionForm(int_value=<span class="string">&#x27;10&#x27;</span>)</span><br><span class="line"><span class="comment"># error: Argument &quot;int_value&quot; to &quot;ConversionForm&quot; has incompatible type &quot;str&quot;; expected &quot;int&quot;</span></span><br></pre></td></tr></table></figure><p>To fix this, you need to enable Pydantic’s mypy plugin in <code>pyproject.toml</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.mypy]</span></span><br><span class="line"><span class="attr">plugins</span> = [</span><br><span class="line">    <span class="string">&#x27;pydantic.mypy&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Data-validation"><a href="#Data-validation" class="headerlink" title="Data validation"></a>Data validation</h2><p>Type conversion works as the first step of data validation. Pydantic makes sure the model it creates contains attributes with the correct type. For further validation, Pydantic provides some builtin validators, and users are free to create new ones.</p><h3 id="Builtin-validators"><a href="#Builtin-validators" class="headerlink" title="Builtin validators"></a>Builtin validators</h3><p>Here are three ways to ensure <code>username</code> contains 3 to 10 characters, with builtin validators:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Field definition</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span> = Field(min_length=<span class="number">3</span>, max_length=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotated type</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line">ValidName = Annotated[<span class="built_in">str</span>, Field(min_length=<span class="number">3</span>, max_length=<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: ValidName</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use annotated-types package, auto-installed by Pydantic</span></span><br><span class="line"><span class="keyword">from</span> annotated_types <span class="keyword">import</span> MinLen, MaxLen, Len</span><br><span class="line"></span><br><span class="line">ValidName = Annotated[<span class="built_in">str</span>, MinLen(<span class="number">3</span>), MaxLen(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">ValidName = Annotated[<span class="built_in">str</span>, Len(<span class="number">3</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure><p>Some useful builtin validators are listed below. For annotated-types package, please check its <a href="https://github.com/annotated-types/annotated-types">repository</a> for more.</p><ul><li>String constraints<ul><li><code>min_length</code></li><li><code>max_length</code></li><li><code>pattern</code>: Regular expression, e.g. <code>r&#39;^[0-9]+$&#39;</code></li></ul></li><li>Numeric constraints<ul><li><code>gt</code>: Greater than</li><li><code>lt</code>: Less than</li><li><code>ge</code>: Greater than or equal to</li><li><code>le</code>: Less than or equal to</li></ul></li><li>Decimal constraints<ul><li><code>max_digits</code></li><li><code>decimal_places</code></li></ul></li></ul><p>In addition, Pydantic defines several special types for validation. For instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> PostiveInt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    int_1: PositiveInt</span><br><span class="line">    int_2: Annotated[<span class="built_in">int</span>, Field(gt=<span class="number">0</span>)]</span><br></pre></td></tr></table></figure><p><code>int_1</code> and <code>int_2</code> are equivalent, they both accept integer that is greater than 0. Other useful predefined types are:</p><ul><li><code>NegativeInt</code>, <code>NonPositiveInt</code>, <code>NonNegativeFloat</code>, etc.</li><li><code>StrictInt</code>: Only accept integer value like <code>10</code>, <code>-20</code>. Raise error for string <code>&quot;10&quot;</code> or float <code>10.0</code>. <a href="https://docs.pydantic.dev/latest/concepts/strict_mode/">Strict mode</a> can be enabled on field level, model level, or per validation.</li><li><code>AwareDatetime</code>: Datetime must contain timezone information, e.g. <code>2024-01-28T07:58:00+08:00</code></li><li><code>AnyUrl</code>: Accept a valid URL, and user can access properties like <code>scheme</code>, <code>host</code>, <code>path</code>, etc.</li><li><code>Emailstr</code>: Accept a valid email address. This requires an extra package, i.e. <code>pip intall &quot;pydantic[email]&quot;</code></li><li><code>IPvAnyAddress</code>: Accept a valid IPv4 or IPv6 address.</li><li><code>Json</code>: Accept a JSON string and convert it to Python object. For example:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> Json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    tags: Json[<span class="built_in">list</span>[<span class="built_in">str</span>]]</span><br><span class="line"></span><br><span class="line">form = SearchForm(tags=<span class="string">&#x27;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#x27;</span>)</span><br><span class="line">form.model_dump(mode=<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"><span class="comment"># &#123;&quot;tags&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Choices"><a href="#Choices" class="headerlink" title="Choices"></a>Choices</h3><p>Another common use case for validation is to only accept certain values for a field. This can be done with <code>Literal</code> type:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    order_by: <span class="type">Literal</span>[<span class="string">&#x27;asc&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>] = <span class="string">&#x27;asc&#x27;</span></span><br><span class="line"></span><br><span class="line">SearchForm(order_by=<span class="string">&#x27;natural&#x27;</span>)</span><br><span class="line"><span class="comment"># ValidationError order_by Input should be &#x27;asc&#x27; or &#x27;desc&#x27;</span></span><br></pre></td></tr></table></figure><p>Or <code>Enum</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderBy</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    ASC = <span class="string">&#x27;asc&#x27;</span></span><br><span class="line">    DESC = <span class="string">&#x27;desc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(<span class="title class_ inherited__">IntEnum</span>):</span><br><span class="line">    BIG_DATA = <span class="number">1</span></span><br><span class="line">    PROGRAMMING = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    order_by: OrderBy</span><br><span class="line">    category: Category</span><br><span class="line"></span><br><span class="line">form = SearchForm(order_by=<span class="string">&#x27;asc&#x27;</span>, category=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> form.order_by == OrderBy.ASC</span><br><span class="line"><span class="keyword">assert</span> form.category == Category.PROGRAMMING</span><br></pre></td></tr></table></figure><h3 id="Custom-validator"><a href="#Custom-validator" class="headerlink" title="Custom validator"></a>Custom validator</h3><p>As shown in the previous section, there are three ways to define a validator. But this time we want to apply custom logics <em>after</em> the default validation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Field decorator</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> field_validator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @field_validator(<span class="params"><span class="string">&#x27;username&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_username</span>(<span class="params">cls, value: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(value) &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="built_in">len</span>(value) &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;should have 3 to 10 characters&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotated type</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> AfterValidator</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_name</span>(<span class="params">value: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(value) &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="built_in">len</span>(value) &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;should have 3 to 10 characters&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: Annotated[<span class="built_in">str</span>, AfterValidator(validate_name)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model validator</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> model_validator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_validator(<span class="params">mode=<span class="string">&#x27;after&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_model</span>(<span class="params">self</span>) -&gt; <span class="string">&#x27;UserForm&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.username) &lt; <span class="number">3</span> <span class="keyword">or</span> <span class="built_in">len</span>(self.username) &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;username should have 3 to 10 characters&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h2 id="Handle-validation-error"><a href="#Handle-validation-error" class="headerlink" title="Handle validation error"></a>Handle validation error</h2><p>All validation errors, including the <code>ValueError</code> we raise in custom validator, are wrapped in Pydantic’s <code>ValidationError</code>. So a common practice is to setup a global error handler for it. Take Flask for an instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response, jsonfiy</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params">ValidationError</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_validation_error</span>(<span class="params">error: ValidationError</span>) -&gt; <span class="built_in">tuple</span>[Response, <span class="built_in">int</span>]:</span><br><span class="line">    detail = error.errors()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> detail[<span class="string">&#x27;loc&#x27;</span>]:</span><br><span class="line">        message = <span class="string">f&#x27;<span class="subst">&#123;detail[<span class="string">&quot;loc&quot;</span>][<span class="number">0</span>]&#125;</span>: <span class="subst">&#123;detail[<span class="string">&quot;msg&quot;</span>]&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message = detail[<span class="string">&#x27;msg&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: message,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(payload), <span class="number">400</span></span><br></pre></td></tr></table></figure><p><code>ValidationError</code> provides full description of all errors. Here we only take the first error and return the field name and error message:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/create-user username=a password=password</span><br><span class="line">HTTP/1.1 400 BAD REQUEST</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: 400,</span><br><span class="line">    &quot;message&quot;: &quot;username: Value error, should have 3 to 10 characters&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To further customize the validation error, one can construct a <code>PydanticCustomError</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In field validator</span></span><br><span class="line"><span class="keyword">raise</span> PydanticCustomError(<span class="string">&#x27;bad_request&#x27;</span>, <span class="string">&#x27;Invalid username&#x27;</span>, &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">40001</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># In error handler</span></span><br><span class="line"><span class="keyword">if</span> detail[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;bad_request&#x27;</span>:</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: detail[<span class="string">&#x27;ctx&#x27;</span>][<span class="string">&#x27;code&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: detail[<span class="string">&#x27;msg&#x27;</span>],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Validate-routing-variables"><a href="#Validate-routing-variables" class="headerlink" title="Validate routing variables"></a>Validate routing variables</h3><p>Pydantic provides a decorator to validate function calls. This can be used to validate Flask’s routing variables as well. For instance, Flask accepts non-negative integer, but Pydantic requires it to be greater than 0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> validate_call, PositiveInt</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/user/&lt;int:user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@validate_call</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_by_id</span>(<span class="params">user_id: PositiveInt</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;id&#x27;</span>: user_id&#125;</span><br></pre></td></tr></table></figure><p>Validation result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/user/0</span><br><span class="line">HTTP/1.1 400 BAD REQUEST</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: 400,</span><br><span class="line">    &quot;message&quot;: &quot;user_id: Input should be greater than 0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Integrate-with-OpenAPI"><a href="#Integrate-with-OpenAPI" class="headerlink" title="Integrate with OpenAPI"></a>Integrate with OpenAPI</h2><p>The quickest way is to use a framework that builds with Pydantic and OpenAPI, a.k.a. <a href="https://fastapi.tiangolo.com/">FastAPI</a>. But if you are using a different framework, or maintaining an existing project, there are several options.</p><h3 id="Export-model-to-JSON-schema"><a href="#Export-model-to-JSON-schema" class="headerlink" title="Export model to JSON schema"></a>Export model to JSON schema</h3><p>Pydantic provides the facility to export models as JSON schema. We can write a Flask command to save them into a file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic.json_schema <span class="keyword">import</span> models_json_schema</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_schema</span>():</span><br><span class="line">    _, schema = models_json_schema([</span><br><span class="line">        (UserForm, <span class="string">&#x27;validation&#x27;</span>),</span><br><span class="line">        (CreateUserResponse, <span class="string">&#x27;serialization&#x27;</span>),</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;schemas.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(schema, indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>The generated <code>schemas.json</code> would be:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$defs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;UserForm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;maxLength&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;minLength&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Then we create an <code>openapi.yaml</code> file to use these schemas:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Pydantic</span> <span class="string">Demo</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/create-user:</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">requestBody:</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&#x27;schemas.json#/$defs/UserForm&#x27;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&#x27;200&#x27;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">OK</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">&#x27;schemas.json#/$defs/CreateUserResponse&#x27;</span></span><br></pre></td></tr></table></figure><p>Open it in some OpenAPI viewer, e.g. OpenAPI extension for VS Code:</p><p><img src="/images/api-pydantic/openapi.png" alt="OpenAPI"></p><h3 id="Create-OpenAPI-specification-in-Python"><a href="#Create-OpenAPI-specification-in-Python" class="headerlink" title="Create OpenAPI specification in Python"></a>Create OpenAPI specification in Python</h3><p>Install <a href="https://github.com/mike-oakley/openapi-pydantic">openapi-pydantic</a>, and define OpenAPI like a Pydantic model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openapi_pydantic <span class="keyword">import</span> OpenAPI</span><br><span class="line"><span class="keyword">from</span> openapi_pydantic.util <span class="keyword">import</span> PydanticSchema, construct_open_api_with_schema_class</span><br><span class="line"></span><br><span class="line">api = OpenAPI.model_validate(&#123;</span><br><span class="line">    <span class="string">&#x27;info&#x27;</span>: &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Pydantic Demo&#x27;</span>, <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;0.1.0&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;paths&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/create-user&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;post&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;requestBody&#x27;</span>: &#123;<span class="string">&#x27;content&#x27;</span>: &#123;<span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;schema&#x27;</span>: PydanticSchema(schema_class=UserForm),</span><br><span class="line">                &#125;&#125;&#125;,</span><br><span class="line">                <span class="string">&#x27;responses&#x27;</span>: &#123;<span class="string">&#x27;200&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;content&#x27;</span>: &#123;<span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                        <span class="string">&#x27;schema&#x27;</span>: PydanticSchema(schema_class=CreateUserResponse),</span><br><span class="line">                    &#125;&#125;,</span><br><span class="line">                &#125;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">api = construct_open_api_with_schema_class(api)</span><br><span class="line"><span class="built_in">print</span>(api.model_dump_json(by_alias=<span class="literal">True</span>, exclude_none=<span class="literal">True</span>, indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>The generated file is similar to the previous one, except that it is written in JSON and schemas are embedded in the <code>components</code> section.</p><h3 id="Decorate-API-endpoints"><a href="#Decorate-API-endpoints" class="headerlink" title="Decorate API endpoints"></a>Decorate API endpoints</h3><p><a href="https://github.com/0b01001001/spectree">SpecTree</a> provides facilities to decorate Flask view methods with Pydantic models. It generates OpenAPI docs in <a href="http://localhost:5000/apidoc/swagger">http://localhost:5000/apidoc/swagger</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">spec = SpecTree(<span class="string">&#x27;flask&#x27;</span>, annotations=<span class="literal">True</span>)</span><br><span class="line">spec.register(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/create-user&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@spec.validate(<span class="params">resp=Response(<span class="params">HTTP_200=CreateUserResponse</span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">json: UserForm</span>) -&gt; CreateUserResponse:</span><br><span class="line">    user_orm = UserOrm(username=json.username, password=json.username)</span><br><span class="line">    <span class="keyword">return</span> CreateUserResponse(<span class="built_in">id</span>=user_orm.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><ul><li>Pydantic <code>BaseModel</code> needs to be imported from <code>pydantic.v1</code>, for compatibility reason.</li><li>Validation error is returned to client with HTTP status 422 and detailed information:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:5000/create-user username=a password=password</span><br><span class="line">HTTP/1.1 422 UNPROCESSABLE ENTITY</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;ctx&quot;: &#123;</span><br><span class="line">            &quot;limit_value&quot;: 3</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;loc&quot;: [</span><br><span class="line">            &quot;username&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;msg&quot;: &quot;ensure this value has at least 3 characters&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;value_error.any_str.min_length&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.pydantic.dev/latest/concepts/models/">https://docs.pydantic.dev/latest/concepts/models/</a></li><li><a href="https://fastapi.tiangolo.com/tutorial/">https://fastapi.tiangolo.com/tutorial/</a></li><li><a href="https://swagger.io/docs/specification/data-models/">https://swagger.io/docs/specification/data-models/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;In modern architecture, frontend and backend are separated and maintained by different teams. To cooperate, backend exposes services as API endpoints with carefully designed data models, for both request and response. In Python, there are numerous ways to complete this task, such as WTForms, marshmallow. There are also frameworks that are designed to build API server, like FastAPI, Connexion, both are built around OpenAPI specification. In this article, I will introduce &lt;a href=&quot;https://pydantic.dev/&quot;&gt;Pydantic&lt;/a&gt;, a validation and serialization library for Python, to build and enforce API request and response models. The web framework I choose is Flask, but Pydantic is framework-agnostic and can also be used in non-web applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/api-pydantic/pydantic.png&quot; alt=&quot;Pydantic&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Define-response-model&quot;&gt;&lt;a href=&quot;#Define-response-model&quot; class=&quot;headerlink&quot; title=&quot;Define response model&quot;&gt;&lt;/a&gt;Define response model&lt;/h2&gt;&lt;p&gt;After &lt;code&gt;pip install pydantic&lt;/code&gt;, let’s define a simple response model to return the currently logged-in user:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pydantic &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;title class_ inherited__&quot;&gt;BaseModel&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    last_login: datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.get(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;/current-user&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;current_user&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;dict&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user = User(&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, username=&lt;span class=&quot;string&quot;&gt;&amp;#x27;jizhang&amp;#x27;&lt;/span&gt;, last_login=datetime.now())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user.model_dump(mode=&lt;span class=&quot;string&quot;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Then use &lt;a href=&quot;https://httpie.io/&quot;&gt;httpie&lt;/a&gt; to test the API:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% http localhost:5000/current-user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;id&amp;quot;: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;username&amp;quot;: &amp;quot;jizhang&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;last_login&amp;quot;: &amp;quot;2024-01-25T10:25:23.670431&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;We create Pydantic model by extending &lt;code&gt;BaseModel&lt;/code&gt;, which is the basic approach. There are others ways like &lt;code&gt;dataclass&lt;/code&gt;, &lt;code&gt;TypeAdapter&lt;/code&gt;, or dynamic creation of models.&lt;/li&gt;
&lt;li&gt;Model fields are simply defined by class attributes and type annotations. Unlike other SerDe libraries, Pydantic is natively built with Python type hints. If you are not familiar with it, please check out my previous &lt;a href=&quot;https://shzhangji.com/blog/2024/01/19/python-static-type-check/&quot;&gt;blog post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the API, we manually create a model instance &lt;code&gt;user&lt;/code&gt;. Usually we create them from request body or database models, which will be demonstrated later.&lt;/li&gt;
&lt;li&gt;Then we serialize, or “dump” the model into a Python dict, that in turn is transformed by Flask into a JSON string. We can also use &lt;code&gt;user.model_dump_json()&lt;/code&gt;, which returns the JSON string directly, but then the response header needs to be manually set to &lt;code&gt;application/json&lt;/code&gt;, so we would rather let Flask do the job.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode=&amp;quot;json&amp;quot;&lt;/code&gt; tells Pydantic to serialize field values into JSON representable types. For instance, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Decimal&lt;/code&gt; will be converted to string. Flask can also do this conversion, but we prefer keeping serialization in Pydantic model for clarity and ease of change.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="openapi" scheme="https://shzhangji.com/tags/openapi/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="pydantic" scheme="https://shzhangji.com/tags/pydantic/"/>
    
  </entry>
  
  <entry>
    <title>Python Static Type Check</title>
    <link href="https://shzhangji.com/blog/2024/01/19/python-static-type-check/"/>
    <id>https://shzhangji.com/blog/2024/01/19/python-static-type-check/</id>
    <published>2024-01-19T12:27:56.000Z</published>
    <updated>2024-01-19T12:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python is by design a dynamically typed programming language. It is flexible and easy to write. But as the project size grows, there will be more interactions between functions, classes and modules, and we often make mistakes like passing wrong types of arguments or assuming different return types from function calls. Worse still, these mistakes can only be spotted at runtime, and are likely to cause production bugs. Is it possible for Python to support static typing like Java and Go, checking errors at compile time, while remaining to be easy to use? Fortunately, from Python 3.5 on, it supports an optional syntax, or type hints, for static type check, and many tools are built around this feature. This article covers the following topics:</p><ul><li>A quick start to do static type check in Python.</li><li>Why do we need static typing?</li><li>Python type hints in detail.</li><li>Other advanced features.</li></ul><p><img src="/images/python-typing/mypy.png" alt="Mypy"></p><h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><p>Static typing can be achieved by adding type hints to function arguments and return value, while using a tool like <a href="https://mypy-lang.org/">mypy</a> to do the check. For instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + name</span><br></pre></td></tr></table></figure><p>Here the function <code>greeting</code> accepts an argument which is typed as <code>str</code>, and its return value is also typed <code>str</code>. Run <code>pip install mypy</code>, and then check the file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% mypy quickstart.py</span><br><span class="line">Success: no issues found in 1 source file</span><br></pre></td></tr></table></figure><p>Clearly this simple function would pass the check. Let’s add some erroneous code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    real_name = name + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + real_name</span><br><span class="line"></span><br><span class="line">greeting(<span class="number">1</span>)</span><br><span class="line">greeting(<span class="string">&#x27;world&#x27;</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>There will be plenty of errors found by mypy:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% mypy quickstart.py</span><br><span class="line">quickstart.py:2: error: Unsupported operand types for + (&quot;str&quot; and &quot;int&quot;)  [operator]</span><br><span class="line">quickstart.py:5: error: Argument 1 to &quot;greeting&quot; has incompatible type &quot;int&quot;; expected &quot;str&quot;  [arg-type]</span><br><span class="line">quickstart.py:6: error: Unsupported operand types for + (&quot;str&quot; and &quot;int&quot;)  [operator]</span><br><span class="line">Found 3 errors in 1 file (checked 1 source file)</span><br></pre></td></tr></table></figure><p>The error messages are pretty clear. Usually we use pre-commit hook and CI to ensure everything checked into Git or merged into <code>master</code> passes <code>mypy</code>.</p><span id="more"></span><p>Type hints can also be applied to local variables. But most of the time, <code>mypy</code> is able to <em>infer</em> the type from the value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    real_name = <span class="string">&#x27;hello &#x27;</span> + name</span><br><span class="line">    number: <span class="built_in">int</span> = real_name</span><br><span class="line">    <span class="keyword">return</span> number</span><br></pre></td></tr></table></figure><p><code>real_name</code> would be inferred as <code>str</code> type, so when it is assigned to <code>number</code>, an <code>int</code> typed variable, error occurs. The return value also includes an error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% mypy quickstart.py</span><br><span class="line">quickstart.py:3: error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)  [assignment]</span><br><span class="line">quickstart.py:4: error: Incompatible return value type (got &quot;int&quot;, expected &quot;str&quot;)  [return-value]</span><br><span class="line">Found 2 errors in 1 file (checked 1 source file)</span><br></pre></td></tr></table></figure><p>There are basic types like <code>str</code>, <code>int</code>, and collection types like <code>list</code>, <code>dict</code>. We can even define the type of their elements:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items: <span class="built_in">list</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">nums: <span class="built_in">list</span>[<span class="built_in">int</span>] = []</span><br><span class="line">nums.append(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ages: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = &#123;&#125;</span><br><span class="line">ages[<span class="string">&#x27;John&#x27;</span>] = <span class="string">&#x27;30&#x27;</span></span><br></pre></td></tr></table></figure><p>You may see some code written as <code>List[int]</code> or <code>Dict[str, int]</code>, where <code>List</code> is imported from the <code>typing</code> module. This is because before Python 3.9, <code>list</code> and other builtins do not support subscripting <code>[]</code>. This article’s examples are based on Python 3.10.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% mypy quickstart.py</span><br><span class="line">quickstart.py:1: error: Incompatible types in assignment (expression has type &quot;int&quot;, variable has type &quot;list[Any]&quot;)  [assignment]</span><br><span class="line">quickstart.py:4: error: Argument 1 to &quot;append&quot; of &quot;list&quot; has incompatible type &quot;str&quot;; expected &quot;int&quot;  [arg-type]</span><br><span class="line">quickstart.py:7: error: Incompatible types in assignment (expression has type &quot;str&quot;, target has type &quot;int&quot;)  [assignment]</span><br><span class="line">Found 3 errors in 1 file (checked 1 source file)</span><br></pre></td></tr></table></figure><p>The check works as expected: <code>items</code> is a <code>list</code>, so it cannot be assigned otherwise; <code>nums</code> is a list of numbers, no string is allowed; the value of <code>ages</code> is also restricted. Look carefully at the first error message, we can see <code>list</code> is equivalent to <code>list[Any]</code>, where <code>Any</code> is also defined in <code>typing</code> module, which means literally any type. For instance, if a function argument is not given a type hint, it is defined as <code>Any</code> and can accept any type of value.</p><p>Please remember, these checks do not happen at runtime. Python remains to be a dynamically typed language. If you need runtime validation, extra tools are required. We will discuss it in a later section.</p><p>The last example is defining types for class members:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Job</span>:</span><br><span class="line">    suffix: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, date: <span class="built_in">str</span>, suffix: <span class="built_in">str</span></span>):</span><br><span class="line">        self.date = date</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.date + <span class="number">1</span></span><br><span class="line">        self.suffix + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Type hints could be applied either in class body or in constructor. Member functions are typed as normal.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% mypy quickstart.py</span><br><span class="line">quickstart.py:8: error: Unsupported operand types for + (&quot;str&quot; and &quot;int&quot;)  [operator]</span><br><span class="line">quickstart.py:9: error: Unsupported operand types for + (&quot;str&quot; and &quot;int&quot;)  [operator]</span><br><span class="line">Found 2 errors in 1 file (checked 1 source file)</span><br></pre></td></tr></table></figure><h2 id="Why-do-we-need-static-typing"><a href="#Why-do-we-need-static-typing" class="headerlink" title="Why do we need static typing?"></a>Why do we need static typing?</h2><p>From the code above we can see that it does take some effort to write Python with type hints, so why is it preferable anyway? Actually the merits can be drawn from many other statically typed languages like Go and Java:</p><ul><li>Errors can be found at compile time, or even earlier if you are coding in an IDE.</li><li><a href="https://softwareengineering.stackexchange.com/questions/59606/is-static-typing-worth-the-trade-offs/371369#371369">Studies</a> show that TypeScript or Flow can reduce the number of bugs by 15%.</li><li>Static typing can improve the readability and maintainability of the program.</li><li>Type hints may have a positive impact on performance.</li></ul><p>Before we dive into details, let’s differentiate between strong&#x2F;weak typing and static&#x2F;dynamic typing.</p><p><img src="/images/python-typing/categories.png" alt="Categories of typing"></p><p>Static&#x2F;dynamic typing is easier to tell apart. Static typing validates variable types at compile time, such as Go, Java and C, while dynamic typing checks at runtime, like Python, JavaScript and PHP. Strong&#x2F;weak typing, on the other hand, depends on the extent of implicit conversion. For instance, JavaScript is the least weakly typed language because all types of values can be added to each other. It is the language interpreter that does the implicit conversion, so that number can be added to array, string to object, etc. PHP is another example of weakly typed language, in that string can be added to number, but a warning will be reported. Python, on the contrary, is strongly typed because this operation will immediately raise a <code>TypeError</code>.</p><p>Back to the advantages of static typing. For Python, type hints can improve the readability of code. The following snippet defines the function arguments with explicit types, so that the checker would instantly warn you about a wrong call. Besides, type hints are also used by editor to provide informative and accurate autocomplete for invoking methods on an object. Python standard library is fully augmented with type hints, so you can input <code>some_str.</code> and choose from a list of methods of <code>str</code> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Optional</span>, NewType</span><br><span class="line"></span><br><span class="line">UserId = NewType(<span class="string">&#x27;UserId&#x27;</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">request_data: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params">                 headers: <span class="type">Optional</span>[<span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]],</span></span><br><span class="line"><span class="params">                 user_id: <span class="type">Optional</span>[UserId] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 as_json: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>For some languages, type hints also boost the performance. Take Clojure for an example:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">defn</span> <span class="title">len</span> [x]</span><br><span class="line">  (<span class="name">.length</span> x))</span><br><span class="line"></span><br><span class="line">(<span class="keyword">defn</span> <span class="title">len2</span> [^String x]</span><br><span class="line">  (<span class="name">.length</span> x))</span><br><span class="line"></span><br><span class="line">user=&gt; (<span class="name"><span class="built_in">time</span></span> (<span class="name"><span class="built_in">reduce</span></span> + (<span class="name"><span class="built_in">map</span></span> len (<span class="name"><span class="built_in">repeat</span></span> <span class="number">1000000</span> <span class="string">&quot;asdf&quot;</span>))))</span><br><span class="line"><span class="string">&quot;Elapsed time: 3007.198 msecs&quot;</span></span><br><span class="line"><span class="number">4000000</span></span><br><span class="line">user=&gt; (<span class="name"><span class="built_in">time</span></span> (<span class="name"><span class="built_in">reduce</span></span> + (<span class="name"><span class="built_in">map</span></span> len2 (<span class="name"><span class="built_in">repeat</span></span> <span class="number">1000000</span> <span class="string">&quot;asdf&quot;</span>))))</span><br><span class="line"><span class="string">&quot;Elapsed time: 308.045 msecs&quot;</span></span><br><span class="line"><span class="number">4000000</span></span><br></pre></td></tr></table></figure><p>The untyped version of <code>len</code> costs about ten times longer. Because Clojure is designed as a dynamically typed language too, and uses reflection to determine the type of variable. This process is rather slow, so type hint works well in performance critical scenarios. But this is not true for Python, because type hints are completely ignored at runtime.</p><p>Some other languages also start to adopt static typing. TypeScript, a superset of JavaScript with syntax for types:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">listA</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">listB</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the Hack programming language, which is PHP with static typing and a lot of new features:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>hh</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">int</span> MyConst = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">string</span> <span class="variable">$x</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span></span>): <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="variable">$y</span> = <span class="variable">$x</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That being said, whether to adopt static typing for Python depends on the size of your project, or how formal it is. Luckily Python provides a gradual way of adopting static typing, so you do not need to add all type hints in one go. This approach will be discussed in the next section.</p><h2 id="Python-static-typing-in-details"><a href="#Python-static-typing-in-details" class="headerlink" title="Python static typing in details"></a>Python static typing in details</h2><h3 id="PEP"><a href="#PEP" class="headerlink" title="PEP"></a>PEP</h3><p>Every new feature in Python comes with a PEP. The PEPs related to static typing can be found in <a href="https://peps.python.org/topic/typing/">this link</a>. Some of the important ones are:</p><ul><li>PEP 3107 Function Annotation (Python 3.0)</li><li>PEP 484 Type Hints (Python 3.5)</li><li>PEP 526 Syntax for Variable Annotations (Python 3.6)</li><li>PEP 563 Postponed Evaluation of Annotations (Python 3.7)</li><li>PEP 589 TypedDict (Python 3.8)</li><li>PEP 585 Type Hinting Generics In Standard Collections (Python 3.9)</li><li>PEP 604 Allow writing union types as X | Y (Python 3.10)</li></ul><p>Python 3.0 introduces the annotation syntax for function arguments and return value, but it was not solely designed for type checking. From Python 3.5, a complete syntax for static typing is defined, <code>typing</code> module is added, and <code>mypy</code> is made the reference implementation for type checking. In later versions, more features are added like protocols, literal types, new callable syntax, etc., making static typing more powerful and delightful to use.</p><h3 id="Gradual-typing"><a href="#Gradual-typing" class="headerlink" title="Gradual typing"></a>Gradual typing</h3><p>One thing that never changes is that static typing is an opt-in, meaning you can apply it to the whole project or only some of the modules. As a result, you can progressively add type hints to certain parts of the program, even just a single function. Because in the default setting, mypy will only check functions that have at least one type hint in its signature:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name, age: <span class="built_in">int</span></span>): ...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name, age</span>) -&gt; <span class="built_in">str</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Not check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name, age</span>): ...</span><br></pre></td></tr></table></figure><p>For untyped argument, like <code>name</code> in the first <code>greeting</code>, it is considered as <code>Any</code> type, which means you can pass any value as <code>name</code>, and use it for any operations. It is different from <code>object</code> type though. Say you define an argument as <code>item: object</code> and try to invoke <code>item.foo()</code>, mypy will complain that <code>object</code> has no attribute <code>foo</code>. So if you are not sure what type of a variable is, give it <code>Any</code> or simply leave it blank.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>() -&gt; <span class="literal">None</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Not check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(): ...</span><br></pre></td></tr></table></figure><p>Another common mistake is for functions without arguments and return value. We have to add <code>None</code> as the return type, otherwise mypy will silently skip it.</p><h3 id="Type-hints"><a href="#Type-hints" class="headerlink" title="Type hints"></a>Type hints</h3><p>There are two ways to compose type hints: annotation and stub file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Annotation</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DummyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.elements: <span class="built_in">list</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, element: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.elements.append(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Code without type hints, filename: dummy_list.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DummyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.elements = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, element</span>):</span><br><span class="line">        self.elements.append(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add type hints with stub file, filename: dummy_list.pyi</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DummyList</span>:</span><br><span class="line">    elements: <span class="built_in">list</span>[<span class="built_in">int</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>: ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, element: <span class="built_in">int</span></span>): ...</span><br></pre></td></tr></table></figure><p><code>...</code> or <a href="https://docs.python.org/3/library/constants.html#Ellipsis">Ellipsis</a> is a valid Python expression, and a conventional way to leave out implementation. Stub files are used to add type hints to an existing codebase without changing its source. For instance, Python standard library is fully typed with stub files, hosted in a repository called <a href="https://github.com/python/typeshed">typeshed</a>. There are other third-party libraries in this repo too, and they are all released as separate packages in PyPI, prefixed with <code>types-</code>, like <code>types-requests</code>. They need to be installed explicitly, otherwise mypy would complain that it cannot find type definitions for these libraries. Fortunately, a lot of popular libraries have embraced static typing and do not require external stub files.</p><p>Mypy provides a nice <a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">cheat sheet</a> for basic usage of type hints, and Python <a href="https://docs.python.org/3.10/library/typing.html">documentation</a> contains the full description. Here are the entries that I find most helpful:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Basic types</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Collection types</span></span><br><span class="line">x: <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>] = (<span class="number">3</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="number">7.5</span>)</span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">x: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>] = &#123;<span class="string">&#x27;field&#x27;</span>, <span class="number">2.0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Special types</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Union</span>, <span class="type">Optional</span>, <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line">x: <span class="type">Any</span> = <span class="number">1</span></span><br><span class="line">x = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">x: <span class="built_in">int</span> | <span class="built_in">str</span> = <span class="number">1</span>  <span class="comment"># Equivalent to x: Union[int, str]</span></span><br><span class="line">x = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">x: <span class="type">Optional</span>[<span class="built_in">str</span>] = some_function()</span><br><span class="line">x.lower()  <span class="comment"># Error: Optional[str] has no attribute lower</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    x.lower()  <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">num1: <span class="built_in">int</span>, my_float: <span class="built_in">float</span> = <span class="number">3.5</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 + my_float</span><br><span class="line">x: <span class="type">Callable</span>[[<span class="built_in">int</span>, <span class="built_in">float</span>], <span class="built_in">float</span>] = f</span><br></pre></td></tr></table></figure><p>One of my favorite types is <code>Optional</code>, since it solves the problem of <code>None</code>. Mypy will raise an error if you fail to guard against a nullable variable. <code>if x is not None</code> is also a way of <a href="https://mypy.readthedocs.io/en/stable/type_narrowing.html">type narrowing</a>, meaning mypy will consider <code>x</code> as <code>str</code> in the <code>if</code> block. Another useful type narrowing technique is <code>isinstance</code>.</p><p>Python classes are also types. Mypy understands inheritance, and class types can be used in collections, too.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">animal: Animal = Cat()</span><br><span class="line">cats: <span class="built_in">list</span>[Cat] = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Type alias</span></span><br><span class="line">CatList = <span class="built_in">list</span>[Cat]</span><br><span class="line">cats: CatList = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forward reference</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>() -&gt; <span class="string">&#x27;Dog&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Dog()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_list</span>() -&gt; <span class="built_in">list</span>[<span class="string">&#x27;Dog&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><p>Type alias is useful for shortening the type definition. And notice the quotes around <code>Dog</code>. It is called forward reference, that allows you to refer to a type that has not yet been fully defined. In a future version, possibly Python 3.12, the quotes may be omitted.</p><p>Another useful utility from <code>typing</code> module is <code>TypedDict</code>. <code>dict</code> is a frequently used data structure in Python, so it would be nice to explicitly define the fields and types in it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    x: <span class="built_in">int</span></span><br><span class="line">    y: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">p1: Point = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">p2 = Point(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>TypedDict</code> is like a regular <code>dict</code> at runtime, only the type checker would see the difference. Another option is to use Python <a href="https://docs.python.org/3.10/library/dataclasses.html">dataclass</a> to define DTO (Data Transfer Object). Mypy has <a href="https://mypy.readthedocs.io/en/stable/additional_features.html#dataclasses">full support</a> for it, too.</p><h2 id="Advanced-features"><a href="#Advanced-features" class="headerlink" title="Advanced features"></a>Advanced features</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p><code>list</code> is a generic class, and the <code>str</code> in <code>list[str]</code> is called a type parameter. So generics are useful when the class is a kind of container, and does not care about the type of elements it contains. We can easily write a generic class on our own. Say we want to wrap a variable of arbitrary type and log a message when its value is changed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Generic</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggedVar</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value: T</span>):</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, new: T</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Set value to <span class="subst">&#123;new&#125;</span>, previous value is <span class="subst">&#123;self.value&#125;</span>&#x27;</span>)</span><br><span class="line">        self.value = new</span><br><span class="line"></span><br><span class="line">v = LoggedVar[<span class="built_in">int</span>](<span class="number">1</span>)</span><br><span class="line">v.<span class="built_in">set</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>We can define functions that deal with generic classes. For instance, to return the first element of any sequence-like data structure:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">seq: <span class="type">Sequence</span>[T]</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(first([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(first(<span class="string">&#x27;abc&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>Sequence</code> is an abstract base class, which we will discuss in the next section. <code>list</code> and <code>str</code> are both subclasses of <code>Sequence</code>, so they can be accepted by the function <code>first</code>.</p><p>Type parameter can also have a bound, meaning it must be a subclass of a particular type:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Sized</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>, bound=Sized)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longer</span>(<span class="params">x: T, y: T</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="built_in">len</span>(y):</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(longer([<span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(longer([<span class="number">1</span>], &#123;<span class="number">1</span>, <span class="number">2</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(longer([<span class="number">1</span>], <span class="string">&#x27;ab&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>list</code>, <code>set</code>, and <code>str</code> are all subclasses of <code>Sized</code>, in that they all have a <code>__len__</code> method, so they can be passed to <code>longer</code> and <code>len</code> without problem.</p><h3 id="Abstract-base-class"><a href="#Abstract-base-class" class="headerlink" title="Abstract base class"></a>Abstract base class</h3><p><code>Sequence</code> and <code>Sized</code> are both abstract base classes, or ABC. As the name indicates, the class contains abstract methods and is supposed to be inherited from. There are plenty of predefined collection ABCs in <a href="https://docs.python.org/3.10/library/collections.abc.html">collections.abc</a> module, and they form a hierarchy of collection types in Python:</p><p><img src="/images/python-typing/collection-types.png" alt="Python collection types"></p><p>Mypy understands ABC, so it is a good practice to declare function arguments with a more general type like <code>Iterable[int]</code>, so that both <code>list[int]</code> and <code>set[int]</code> are acceptable. To write a custom class that behaves like <code>Iterable</code>, subclass it and provide the required methods.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Sized, Iterable, Iterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bucket</span>(Sized, Iterable[<span class="built_in">int</span>]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>([])</span><br><span class="line"></span><br><span class="line">bucket: Iterable[<span class="built_in">int</span>] = Bucket()</span><br></pre></td></tr></table></figure><h3 id="Duck-typing"><a href="#Duck-typing" class="headerlink" title="Duck typing"></a>Duck typing</h3><p>In the previous code listing, what if I remove the base class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bucket</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>) -&gt; Iterator[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>([])</span><br><span class="line"></span><br><span class="line">bucket: Iterable[<span class="built_in">int</span>] = Bucket()  <span class="comment"># Error?</span></span><br></pre></td></tr></table></figure><p>Is the class instance still assignable to <code>Iterable[int]</code>? The answer is yes, because <code>Bucket</code> class would behave like an <code>Iterable[int]</code>, in that it contains a method <code>__iter__</code> and its return value is of correct type. It is called duck typing: If it walks like a duck and quacks like a duck, then it must be a duck. Duck typing only works for simple ABCs, like <code>Iterable</code>, <code>Collection</code>. In Python, there is a dedicated name for this feature, <a href="https://docs.python.org/3.10/library/typing.html#typing.Protocol">Protocol</a>. Simply put, if the class defines required methods, mypy would consider it as the corresponding type.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sized</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Container[T]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, x: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collection[T]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>) -&gt; Iterator[T]: ...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, x: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>: ...</span><br></pre></td></tr></table></figure><p>It is also possible to define your own Protocol:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Protocol</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Closeable</span>(<span class="title class_ inherited__">Protocol</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close_all</span>(<span class="params">resources: Iterable[Closeable]</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> resources:</span><br><span class="line">        r.close()</span><br><span class="line"></span><br><span class="line">close_all([Resource()])  <span class="comment"># OK</span></span><br></pre></td></tr></table></figure><h3 id="Runtime-validation"><a href="#Runtime-validation" class="headerlink" title="Runtime validation"></a>Runtime validation</h3><p>Type hints are mostly used in static type check, and do not work at runtime. To check variable types at runtime, we can either write code on our own, i.e. <code>isinstance</code>, or use third-party libraries. Two popular choices are <a href="https://github.com/agronholm/typeguard">typeguard</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typeguard <span class="keyword">import</span> typechecked</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>: ...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>): ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@typechecked</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_function</span>(<span class="params">animals: <span class="type">Sequence</span>[Animal]</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">some_function([<span class="number">1</span>])</span><br><span class="line"><span class="comment"># TypeCheckError: item 0 of argument &quot;animals&quot; (list) is not an instance of Animal</span></span><br></pre></td></tr></table></figure><p>And <a href="https://github.com/pydantic/pydantic">pydantic</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    x: <span class="built_in">float</span></span><br><span class="line">    y: <span class="built_in">float</span></span><br><span class="line"></span><br><span class="line">p = Point(x=<span class="string">&#x27;1.23&#x27;</span>, y=<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment"># ValidationError: 1 validation error for Point y</span></span><br><span class="line"><span class="comment"># Input should be a valid number, unable to parse string as a number</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.python.org/3.10/library/typing.html">https://docs.python.org/3.10/library/typing.html</a></li><li><a href="https://mypy.readthedocs.io/en/stable/index.html">https://mypy.readthedocs.io/en/stable/index.html</a></li><li><a href="https://typing.readthedocs.io/en/latest/">https://typing.readthedocs.io/en/latest/</a></li><li><a href="https://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">https://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/</a></li><li><a href="https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy/">https://blog.zulip.com/2016/10/13/static-types-in-python-oh-mypy/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python is by design a dynamically typed programming language. It is flexible and easy to write. But as the project size grows, there will be more interactions between functions, classes and modules, and we often make mistakes like passing wrong types of arguments or assuming different return types from function calls. Worse still, these mistakes can only be spotted at runtime, and are likely to cause production bugs. Is it possible for Python to support static typing like Java and Go, checking errors at compile time, while remaining to be easy to use? Fortunately, from Python 3.5 on, it supports an optional syntax, or type hints, for static type check, and many tools are built around this feature. This article covers the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A quick start to do static type check in Python.&lt;/li&gt;
&lt;li&gt;Why do we need static typing?&lt;/li&gt;
&lt;li&gt;Python type hints in detail.&lt;/li&gt;
&lt;li&gt;Other advanced features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/python-typing/mypy.png&quot; alt=&quot;Mypy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Quick-start&quot;&gt;&lt;a href=&quot;#Quick-start&quot; class=&quot;headerlink&quot; title=&quot;Quick start&quot;&gt;&lt;/a&gt;Quick start&lt;/h2&gt;&lt;p&gt;Static typing can be achieved by adding type hints to function arguments and return value, while using a tool like &lt;a href=&quot;https://mypy-lang.org/&quot;&gt;mypy&lt;/a&gt; to do the check. For instance:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;greeting&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;hello &amp;#x27;&lt;/span&gt; + name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here the function &lt;code&gt;greeting&lt;/code&gt; accepts an argument which is typed as &lt;code&gt;str&lt;/code&gt;, and its return value is also typed &lt;code&gt;str&lt;/code&gt;. Run &lt;code&gt;pip install mypy&lt;/code&gt;, and then check the file:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% mypy quickstart.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Success: no issues found in 1 source file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Clearly this simple function would pass the check. Let’s add some erroneous code:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;greeting&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    real_name = name + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;hello &amp;#x27;&lt;/span&gt; + real_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;greeting(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;greeting(&lt;span class=&quot;string&quot;&gt;&amp;#x27;world&amp;#x27;&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There will be plenty of errors found by mypy:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% mypy quickstart.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quickstart.py:2: error: Unsupported operand types for + (&amp;quot;str&amp;quot; and &amp;quot;int&amp;quot;)  [operator]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quickstart.py:5: error: Argument 1 to &amp;quot;greeting&amp;quot; has incompatible type &amp;quot;int&amp;quot;; expected &amp;quot;str&amp;quot;  [arg-type]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quickstart.py:6: error: Unsupported operand types for + (&amp;quot;str&amp;quot; and &amp;quot;int&amp;quot;)  [operator]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Found 3 errors in 1 file (checked 1 source file)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The error messages are pretty clear. Usually we use pre-commit hook and CI to ensure everything checked into Git or merged into &lt;code&gt;master&lt;/code&gt; passes &lt;code&gt;mypy&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="mypy" scheme="https://shzhangji.com/tags/mypy/"/>
    
  </entry>
  
  <entry>
    <title>Migrate from Pip requirements.txt to Poetry</title>
    <link href="https://shzhangji.com/blog/2024/01/05/migrate-from-pip-requirements-txt-to-poetry/"/>
    <id>https://shzhangji.com/blog/2024/01/05/migrate-from-pip-requirements-txt-to-poetry/</id>
    <published>2024-01-05T10:04:24.000Z</published>
    <updated>2024-01-05T10:04:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dependency management is a critical part of project development. If it were done wrong, project would behave differently between development and production environments. With Python, we have the tool <code>virtualenv</code> that isolates the project’s environment from the system’s, and we use <code>pip</code> and a <code>requirement.txt</code> file to maintain the list of dependencies. For instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flask==3.0.0</span><br><span class="line">Flask-SQLAlchemy==3.1.1</span><br><span class="line">-e .</span><br></pre></td></tr></table></figure><p>And the environment can be setup by:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% python3 -m venv venv</span><br><span class="line">% source venv/bin/activate</span><br><span class="line">(venv) % pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="Disadvantages-of-the-requirements-txt-approach"><a href="#Disadvantages-of-the-requirements-txt-approach" class="headerlink" title="Disadvantages of the requirements.txt approach"></a>Disadvantages of the <code>requirements.txt</code> approach</h2><p>There are several shortcomings of this method. First and the major problem is this file only contains the <em>direct</em> dependencies, not the transitive ones. <code>pip freeze</code> shows that Flask and Flask-SQLAlchemy depend on several other packages:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% pip freeze</span><br><span class="line">Flask==3.0.0</span><br><span class="line">Werkzeug==3.0.1</span><br><span class="line">Jinja2==3.1.2</span><br><span class="line">Flask-SQLAlchemy==3.1.1</span><br><span class="line">SQLAlchemy==2.0.25</span><br><span class="line">-e git+ssh://git@github.com/jizhang/blog-demo@82e4b4c4c6e72ed44e0cce9ee45aca5abc4dc87b#egg=poetry_demo&amp;subdirectory=poetry-demo</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Take Werkzeug for an example. It is required by Flask, and its version is stated as <code>Werkzeug&gt;=3.0.0</code> in Flask’s <a href="https://github.com/pallets/flask/blob/735a4701d6d5e848241e7d7535db898efb62d400/pyproject.toml#L23">project file</a>. This may cause a problem when Werkzeug bumps its version to 4.x and after a reinstallation of the project, it will download the latest version of Werkzeug and create a compatibility issue. Same thing may happen to Flask-SQLAlchemy since functions of SQLAlchemy may vary between major versions.</p><p>A possible solution is to freeze the dependencies altogether:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure><p>This is practically the <em>lockfile</em> we see in other languages like <code>yarn.lock</code> and <code>Gemfile.lock</code>, whereby the installation process is fully reproducible. But for Python, we need extra effort to ensure that the <code>requirements.txt</code> is updated correctly after modifying the dependencies. And it also makes it difficult to upgrade the direct dependencies because the transitive ones need to be upgraded manually.</p><span id="more"></span><p>Another problem of <code>requirements.txt</code> is when we need to maintain different dependencies across environments. For instance, in development we may want to include <code>ruff</code> and <code>mypy</code>, and in production, <code>gunicorn</code> is required. In practice, we create two separate files for this purpose, the <code>requirements.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flask==3.0.0</span><br><span class="line">gunicorn==21.2.0</span><br><span class="line">-e .</span><br></pre></td></tr></table></figure><p>And <code>requirements-dev.txt</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruff==0.1.11</span><br><span class="line">mypy==1.8.0</span><br></pre></td></tr></table></figure><p>Then add a <code>Makefile</code> to facilitate the installation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">        venv/bin/pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">dev:</span><br><span class="line">        venv/bin/pip install -r requirements.txt -r requirements-dev.txt</span><br></pre></td></tr></table></figure><h2 id="Lock-dependency-versions-with-poetry-lock"><a href="#Lock-dependency-versions-with-poetry-lock" class="headerlink" title="Lock dependency versions with poetry.lock"></a>Lock dependency versions with <code>poetry.lock</code></h2><p>Though <code>requirements.txt</code> has some problems, we have been using this approach in production for years. And thanks to the opensource community, we now have a better option, <a href="https://python-poetry.org/">Poetry</a>. I would like to call it <a href="https://yarnpkg.com/">Yarn</a> for Python, because I maintain several frontend projects and always hope there would a tool that is as effective and easy-to-use as Yarn. With Poetry, we can simply use <code>poetry install</code> to lock dependency versions. And it does much more than that.</p><p><img src="/images/poetry.png" alt="Poetry"></p><p>There are several ways to install Poetry. One can follow the instructions on its <a href="https://python-poetry.org/docs/#installation">official documentation</a>. For Homebrew users, simply use <code>brew install poetry</code>. Later in this article I will discuss how to use Poetry when deploying application with Docker. Here are some frequently used commands:</p><ul><li><code>poetry init</code> starts an interactive tool to initialize an existing project. When finished, it will generate a <code>pyproject.toml</code> file at the root of the project.</li><li><code>poetry install</code> creates a virtual environment, installs dependencies according to the specification in <code>pyproject.toml</code>, and writes the <code>poetry.lock</code> file. Make sure you commit this file to the repository, so that other people can install the exact same versions when they clone your repository and run <code>poetry install</code>.</li><li><code>poetry add flask</code> adds the latest version of Flask to project’s dependencies. The preferable way to specify version is using the caret symbol with <a href="https://semver.org/">Semantic Versioning</a>. For example <code>^3.0.0</code> means the version ranges from <code>3.0.0</code> (inclusive) to <code>4.0.0</code> (exclusive).</li><li><code>poetry lock</code> should be used when you have manually edited the <code>pyproject.toml</code> file, so that <code>poetry.lock</code> can be updated accordingly.</li><li><code>poetry run flask run</code> starts the Flask development server within the virtualenv.</li></ul><h2 id="Where-is-the-virtual-environment"><a href="#Where-is-the-virtual-environment" class="headerlink" title="Where is the virtual environment?"></a>Where is the virtual environment?</h2><p>Unlike the traditional approach, Poetry does not create a <code>venv</code> folder in project’s root. Instead, it collects all virtual environments in one place, for different projects and different Python versions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% ls $(poetry config virtualenvs.path)</span><br><span class="line">poetry-demo-uxUFVcdN-py3.11</span><br><span class="line">poetry-demo-uxUFVcdN-py3.12</span><br><span class="line">timetable-i_YWx-to-py3.11</span><br></pre></td></tr></table></figure><p>When you have <code>python3.11</code> and <code>python3.12</code> in the <code>PATH</code>, you can use <code>poetry env use 3.12</code> to switch versions. Poetry also works with <a href="https://github.com/pyenv/pyenv">pyenv</a>, or even <a href="https://python-poetry.org/docs/managing-environments/#switching-between-environments">custom-built Python binary</a>.</p><p>If you prefer creating the virtual environment under the project’s directory, set <code>virtualenvs.in-project</code> to <code>true</code>. Configurations are by default set globally. Add <code>--local</code> to set it <a href="https://python-poetry.org/docs/configuration/#local-configuration">locally in the project</a>. Another option is to create virtualenv on your own. Make sure the folder is named <code>.venv</code> and Poetry will automatically pick it up.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">% poetry env remove --all</span><br><span class="line">Deleted virtualenv: poetry-demo-uxUFVcdN-py3.11</span><br><span class="line">Deleted virtualenv: poetry-demo-uxUFVcdN-py3.12</span><br><span class="line">% poetry config virtualenvs.in-project true</span><br><span class="line">% poetry install</span><br><span class="line">Creating virtualenv poetry-demo in /poetry-demo/.venv</span><br></pre></td></tr></table></figure><p>We can also install dependencies into the system’s environment. We will look into that in the Docker section.</p><h2 id="Manage-dependencies-for-different-environments"><a href="#Manage-dependencies-for-different-environments" class="headerlink" title="Manage dependencies for different environments"></a>Manage dependencies for different environments</h2><p>As mentioned above, we need different dependencies for development and production environment. Specifically, we want <code>Flask</code>, <code>ruff</code>, <code>mypy</code> to be installed in development environment, and <code>Flask</code>, <code>gunicorn</code> to be installed in production. To achieve that, we put <code>ruff</code> and <code>mypy</code> in a dependency group named <code>dev</code>, and specify <code>gunicorn</code> as a package extra. Here’s what we do in the <code>pyproject.toml</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;^3.11&quot;</span></span><br><span class="line"><span class="attr">flask</span> = <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line"><span class="attr">gunicorn</span> = &#123;version = <span class="string">&quot;^21.2.0&quot;</span>, optional = <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.group.dev.dependencies]</span></span><br><span class="line"><span class="attr">ruff</span> = <span class="string">&quot;^0.1.11&quot;</span></span><br><span class="line"><span class="attr">mypy</span> = <span class="string">&quot;^1.8.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.extras]</span></span><br><span class="line"><span class="attr">gunicorn</span> = [<span class="string">&quot;gunicorn&quot;</span>]</span><br></pre></td></tr></table></figure><p>In development environment, we simply use <code>poetry install</code>. In production, use the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install --without dev --extras gunicorn</span><br></pre></td></tr></table></figure><h2 id="Deploy-application-with-Poetry-and-Docker"><a href="#Deploy-application-with-Poetry-and-Docker" class="headerlink" title="Deploy application with Poetry and Docker"></a>Deploy application with Poetry and Docker</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> POETRY_HOME=/opt/poetry</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m venv <span class="variable">$POETRY_HOME</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/pip install poetry==1.7.1 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/poetry config virtualenvs.create <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="variable">$POETRY_HOME</span>/bin/poetry install --without dev --extras gunicorn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> poetrydemo/ ./poetrydemo/</span></span><br></pre></td></tr></table></figure><ul><li>It is advised to <a href="https://python-poetry.org/docs/#installation">install Poetry in a dedicated virtual environment</a>, so we create one and install Poetry via <code>pip</code>.</li><li>Since the container only has one application, it is safe to install project’s dependencies into the system environment. Simply set <code>virtualenvs.create</code> to <code>false</code>. Or you can let Poetry create a dedicated one for the project.</li><li>Project code resides in <code>/app</code>, and it is set as the working directory. So when <code>gunicorn</code> is called, which is available at system level, it can find <code>poetrydemo</code> package without problem.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% docker build -t poetrydemo .</span><br><span class="line">% docker run -p 8000:8000 poetrydemo gunicorn -b 0.0.0.0:8000 poetrydemo:app</span><br></pre></td></tr></table></figure><h2 id="Use-a-PyPI-mirror"><a href="#Use-a-PyPI-mirror" class="headerlink" title="Use a PyPI mirror"></a>Use a PyPI mirror</h2><p>Last but not least, if you are in an area where internet access is restricted, the usual mirror config in <code>~/.pip/pip.conf</code> does not work, since <a href="https://github.com/python-poetry/poetry/issues/1554#issuecomment-553113626">Poetry only processes its own config files</a>. To use a mirror for PyPI, add the following config into <code>pyproject.toml</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span></span><br><span class="line"><span class="attr">priority</span> = <span class="string">&quot;default&quot;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://unbiased-coder.com/python-poetry-vs-pip/">https://unbiased-coder.com/python-poetry-vs-pip/</a></li><li><a href="https://kennethreitz.org/essays/2016/02/25/a-better-pip-workflow">https://kennethreitz.org/essays/2016/02/25/a-better-pip-workflow</a></li><li><a href="https://github.com/pdm-project/pdm#comparisons-to-other-alternatives">https://github.com/pdm-project/pdm#comparisons-to-other-alternatives</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dependency management is a critical part of project development. If it were done wrong, project would behave differently between development and production environments. With Python, we have the tool &lt;code&gt;virtualenv&lt;/code&gt; that isolates the project’s environment from the system’s, and we use &lt;code&gt;pip&lt;/code&gt; and a &lt;code&gt;requirement.txt&lt;/code&gt; file to maintain the list of dependencies. For instance:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Flask==3.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-SQLAlchemy==3.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;And the environment can be setup by:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% python3 -m venv venv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;% source venv/bin/activate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(venv) % pip install -r requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;Disadvantages-of-the-requirements-txt-approach&quot;&gt;&lt;a href=&quot;#Disadvantages-of-the-requirements-txt-approach&quot; class=&quot;headerlink&quot; title=&quot;Disadvantages of the requirements.txt approach&quot;&gt;&lt;/a&gt;Disadvantages of the &lt;code&gt;requirements.txt&lt;/code&gt; approach&lt;/h2&gt;&lt;p&gt;There are several shortcomings of this method. First and the major problem is this file only contains the &lt;em&gt;direct&lt;/em&gt; dependencies, not the transitive ones. &lt;code&gt;pip freeze&lt;/code&gt; shows that Flask and Flask-SQLAlchemy depend on several other packages:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% pip freeze&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask==3.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Werkzeug==3.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jinja2==3.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-SQLAlchemy==3.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQLAlchemy==2.0.25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e git+ssh://git@github.com/jizhang/blog-demo@82e4b4c4c6e72ed44e0cce9ee45aca5abc4dc87b#egg=poetry_demo&amp;amp;subdirectory=poetry-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Take Werkzeug for an example. It is required by Flask, and its version is stated as &lt;code&gt;Werkzeug&amp;gt;=3.0.0&lt;/code&gt; in Flask’s &lt;a href=&quot;https://github.com/pallets/flask/blob/735a4701d6d5e848241e7d7535db898efb62d400/pyproject.toml#L23&quot;&gt;project file&lt;/a&gt;. This may cause a problem when Werkzeug bumps its version to 4.x and after a reinstallation of the project, it will download the latest version of Werkzeug and create a compatibility issue. Same thing may happen to Flask-SQLAlchemy since functions of SQLAlchemy may vary between major versions.&lt;/p&gt;
&lt;p&gt;A possible solution is to freeze the dependencies altogether:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;% pip freeze &amp;gt;requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This is practically the &lt;em&gt;lockfile&lt;/em&gt; we see in other languages like &lt;code&gt;yarn.lock&lt;/code&gt; and &lt;code&gt;Gemfile.lock&lt;/code&gt;, whereby the installation process is fully reproducible. But for Python, we need extra effort to ensure that the &lt;code&gt;requirements.txt&lt;/code&gt; is updated correctly after modifying the dependencies. And it also makes it difficult to upgrade the direct dependencies because the transitive ones need to be upgraded manually.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="poetry" scheme="https://shzhangji.com/tags/poetry/"/>
    
    <category term="pip" scheme="https://shzhangji.com/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Setup CI with GitHub Actions (Java/Node/Python)</title>
    <link href="https://shzhangji.com/blog/2023/02/13/setup-ci-with-github-actions-java-node-python/"/>
    <id>https://shzhangji.com/blog/2023/02/13/setup-ci-with-github-actions-java-node-python/</id>
    <published>2023-02-13T10:36:12.000Z</published>
    <updated>2023-02-13T10:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Continuous integration, or CI, is a great tool to maintain a healthy code base. As in <a href="https://github.com/okonet/lint-staged">lint-staged</a>‘s motto, “don’t let 💩 slip into your code base”, CI can run various checks to prevent compilation error, unit test failure, or violation of code style from being merged into the main branch. Besides, CI can also do the packaging work, making artifacts that are ready to be deployed to production. In this article, I’ll demonstrate how to use <a href="https://docs.github.com/en/actions">GitHub Actions</a> to define CI workflow that checks and packages Java&#x2F;Node&#x2F;Python applications.</p><p><img src="/images/ci-with-github-actions.png" alt="CI with GitHub Actions"></p><h2 id="Run-Maven-verify-on-push"><a href="#Run-Maven-verify-on-push" class="headerlink" title="Run Maven verify on push"></a>Run Maven verify on push</h2><p>CI typically has two phases, one is during development and before merging into the master, the other is right after the feature branch is merged. Former only requires checking the code, i.e. build the newly pushed code in a branch, and see if there’s any violation or bug. After it’s merged, CI will run checking <em>and</em> packaging altogether, to produce a deployable artifact, usually a Docker image.</p><p>For Java project, we use JUnit, Checkstyle and SpotBugs as Maven plugins to run various checks whenever someone pushes to a feature branch. To do that with GitHub Actions, we need to create a workflow that includes setting up Java environment and running <code>mvn verify</code>. Here’s a minimum workflow definition in <code>project-root/.github/workflows/build.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">temurin</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">--batch-mode</span> <span class="string">verify</span></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><code>on: push</code> defines the <a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">trigger</a> of the workflow. Whenever there’s a new commit pushed to any branch, the workflow will run. You can limit the branches that trigger this workflow, or use some other events like <code>pull_request</code>.</li><li><code>verify</code> is the name of a job we define in this workflow. A workflow can have multiple jobs, we’ll add another one named <code>build</code> very soon. Jobs are executed in parallel by default, that’s why <code>jobs</code> is a mapping instead of a sequence. But we can add dependencies between jobs, as well as conditions that may prevent a job from running.</li><li>A job consists of severl <code>steps</code>, here we’ve defined three. A step can either be a command, indicated by <code>run</code>; or use of a predefined set of code, named “action”, indicated by <code>uses</code>. There’re tons of official and third-party actions we can use to build up a workflow. We can also build our own actions to share in a corporation.</li><li><a href="https://github.com/actions/checkout">actions&#x2F;checkout</a> merely checks out the code into workspace for further use. It only checks out the one commit that triggers this workflow. It’s also a good practice to pin the version of an action, as in <code>actions/checkout@v3</code>.</li><li><a href="https://github.com/actions/setup-java">actions&#x2F;setup-java</a> creates the specific JDK environment for us. <code>cache: maven</code> is important here because it utilizes the <a href="https://github.com/actions/cache">actions&#x2F;cache</a> to upload Maven dependencies to GitHub’s cache server, so that they don’t need to be downloaded from the central repository again. The cache key is based on the content of <code>pom.xml</code>, and there’re several rules of <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">cache sharing between branches</a>.</li></ul><h2 id="Initialize-service-containers-for-testing"><a href="#Initialize-service-containers-for-testing" class="headerlink" title="Initialize service containers for testing"></a>Initialize service containers for testing</h2><p>During the test phase, we oftentimes need a local database service to run the unit tests, integration tests, etc., and GitHub Actions comes with a ready-made solution for this purpose, viz. <a href="https://docs.github.com/en/actions/using-containerized-services/about-service-containers">Containerized services</a>. Here is a minimum example of spinning up a Redis instance within a job:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><p>Before running the <code>verify</code> job, the runner, with Docker already installed, starts up a Redis container and maps its port to the host, in this case <code>6379</code>. Then any process in the runner can access Redis via <code>localhost:6379</code>. Mind that containers take time to start, and sometimes the starting process is long, so GitHub Actions uses <code>docker inspect</code> to ensure container has entered the <code>healthy</code> state before it makes headway to the next step. So we need to set <a href="https://docs.docker.com/engine/reference/commandline/run/"><code>--health-cmd</code></a> for our services:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">  <span class="attr">options:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    --health-cmd &quot;redis-cli ping&quot;</span></span><br><span class="line"><span class="string">    --health-interval 10s</span></span><br><span class="line"><span class="string">    --health-timeout 5s</span></span><br><span class="line"><span class="string">    --health-retries 5</span></span><br></pre></td></tr></table></figure><p>This is especially important for the MySQL service we are about to setup, because it usually takes more time to start up:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">MYSQL_DATABASE:</span> <span class="string">project_test</span></span><br><span class="line">          <span class="attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">options:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">          --health-cmd=&quot;mysqladmin ping&quot;</span></span><br><span class="line"><span class="string">          --health-interval=10s</span></span><br><span class="line"><span class="string">          --health-timeout=5s</span></span><br><span class="line"><span class="string">          --health-retries=5</span></span><br></pre></td></tr></table></figure><h2 id="Share-artifacts-between-jobs"><a href="#Share-artifacts-between-jobs" class="headerlink" title="Share artifacts between jobs"></a>Share artifacts between jobs</h2><p>After <code>mvn verify</code>, there’ll be an uber JAR in <code>target/project-1.0-SNAPSHOT.jar</code>, and we want to build it into a Docker image for deployment. We’re going to create a separate job for this task, but the first thing we need to do is to transfer the JAR file from the <code>verify</code> job <em>to</em> the new <code>build</code> job, because jobs in a workflow are executed independently and in parallel, so we also need to tell the runner that <code>build</code> is dependent on <code>verify</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">JAR_FILE:</span> <span class="string">project-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">--batch-mode</span> <span class="string">verify</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">target/$&#123;&#123;</span> <span class="string">env.JAR_FILE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">retention-days:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">verify</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br></pre></td></tr></table></figure><ul><li><code>env</code> is a place to set common variables within workflow. Here we use it for the filename of the JAR. We’ll see more use of it in the <code>build</code> job.</li><li><code>actions/upload-artifact</code> and its counterpart <code>download-artifact</code> are used to share files between jobs, aka., artifact. It can be a single file or a directory, identified by the <code>name</code>. Artifacts can only be shared within the same <em>workflow run</em>. Once uploaded, they are accessible through GitHub UI as well. There’re more examples in the <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts">documentation</a>.</li><li><code>needs</code> creates a dependency between <code>verify</code> and <code>build</code>, so that they are executed sequentially.</li></ul><h2 id="Build-Docker-image-for-deployment"><a href="#Build-Docker-image-for-deployment" class="headerlink" title="Build Docker image for deployment"></a>Build Docker image for deployment</h2><p>Let’s take Spring Boot project for an example. There’re some <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/container-images.html">guidelines</a> on how to efficiently build the packaged JAR into a layered Docker image, with the built-in tool provided by Spring Boot. The full Dockerfile can be found in the above link. One thing we care about is the <code>JAR_FILE</code> argument:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17</span>-jre as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> application</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE=target/*.jar</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> application.jar</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>For the <code>build</code> job, the <code>docker</code> CLI is already installed in the runner, but we still need to take care of something like logging into Docker repository, tagging the image, etc. Fortunately there’re some <code>actions</code> for these purposes. Besides, we’re not going to push our image into Docker hub. Instead, we use the <a href="https://docs.github.com/en/packages">GitHub Packages</a> service. Here’s the full definition of the <code>build</code> job:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">REGISTRY:</span> <span class="string">ghcr.io</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">JAR_FILE:</span> <span class="string">project-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">verify</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">registry:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.actor</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/metadata-action@v4</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">images:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;/$&#123;&#123;</span> <span class="string">env.IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">type=sha</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">JAR_FILE=$&#123;&#123;</span> <span class="string">env.JAR_FILE</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>if</code> statement indicates this job is only executed under certain circumstances. In this case, only run on <code>master</code> branch. There’re other <a href="https://docs.github.com/en/actions/learn-github-actions/contexts">conditions</a> you can use, and <code>if</code> can also be added in <code>step</code>. Say only upload artifact when the <code>verify</code> job is executed on <code>master</code> branch.</li><li><code>docker/login-action</code> setups the credentials for logging into GitHub Packages. The <code>GITHUB_TOKEN</code> is automatically generated and its permissions can be controlled in the <a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository">Settings</a>.</li><li><code>docker/metadata-action</code> is used to extract meta data from the repository. In this example, I’m using the Git short commit as the Docker image tag, i.e. <code>sha-729b875</code>, and this action helps me to extract this information from the Git repository and exposes it as the <a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs">output</a>, which is another feature that GitHub Actions provides for sharing information between steps and jobs. To be more specific:<ul><li><code>metadata-action</code> will generate a list of tags based on the <code>images</code> and <code>tags</code> parameters. The above configuration will generate something like <code>ghcr.io/jizhang/proton:sha-729b875</code>. Other options can be found in this <a href="https://github.com/docker/metadata-action">link</a>.</li><li>We give this step an <code>id</code>, which is <code>meta</code>, and then access its output via <code>steps.meta.outputs.tags</code>.</li><li>The parameter <code>images</code>, <code>tags</code>, and <code>tags</code> in <code>build-push-action</code> all support multi-line string so that multiple tags can be published.</li></ul></li><li><code>docker/build-push-action</code> does the build-and-push job. The Dockerfile should be in the project root, and we pass the <code>JAR_FILE</code> argument which points to the artifact that we’ve downloaded from the previous job.</li></ul><p>If built successfully, the Docker image can be found in your Profile - Packages. Here’s the <a href="https://github.com/jizhang/proton-server/blob/32b5a28f5c7227d74557a1e80dc6579b345487a1/.github/workflows/build.yml">full example</a> of using GitHub Actions with a Java project. The final pipeline looks like this:</p><p><img src="/images/github-actions-java.png" alt="GitHub Actions with Java project"></p><h2 id="Setup-CI-for-Node-js-project"><a href="#Setup-CI-for-Node-js-project" class="headerlink" title="Setup CI for Node.js project"></a>Setup CI for Node.js project</h2><p>Similarly, we create two jobs for testing and building. In the <code>test</code> job, we use the official <code>setup-node</code> action to install specific Node.js version. It also privodes cache facility for <code>yarn</code>, <code>npm</code> package managers.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;18&#x27;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">lint:ci</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">build/Dockerfile</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The build output is generaly in the <code>dist</code> directory, so we just copy it onto an Nginx image and publish to GitHub Packages. I also have a <a href="https://github.com/jizhang/proton/blob/2da93e759861236099983955ef4964958a70248d/.github/workflows/build.yml">project</a> for demonstration.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.17</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> build/nginx/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> dist/ /app/</span></span><br></pre></td></tr></table></figure><h2 id="Setup-CI-for-Python-project"><a href="#Setup-CI-for-Python-project" class="headerlink" title="Setup CI for Python project"></a>Setup CI for Python project</h2><p>For Python project, one of the popular dependency management tools is <a href="https://python-poetry.org/">Poetry</a>, and the official <code>setup-python</code> action provides out-of-the-box caching for Poetry-managed virtual environment. Here’s the abridged <code>build.yml</code>, full file can be found in this <a href="https://github.com/jizhang/timetable/blob/63a77df1a2f0df4d1e816e60211f1e960441029b/.github/workflows/build.yml">link</a>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">PYTHON_VERSION:</span> <span class="string">&#x27;3.10&#x27;</span></span><br><span class="line">  <span class="attr">POETRY_VERSION:</span> <span class="string">&#x27;1.3.2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">pipx</span> <span class="string">install</span> <span class="string">poetry==$&#123;&#123;</span> <span class="string">env.POETRY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.PYTHON_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">poetry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">run</span> <span class="string">ruff</span> <span class="string">timetable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">run</span> <span class="string">mypy</span> <span class="string">timetable</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            PYTHON_VERSION=$&#123;&#123; env.PYTHON_VERSION &#125;&#125;</span></span><br><span class="line"><span class="string">            POETRY_VERSION=$&#123;&#123; env.POETRY_VERSION &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>But for the <code>build</code> job, Python is different from the aforementioned projects in that it doesn’t produce bundle files like JAR or minified JS. So we have to invoke Poetry inside the Dockerfile to install the project dependencies, which makes the Dockerfile a bit more complicated:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> PYTHON_VERSION</span><br><span class="line"><span class="keyword">FROM</span> python:$&#123;PYTHON_VERSION&#125;-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> POETRY_VERSION</span><br><span class="line"><span class="keyword">ENV</span> POETRY_HOME=/opt/poetry</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m venv <span class="variable">$POETRY_HOME</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/pip install poetry==<span class="variable">$&#123;POETRY_VERSION&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/poetry config virtualenvs.create <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="variable">$POETRY_HOME</span>/bin/poetry install --extras gunicorn --without dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> timetable/ ./timetable/</span></span><br></pre></td></tr></table></figure><ul><li>According to the guidelines, Poetry should be installed in a separate virtual environment. Using <code>pipx</code> also works.</li><li>For project dependencies however, we install them directly into the system level Python, because this container is only used by one application. Setting <code>virtualenvs.create</code> to <code>false</code> tells Poetry to skip creating new environment for us.</li><li>When installing dependencies, we skip the ones for development and include the <code>gunicorn</code> WSGI server. Check out the documentation of Poetry and the sample project’s <a href="https://github.com/jizhang/timetable/blob/63a77df1a2f0df4d1e816e60211f1e960441029b/pyproject.toml">pyproject.toml</a> file for more information.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven">https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven</a></li><li><a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">https://docs.github.com/en/actions/publishing-packages/publishing-docker-images</a></li><li><a href="https://endjin.com/blog/2022/09/continuous-integration-with-github-actions">https://endjin.com/blog/2022/09/continuous-integration-with-github-actions</a></li><li><a href="https://github.com/vuejs/vue/blob/v2.7.14/.github/workflows/ci.yml">https://github.com/vuejs/vue/blob/v2.7.14/.github/workflows/ci.yml</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Continuous integration, or CI, is a great tool to maintain a healthy code base. As in &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt;‘s motto, “don’t let 💩 slip into your code base”, CI can run various checks to prevent compilation error, unit test failure, or violation of code style from being merged into the main branch. Besides, CI can also do the packaging work, making artifacts that are ready to be deployed to production. In this article, I’ll demonstrate how to use &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt; to define CI workflow that checks and packages Java&amp;#x2F;Node&amp;#x2F;Python applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ci-with-github-actions.png&quot; alt=&quot;CI with GitHub Actions&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Run-Maven-verify-on-push&quot;&gt;&lt;a href=&quot;#Run-Maven-verify-on-push&quot; class=&quot;headerlink&quot; title=&quot;Run Maven verify on push&quot;&gt;&lt;/a&gt;Run Maven verify on push&lt;/h2&gt;&lt;p&gt;CI typically has two phases, one is during development and before merging into the master, the other is right after the feature branch is merged. Former only requires checking the code, i.e. build the newly pushed code in a branch, and see if there’s any violation or bug. After it’s merged, CI will run checking &lt;em&gt;and&lt;/em&gt; packaging altogether, to produce a deployable artifact, usually a Docker image.&lt;/p&gt;
&lt;p&gt;For Java project, we use JUnit, Checkstyle and SpotBugs as Maven plugins to run various checks whenever someone pushes to a feature branch. To do that with GitHub Actions, we need to create a workflow that includes setting up Java environment and running &lt;code&gt;mvn verify&lt;/code&gt;. Here’s a minimum workflow definition in &lt;code&gt;project-root/.github/workflows/build.yml&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;push&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;verify:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/checkout@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/setup-java@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;java-version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;17&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;distribution:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;temurin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;cache:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;maven&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;mvn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;--batch-mode&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="github" scheme="https://shzhangji.com/tags/github/"/>
    
    <category term="ci" scheme="https://shzhangji.com/tags/ci/"/>
    
    <category term="docker" scheme="https://shzhangji.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API Authentication with Spring Security</title>
    <link href="https://shzhangji.com/blog/2023/01/15/restful-api-authentication-with-spring-security/"/>
    <id>https://shzhangji.com/blog/2023/01/15/restful-api-authentication-with-spring-security/</id>
    <published>2023-01-15T06:51:51.000Z</published>
    <updated>2023-01-15T06:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to implementing user authentication in RESTful API server, there’re several options like <a href="https://spring.io/projects/spring-security">Spring Security</a>, <a href="https://shiro.apache.org/">Apache Shiro</a>, or writing our own version of Filters and Servlets. If the server already uses <a href="https://spring.io/projects/spring-boot">Spring Boot</a>, then Spring Security is really a good fit, for it integrates quite well with Spring Boot project, thanks to all those automatic configurations. However, Spring Security’s login facility is originally built for web forms or basic HTTP authentication, while modern apps usually lean on RESTful API. We can either adapt the frontend client to utilizing the built-in login methods as in this tutorial <a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/">Spring Security and Angular JS</a>, or write custom Filter to <a href="https://ckinan.com/blog/spring-security-credentials-from-json-request/">extract user credentials from input JSON</a>.</p><p><img src="/images/spring-security.png" alt="Spring Security"></p><p>Having said that, personally I still prefer to maintain a consistent API style in user authentication, and I don’t want to write awkward logics with raw Servlet request&#x2F;response objects in Filter, instead of using what Spring MVC provides, i.e. <code>@RestController</code>, <code>@RequestBody</code>, form validation, etc. Luckily, Spring Security provides integration for Servlet API, so that we can login&#x2F;logout user within the Controller. In this article, I will demonstrate how to use Spring Security to guard your RESTful API server, with the following functions:</p><ul><li>Login&#x2F;logout with JSON API.</li><li>Return 401 for unauthenticated requests.</li><li>Custom table for user data.</li><li>CSRF protection.</li><li>Remember me.</li><li>Session persistence.</li></ul><span id="more"></span><h2 id="Defining-user-authentication-API"><a href="#Defining-user-authentication-API" class="headerlink" title="Defining user authentication API"></a>Defining user authentication API</h2><p>Let’s define three APIs for user login, logout, and one that returns the currently logged-in user. All the requests and responses should be in the form of <code>application/json</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /api/login</span><br><span class="line">Request: &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;888888&quot;&#125;</span><br><span class="line">Response: &#123;&quot;id&quot;:1,&quot;nickname&quot;:&quot;Jerry&quot;&#125;</span><br><span class="line"></span><br><span class="line">POST /api/logout</span><br><span class="line">Response: &#123;&#125;</span><br><span class="line"></span><br><span class="line">GET /api/current-user</span><br><span class="line">Response: &#123;&quot;id&quot;:1,&quot;nickname&quot;:&quot;Jerry&quot;&#125;</span><br></pre></td></tr></table></figure><p>With Spring Boot, creating RESTful APIs is effortless. In the following example, we also add form validation and a custom exception handled by a global contoller. But these functions are beyond the scope of this article. The Spring Boot version I’m using is 3.x, with Spring Security 6.x, and Java 17.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(<span class="number">1</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> LogoutResponse <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogoutResponse</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(<span class="number">1</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CurrentUser</span><span class="params">(Integer id, String nickname)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">LogoutResponse</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Configure-Spring-Security-filter-chain"><a href="#Configure-Spring-Security-filter-chain" class="headerlink" title="Configure Spring Security filter chain"></a>Configure Spring Security filter chain</h2><p>Add the Spring Security dependency into the project, along with the JDBC related ones, since we’re going to retrieve user information from own version of <code>user</code> table. Note the dependency versions are managed by Spring Boot parent pom.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It’s not that Spring Security doesn’t come with good defaults for table schema, but we probably want to have more control over them or we already have a set of user tables. If you’re interested, here’s the link to the default <a href="https://docs.spring.io/spring-security/reference/servlet/appendix/database-schema.html#_user_schema">User Schema</a>. Instead, I’m using the following schema in this demo.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT</span><br><span class="line">  ,username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,nickname <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,created_at DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,updated_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">  ,<span class="keyword">UNIQUE</span> KEY uk_username (username)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$10$f4aQLof9kgM8mzJIP7a.Vuc3WYcQK8brcL6hrHdCdkzTH8AppEpOm&#x27;</span>, <span class="string">&#x27;Jerry&#x27;</span>, NOW(), NOW());</span><br></pre></td></tr></table></figure><p>The default password-hashing algorithm used by Spring Security is BCrypt. The following snippet can be used to generate such password digest. Other options can be found <a href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html">here</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"><span class="type">var</span> <span class="variable">password</span> <span class="operator">=</span> encoder.encode(<span class="string">&quot;888888&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&#123;bcrypt&#125;&quot;</span> + password);</span><br></pre></td></tr></table></figure><p>By default, Spring Security will guard all API endpoints including <code>/api/login</code>, so we first need to tell it to back down at certain requests, by configuring the <code>SecurityFilterChain</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">        .authorizeHttpRequests(customizer -&gt; customizer</span><br><span class="line">            .requestMatchers(<span class="string">&quot;/api/login&quot;</span>).permitAll()</span><br><span class="line">            .requestMatchers(<span class="string">&quot;/api/**&quot;</span>).authenticated()</span><br><span class="line">            .anyRequest().denyAll())</span><br><span class="line">        .exceptionHandling(customizer -&gt; customizer</span><br><span class="line">            .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">HttpStatusEntryPoint</span>(HttpStatus.UNAUTHORIZED)))</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In addition, we tell Spring Security that when an unauthenticated user tries to access the restricted routes, it’ll respond with 401 Unauthorized, so that the client, usually a single page application, can redirect to its login page. This facility is called authentication entry point. In the old days, it was the server’s job to redirect to a login page, so the default entry point is an HTML page resided in the <code>/login</code> URL.</p><h2 id="Retrieve-user-credentials-from-database"><a href="#Retrieve-user-credentials-from-database" class="headerlink" title="Retrieve user credentials from database"></a>Retrieve user credentials from database</h2><p>Again, with Spring Boot, this task is much simplified. Let’s create the <code>User</code> entity and its corresponding repository.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String nickname;</span><br><span class="line">  <span class="keyword">private</span> Date createdAt;</span><br><span class="line">  <span class="keyword">private</span> Date updatedAt;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123; <span class="keyword">return</span> Set.of(); &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;User, Integer&gt; &#123;</span><br><span class="line">  Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note the <code>User</code> class implements the <code>UserDetails</code> interface, which tells Spring Security that this class can be used for authentication. To wire it into the mechanism, we need another class that implements <code>UserDetailsService</code> interface, mainly for retrieving the <code>User</code> instances from wherever we store them.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserRepository repo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> repo.findByUsername(username)</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;Username &quot;</span> + username + <span class="string">&quot; not found&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’ll find the table row by username, and use the aforementioned password encoder to check the authenticity.</p><h2 id="User-login-in-Controller-methods"><a href="#User-login-in-Controller-methods" class="headerlink" title="User login in Controller methods"></a>User login in Controller methods</h2><p>From Servlet 3+, <code>HttpServletRequest</code> adds <code>login</code>&#x2F;<code>logout</code> methods to help authenticate user credential programmatically, and Spring Security <a href="https://docs.spring.io/spring-security/reference/servlet/integrations/servlet-api.html#servletapi-3">integrates with this function</a>. So in our <code>/api/login</code> handler, we simply invoke this method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult,</span></span><br><span class="line"><span class="params">                         HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    request.login(form.getUsername(), form.getPassword());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">var</span> <span class="variable">auth</span> <span class="operator">=</span> (Authentication) request.getUserPrincipal();</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) auth.getPrincipal();</span><br><span class="line">  log.info(<span class="string">&quot;User &#123;&#125; logged in.&quot;</span>, user.getUsername());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>request.logout</code> can be used accordingly, and for <code>/api/current-user</code>, the <code>@AuthenticationPrincipal</code> annotation can be used on parameter to access the currently logged-in user:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">(<span class="meta">@AuthenticationPrincipal</span> User user)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can test these APIs with <a href="https://httpie.io/">httpie</a>, a commandline HTTP client:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/current-user</span><br><span class="line">HTTP/1.1 401</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Sun, 15 Jan 2023 04:10:51 GMT</span><br></pre></td></tr></table></figure><p>As expected, since we’re not logged in, the server responds with 401. Then let’s try authenticate with username and password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888</span><br><span class="line">HTTP/1.1 401</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Sun, 15 Jan 2023 04:12:50 GMT</span><br></pre></td></tr></table></figure><p>Unfortunately, the server denies us agian even if we provide the correct credential. The reason is Spring Security, by default, enables CSRF protection for all non-idempotent requests, such as POST, DELETE, etc. This can be disabled by configuration, and next section I’ll show you how to use it properly to protect the API.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> http</span><br><span class="line">      .authorizeHttpRequests(customizer -&gt; customizer)</span><br><span class="line">      .csrf().disable()</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now test the API again. Note that in the second request, we pass the Session ID as Cookie. You may notice the key <code>SESSION</code> is different from the default <code>JSESSIONID</code>, that is because I’m using Spring Session for session persistence, which I’ll cover in the last section.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 04:20:45 GMT</span><br><span class="line">Set-Cookie: SESSION=ZDZkOGQ5NTEtYmI4My00YjI2LTg3YzYtNDMzZTlkOWRmZDYz; Path=/; HttpOnly; SameSite=Lax</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% http localhost:8080/api/current-user Cookie:SESSION=ZDZkOGQ5NTEtYmI4My00YjI2LTg3YzYtNDMzZTlkOWRmZDYz</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 04:21:03 GMT</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Enable-CSRF-protection"><a href="#Enable-CSRF-protection" class="headerlink" title="Enable CSRF protection"></a>Enable CSRF protection</h2><p>CSRF protection prevents malicious site from tricking user to submit a form unwillingly. Every form will be embedded with a server-generated token known as the CSRF token. Since the token cannot be attained by third-party, and it is validated in every submission, thus making the request safe. In the old days, again, web forms are generated on server side, while the token is saved in a hidden <code>&lt;input&gt;</code> and got submitted together with the form data. For instance, in Thymeleaf the token can be retrieved by a request attribute named <code>_csrf</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>But with SPA (Single Page Application), we need another way to retrieve the token. One approach is mentioned in the Angular tutorial I linked to earlier, in which the CSRF token is saved in Cookie, and every Ajax POST request is equipped with a header containing this token. Here I take a different approach, that is creating a dedicated endpoint for token retrieval:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/csrf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CsrfResponse <span class="title function_">csrf</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">csrf</span> <span class="operator">=</span> (CsrfToken) request.getAttribute(<span class="string">&quot;_csrf&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CsrfResponse</span>(csrf.getToken());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CsrfResponse</span><span class="params">(String token)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>This API should also be excluded from Spring Security:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestMatchers(<span class="string">&quot;/api/csrf&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure><p>The client could fetch the CSRF token when it needs to do a POST&#x2F;DELETE request. This token can also be cached in <code>localStorage</code> for further use, as long as the session is not timed out. Don’t forget to clear the cache when user logs out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCsrfToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/csrf&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> payload = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">  <span class="keyword">return</span> payload.<span class="property">token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;X-CSRF-TOKEN&#x27;</span>: <span class="keyword">await</span> <span class="title function_">getCsrfToken</span>(),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; username, password &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remember-me-authentication"><a href="#Remember-me-authentication" class="headerlink" title="Remember-me authentication"></a>Remember-me authentication</h2><p>When implementing this demo, the most tricky part is to utilize Spring Security’s built-in remember-me authentication, in that Spring Security basically functions as a series of Filters, so when I decide to authenticate user in Controller instead of Filter, there’ll be some extra work to do. Normally, with form login or filter-based auth, remember-me can be switched on by the following config:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe(customizer -&gt; customizer.alwaysRemember(<span class="literal">true</span>).key(<span class="string">&quot;demo&quot;</span>))</span><br></pre></td></tr></table></figure><p>Under the hood, when user has logged in successfully, <code>RememberMeServices#loginSuccess</code> is invoked to generate and save a <code>remember-me</code> Cookie to the client. Next time the user can login without providing username and password.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888 \</span><br><span class="line">    Cookie:SESSION=YTI3ODMzZDctMjJlOC00MzNhLWIxYjItMTJkYzlhZDE2ZmM3 \</span><br><span class="line">    X-CSRF-TOKEN:7NABU1UXxYeZH3GQf0G4NB0qGEiZwc0yIPR95Cte7jBWnYDc2-EzZTRzpuG0e0eoSWyMVi4YNSmo96wfQ8NE3Bg92QZhq7Pt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 05:59:41 GMT</span><br><span class="line">Set-Cookie: remember-me=YWRtaW46MTY3NDk3MTk4MTAwNDpTSEEyNTY6YmY3NjAwMmU0ODg3ZTFiMzgxMDBhNWEyMzM1NDgxOWYzODgwYmIxM2JlMzhmNjM2MjA1MGM0MWNkMjA1YWY1Yg; Max-Age=1209600; Expires=Sun, 29 Jan 2023 05:59:41 GMT; Path=/; HttpOnly</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% http localhost:8080/api/current-user \</span><br><span class="line">    Cookie:remember-me=YWRtaW46MTY3NDk3MTk4MTAwNDpTSEEyNTY6YmY3NjAwMmU0ODg3ZTFiMzgxMDBhNWEyMzM1NDgxOWYzODgwYmIxM2JlMzhmNjM2MjA1MGM0MWNkMjA1YWY1Yg</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 05:59:59 GMT</span><br><span class="line">Set-Cookie: SESSION=NDA4NjEwM2ItNTY2YS00ZDFlLWFiNjEtOTJjNGI2MGE4MTlj; Path=/; HttpOnly; SameSite=Lax</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unfortunately, <code>HttpServletRequest#login</code> does not call <code>RememberMeServices#loginSuccess</code> for us, so we need to invoke the method by ourselves. Worse still, the <code>RememberMeServices</code> instance, in this case <code>TokenBasedRememberMeServices</code>, is only available within the Filter chain, meaning it is not registered in the Spring IoC container. After some digging in the source code, I managed to expose this instance to other Spring components.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ConfigurableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(&quot;securityFilterChain&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">chain</span> <span class="operator">=</span> http</span><br><span class="line">        .authorizeHttpRequests(customizer -&gt; customizer)</span><br><span class="line">        .rememberMe(customizer -&gt; customizer.alwaysRemember(<span class="literal">true</span>).key(<span class="string">&quot;demo&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">rememberMeServices</span> <span class="operator">=</span> http.getSharedObject(RememberMeServices.class);</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;rememberMeServices&quot;</span>, rememberMeServices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;securityFilterChain&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RememberMeServices rememberMeServices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <code>RememberMeServices</code> instance is created in the configuration phase by Spring Security, and we save it into the IoC container, making it available in the <code>AuthController</code>. The <code>@DependsOn</code> annotation ensures that <code>RememberMeServices</code> is registered before the <code>AuthController</code> is created. Next, the <code>loginSuccess</code> method can be invoked like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult,</span></span><br><span class="line"><span class="params">                         HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">  request.login(form.getUsername(), form.getPassword());</span><br><span class="line">  <span class="type">var</span> <span class="variable">auth</span> <span class="operator">=</span> (Authentication) request.getUserPrincipal();</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) auth.getPrincipal();</span><br><span class="line">  rememberMeServices.loginSuccess(request, response, auth);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-persistence"><a href="#Session-persistence" class="headerlink" title="Session persistence"></a>Session persistence</h2><p>Login state and CSRF token are stored in HTTP Session, and by default Session data are kept in Java process memory, so when the server restarts or there’re multiple backends, users may need to login several times. The solution is simple, use Spring Session to store data in a third-party persistent storage. Take Redis for an example.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Due to Spring Boot’s auto-configuration feature, adding the dependencies will suffice to use Redis as the Session storage. To specify the Redis instance in production, add the following configs in <code>application.properties</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><p>The demo project can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/api-auth">GitHub</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.spring.io/spring-security/reference/index.html">https://docs.spring.io/spring-security/reference/index.html</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.security">https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.security</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-web-security">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-web-security</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;When it comes to implementing user authentication in RESTful API server, there’re several options like &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security&lt;/a&gt;, &lt;a href=&quot;https://shiro.apache.org/&quot;&gt;Apache Shiro&lt;/a&gt;, or writing our own version of Filters and Servlets. If the server already uses &lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;, then Spring Security is really a good fit, for it integrates quite well with Spring Boot project, thanks to all those automatic configurations. However, Spring Security’s login facility is originally built for web forms or basic HTTP authentication, while modern apps usually lean on RESTful API. We can either adapt the frontend client to utilizing the built-in login methods as in this tutorial &lt;a href=&quot;https://spring.io/guides/tutorials/spring-security-and-angular-js/&quot;&gt;Spring Security and Angular JS&lt;/a&gt;, or write custom Filter to &lt;a href=&quot;https://ckinan.com/blog/spring-security-credentials-from-json-request/&quot;&gt;extract user credentials from input JSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-security.png&quot; alt=&quot;Spring Security&quot;&gt;&lt;/p&gt;
&lt;p&gt;Having said that, personally I still prefer to maintain a consistent API style in user authentication, and I don’t want to write awkward logics with raw Servlet request&amp;#x2F;response objects in Filter, instead of using what Spring MVC provides, i.e. &lt;code&gt;@RestController&lt;/code&gt;, &lt;code&gt;@RequestBody&lt;/code&gt;, form validation, etc. Luckily, Spring Security provides integration for Servlet API, so that we can login&amp;#x2F;logout user within the Controller. In this article, I will demonstrate how to use Spring Security to guard your RESTful API server, with the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login&amp;#x2F;logout with JSON API.&lt;/li&gt;
&lt;li&gt;Return 401 for unauthenticated requests.&lt;/li&gt;
&lt;li&gt;Custom table for user data.&lt;/li&gt;
&lt;li&gt;CSRF protection.&lt;/li&gt;
&lt;li&gt;Remember me.&lt;/li&gt;
&lt;li&gt;Session persistence.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="restful" scheme="https://shzhangji.com/tags/restful/"/>
    
    <category term="spring boot" scheme="https://shzhangji.com/tags/spring-boot/"/>
    
    <category term="spring security" scheme="https://shzhangji.com/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>Mock API in Parcel Project</title>
    <link href="https://shzhangji.com/blog/2023/01/09/mock-api-in-parcel-project/"/>
    <id>https://shzhangji.com/blog/2023/01/09/mock-api-in-parcel-project/</id>
    <published>2023-01-09T06:53:40.000Z</published>
    <updated>2023-01-09T06:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>When developing a frontend application, usually we create mocks for backend API, so that after the API contract is settled down, front and backend engineers can work independently. There are several ways to accomplish this task, such as start a dedicated server and let the build tool serve as a proxy, or we can add middleware directly into the build tool’s dev server, if applicable. Some tools can monkey patch the network calls to replace the response with mock data, and various unit testing tools provide their own way of mocking. In this article, I will focus on how to add middleware into <a href="https://parceljs.org/">Parcel</a>‘s dev server to respond with mock data for API calls.</p><p><img src="/images/parcel.png" alt="Parcel"></p><h2 id="API-Proxy-in-Parcel’s-development-server"><a href="#API-Proxy-in-Parcel’s-development-server" class="headerlink" title="API Proxy in Parcel’s development server"></a>API Proxy in Parcel’s development server</h2><p>Parcel provides a dev server and supports <a href="https://parceljs.org/features/development/#api-proxy">API proxy</a> out of the box. Under the hood, it uses <a href="https://github.com/senchalabs/connect">connect</a> and <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> to redirect API calls to a different server. It also provides the ability to customize the proxy behavior. For instance, by creating a file named <code>.proxyrc.js</code> in project’s root, we can manually redirect all API calls to a mock server listening on <code>localhost:8080</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  app.<span class="title function_">use</span>(proxy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to serve API calls directly in Parcel’s dev server, we just need to write our own middleware and wire it into the <code>connect</code> instance. Let’s name it <code>mock-middleware</code>, and it has the following functions:</p><ul><li>Read source files from the <code>/mock</code> folder, and serve API calls with mock data.</li><li>When the files are updated, refresh the APIs as well.</li></ul><span id="more"></span><h3 id="Define-mock-files"><a href="#Define-mock-files" class="headerlink" title="Define mock files"></a>Define mock files</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock/user.js</span></span><br><span class="line"><span class="keyword">const</span> sendJson = <span class="built_in">require</span>(<span class="string">&#x27;send-data/json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span></span><br><span class="line">  <span class="title function_">sendJson</span>(req, res, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;Jerry&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;POST /api/login&#x27;</span>: login,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mock API are simple functions that accept standard Node.js request&#x2F;response objects as parameters and receive and send data via them. The function is associated with a route string that will be used to match the incoming requests. To ease the processing of request and response data, we use <a href="https://github.com/expressjs/body-parser">body-parser</a> to parse incoming JSON string into <code>req.body</code> object, and use <a href="https://github.com/Raynos/send-data">send-data</a> utility to send out JSON response, that helps setup the <code>Content-Type</code> header for us. Since <code>body-parser</code> is a middleware, we need to wire it into the <code>connect</code> app, before the <code>mock-middleware</code> we are about to implement.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /.proxyrc.js</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; createMockMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mock-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title function_">createMockMiddleware</span>(<span class="string">&#x27;./mock&#x27;</span>)) <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Create-router"><a href="#Create-router" class="headerlink" title="Create router"></a>Create router</h3><p>To match the requests into different route functions, we use <a href="https://github.com/aaronblohowiak/routes.js">route.js</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create router and add rules.</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line">router.<span class="title function_">addRoute</span>(<span class="string">&#x27;POST /api/login&#x27;</span>, login)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use it in a connect app middleware.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line">  <span class="keyword">const</span> m = router.<span class="title function_">match</span>(req.<span class="property">method</span> + <span class="string">&#x27; &#x27;</span> + pathname)</span><br><span class="line">  <span class="keyword">if</span> (m) m.<span class="title function_">fn</span>(req, res, m.<span class="property">param</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(middleware)</span><br></pre></td></tr></table></figure><p><code>route.js</code> supports parameters in URL path, but for query string we need to parse them on our own.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// Access /user/get?id=1</span></span><br><span class="line">  <span class="string">&#x27;GET /:controller/:action&#x27;</span>: <span class="function">(<span class="params">req, res, params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; query &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line">    <span class="comment">// Prints &#123; controller: &#x27;user&#x27;, action: &#x27;get&#x27; &#125; &#123; id: &#x27;1&#x27; &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params, qs.<span class="title function_">parse</span>(query))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Combined with <a href="https://github.com/isaacs/node-glob">glob</a>, we scan files under <code>/mock</code> folder and add all of them to the router.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glob.<span class="title function_">sync</span>(<span class="string">&#x27;./mock/**/*.js&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> routes = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(file))</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(routes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">    router.<span class="title function_">addRoute</span>(path, routes[path])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Watch-and-reload"><a href="#Watch-and-reload" class="headerlink" title="Watch and reload"></a>Watch and reload</h3><p>The next feature we need to implement is watch file changes under <code>/mock</code> folder and reload them. The popular <a href="https://github.com/paulmillr/chokidar">chokidar</a> package does the watch for us, and to tell Node.js reload these files, we simply clear the <code>require</code> cache.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = chokidar.<span class="title function_">watch</span>(<span class="string">&#x27;./mock&#x27;</span>, &#123; <span class="attr">ignoreInitial</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> ptrn = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[/\\\\]mock[/\\\\]&#x27;</span>)</span><br><span class="line">watcher.<span class="title function_">on</span>(<span class="string">&#x27;all&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">require</span>.<span class="property">cache</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> ptrn.<span class="title function_">test</span>(id))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[id]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Rebuild the router.</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now that we have all the pieces we need to create the <code>mock-middleware</code>, we wrap them into a class and provide a <code>createMockMiddleware</code> function for it. The structure is borrowed from <a href="https://github.com/chimurai/http-proxy-middleware/blob/v2.0.6/src/http-proxy-middleware.ts#L11">HttpProxyMiddleware</a>. Full code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/parcel-mock">GitHub</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock-middleware/index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">mockPath</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mockPath</span> = mockPath</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createRouter</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupWatcher</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span> = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupWatcher</span>(<span class="params"></span>) &#123;</span><br><span class="line">    watcher.<span class="title function_">on</span>(<span class="string">&#x27;all&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createRouter</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  middleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMockMiddleware</span>(<span class="params">mockPath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; middleware &#125; = <span class="keyword">new</span> <span class="title class_">MockMiddleware</span>(mockPath)</span><br><span class="line">  <span class="keyword">return</span> middleware</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  createMockMiddleware,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Standalone-mock-server"><a href="#Standalone-mock-server" class="headerlink" title="Standalone mock server"></a>Standalone mock server</h2><p>If you prefer setting up a dedicated server for mock API, either with <a href="https://github.com/expressjs/express">Express.js</a> or <a href="https://github.com/typicode/json-server">JSON Server</a>, it is easy to integrate with Parcel. Let’s create a simple Express.js application first.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock-server/index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;Jerry&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mock server listening on port &#x27;</span> + server.<span class="title function_">address</span>().<span class="property">port</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To start the server while watching the file changes, use <a href="https://github.com/remy/nodemon">nodemon</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D nodemon</span><br><span class="line">yarn nodemon --watch mock-server mock-server/index.js</span><br></pre></td></tr></table></figure><p>Now configure Parcel to redirect API calls to the mock server.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /.proxyrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Use <a href="https://github.com/open-cli-tools/concurrently">concurrently</a> to start up Parcel <em>and</em> mock server at the same time. In fact, it is more convenient to create a npm script for that. Add the following to <code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently yarn:dev yarn:mock&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parcel&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --watch mock-server mock-server/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://codeburst.io/dont-use-nodemon-there-are-better-ways-fc016b50b45e">https://codeburst.io/dont-use-nodemon-there-are-better-ways-fc016b50b45e</a></li><li><a href="https://github.com/Raynos/http-framework/wiki/Modules">https://github.com/Raynos/http-framework/wiki/Modules</a></li><li><a href="https://github.com/aaronblohowiak/routes.js#http-method-example">https://github.com/aaronblohowiak/routes.js#http-method-example</a></li><li><a href="https://mswjs.io/docs/comparison">https://mswjs.io/docs/comparison</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;When developing a frontend application, usually we create mocks for backend API, so that after the API contract is settled down, front and backend engineers can work independently. There are several ways to accomplish this task, such as start a dedicated server and let the build tool serve as a proxy, or we can add middleware directly into the build tool’s dev server, if applicable. Some tools can monkey patch the network calls to replace the response with mock data, and various unit testing tools provide their own way of mocking. In this article, I will focus on how to add middleware into &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;‘s dev server to respond with mock data for API calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/parcel.png&quot; alt=&quot;Parcel&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-Proxy-in-Parcel’s-development-server&quot;&gt;&lt;a href=&quot;#API-Proxy-in-Parcel’s-development-server&quot; class=&quot;headerlink&quot; title=&quot;API Proxy in Parcel’s development server&quot;&gt;&lt;/a&gt;API Proxy in Parcel’s development server&lt;/h2&gt;&lt;p&gt;Parcel provides a dev server and supports &lt;a href=&quot;https://parceljs.org/features/development/#api-proxy&quot;&gt;API proxy&lt;/a&gt; out of the box. Under the hood, it uses &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;connect&lt;/a&gt; and &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; to redirect API calls to a different server. It also provides the ability to customize the proxy behavior. For instance, by creating a file named &lt;code&gt;.proxyrc.js&lt;/code&gt; in project’s root, we can manually redirect all API calls to a mock server listening on &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; createProxyMiddleware &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http-proxy-middleware&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;app&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proxy = &lt;span class=&quot;title function_&quot;&gt;createProxyMiddleware&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:8080/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  app.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(proxy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In order to serve API calls directly in Parcel’s dev server, we just need to write our own middleware and wire it into the &lt;code&gt;connect&lt;/code&gt; instance. Let’s name it &lt;code&gt;mock-middleware&lt;/code&gt;, and it has the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read source files from the &lt;code&gt;/mock&lt;/code&gt; folder, and serve API calls with mock data.&lt;/li&gt;
&lt;li&gt;When the files are updated, refresh the APIs as well.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="parcel" scheme="https://shzhangji.com/tags/parcel/"/>
    
    <category term="connect" scheme="https://shzhangji.com/tags/connect/"/>
    
  </entry>
  
  <entry>
    <title>Configure Git Line Endings Across OSes</title>
    <link href="https://shzhangji.com/blog/2022/08/31/configure-git-line-endings-across-oses/"/>
    <id>https://shzhangji.com/blog/2022/08/31/configure-git-line-endings-across-oses/</id>
    <published>2022-08-31T07:23:43.000Z</published>
    <updated>2022-08-31T07:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Linux, lines end with LF (Line Feed, <code>\n</code>), while in Windows, CRLF (Carriage Return + Line Feed, <code>\r\n</code>). When developers using different operating systems contribute to the same Git project, line endings must be handled correctly, or <code>diff</code> and <code>merge</code> may break unexpectedly. Git provides several solutions to this problem, including configuration options and file attributes.</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><p>Set <code>core.autocrlf</code> to <code>input</code> in <strong>Windows</strong>. Leave Linux&#x2F;macOS unchanged.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach 2"></a>Approach 2</h3><p>Create <code>.gitattributes</code> under the project root, and add the following line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* text=auto eol=lf</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Use-consistent-line-endings"><a href="#Use-consistent-line-endings" class="headerlink" title="Use consistent line endings"></a>Use consistent line endings</h2><p>I suggest using LF in all OSes. Modern editors are capable of recoganizing and handling line endings across platforms. Even <a href="https://devblogs.microsoft.com/commandline/extended-eol-in-notepad/">Notepad in Windows 10</a> can display text files with LFs correctly. Usually we have an <a href="https://editorconfig.org/"><code>.editorconfig</code></a> file in the project, so that various editors with plugin installed will behave the same when handling line endings, as well as charset and indent.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">max_line_length = 100</span><br></pre></td></tr></table></figure><p>This consistency also lies in Git itself. When you enable Git to handle line endings for you, either by <code>core.autocrlf</code> or <code>.gitattributes</code>, Git always stores LFs in the repository.</p><h2 id="The-classic-core-autocrlf-option"><a href="#The-classic-core-autocrlf-option" class="headerlink" title="The classic core.autocrlf option"></a>The classic <code>core.autocrlf</code> option</h2><p><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreautocrlf"><code>core.autocrlf</code></a> has three options:</p><ul><li><code>false</code> The default value, meaning Git will not touch the files when checking in or out of the repository. Check-in means committing files to the repository; check-out means writing to the working directory.</li><li><code>true</code> Git will convert LF to CRLF when checking out of the repository, and convert them back to LF when checking in.</li><li><code>input</code> Git checks out the files <em>as-is</em>, and converts CRLF to LF when checking in.</li></ul><p>When <code>core.autocrlf</code> is set to <code>input</code>, Git will give you a warning when adding text files with CRLF endings:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: CRLF will be replaced by LF in test.txt.</span><br></pre></td></tr></table></figure><p>Only text files will be processed by Git, but sometimes Git may mistakenly treat binary files as text files and corrupt the data by replacing CRLF with LF. So Git provides a <code>core.safecrlf</code> option that checks if it can convert LF back to CRLF and produce the exact same file content. If it is not the case, Git rejects this operation with an error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: LF would be replaced by CRLF in test.bin</span><br></pre></td></tr></table></figure><p>This setting also causes problem when you have a mixture of LF and CRLF in one file, because Git will detect that it cannot reproduce the original file when checking out. In this case, line endings need to be fixed manually.</p><h2 id="Configure-end-of-line-in-Git-attributes"><a href="#Configure-end-of-line-in-Git-attributes" class="headerlink" title="Configure end-of-line in Git attributes"></a>Configure end-of-line in Git attributes</h2><p>There are two caveats in the <code>core.autocrlf</code> approach. First, it is a configuration that needs to be set manually by every developer, either globally or locally. Second, it may corrupt binary files. So newer version of Git provides the attribute mechanism, that saves configurations into a file named <code>.gitattributes</code>, and just like <code>.editorconfig</code>, this file should be checked into the repository so that all developers may share the same config. Git attributes also support path wildcards, so users can specify which files should be processed as text files. For instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Auto detect file types, if no further configs are given. Set end-of-line to LF.</span><br><span class="line">* text=auto eol=lf</span><br><span class="line"></span><br><span class="line"># Specify the following file types to be text, and do the CRLF/LF conversion.</span><br><span class="line">*.py text eol=lf</span><br><span class="line">*.ts text eol=lf</span><br><span class="line"></span><br><span class="line"># Leave the binary files as-is.</span><br><span class="line">*.png binary</span><br></pre></td></tr></table></figure><p><code>binary</code> is a macro for <code>-text -diff</code>, meaning Git will <em>not</em> process this file as text files or generate diffs in <code>git diff</code>. Git attributes take precedence over the <code>core.autocrlf</code> config, and will fall back to it when file does not match the wildcards.</p><p>Another related config is <code>core.eol</code>, which only takes effect if a file has the <code>text</code> attribute. Consider it as the default value for <code>eol</code> in <code>.gitattributes</code>, but obviouly it should not be used since it is also a config that needs to be set manually.</p><p>More details on Git attributes can be found in the <a href="https://git-scm.com/docs/gitattributes#_text">official document</a>.</p><h2 id="Renormalize-after-setting-up-end-of-line"><a href="#Renormalize-after-setting-up-end-of-line" class="headerlink" title="Renormalize after setting up end-of-line"></a>Renormalize after setting up end-of-line</h2><p>For existing projects, there is a command that normalizes line endings for all files.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add --renormalize .</span><br><span class="line">git commit -m &#x27;Normalize line endings.&#x27;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/a/2354278/1030720">https://stackoverflow.com/a/2354278/1030720</a></li><li><a href="https://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/">https://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/</a></li><li><a href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings">https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Linux, lines end with LF (Line Feed, &lt;code&gt;&#92;n&lt;/code&gt;), while in Windows, CRLF (Carriage Return + Line Feed, &lt;code&gt;&#92;r&#92;n&lt;/code&gt;). When developers using different operating systems contribute to the same Git project, line endings must be handled correctly, or &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt; may break unexpectedly. Git provides several solutions to this problem, including configuration options and file attributes.&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;h3 id=&quot;Approach-1&quot;&gt;&lt;a href=&quot;#Approach-1&quot; class=&quot;headerlink&quot; title=&quot;Approach 1&quot;&gt;&lt;/a&gt;Approach 1&lt;/h3&gt;&lt;p&gt;Set &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;input&lt;/code&gt; in &lt;strong&gt;Windows&lt;/strong&gt;. Leave Linux&amp;#x2F;macOS unchanged.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.autocrlf input&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Approach-2&quot;&gt;&lt;a href=&quot;#Approach-2&quot; class=&quot;headerlink&quot; title=&quot;Approach 2&quot;&gt;&lt;/a&gt;Approach 2&lt;/h3&gt;&lt;p&gt;Create &lt;code&gt;.gitattributes&lt;/code&gt; under the project root, and add the following line:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* text=auto eol=lf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="git" scheme="https://shzhangji.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Configure Logging for Flask SQLAlchemy Project</title>
    <link href="https://shzhangji.com/blog/2022/08/10/configure-logging-for-flask-sqlalchemy-project/"/>
    <id>https://shzhangji.com/blog/2022/08/10/configure-logging-for-flask-sqlalchemy-project/</id>
    <published>2022-08-10T02:56:07.000Z</published>
    <updated>2022-08-10T02:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Python, the built-in <a href="https://docs.python.org/3/library/logging.html"><code>logging</code></a> module is the standard way of doing application logs, and most third-party libraries integrate well with it. For instance, <a href="https://flask.palletsprojects.com/en/2.1.x/logging/">Flask</a> creates a default <code>app.logger</code> with a <code>StreamHandler</code> that writes to standard error. <a href="https://docs.sqlalchemy.org/en/14/core/engines.html#configuring-logging">SQLAlchemy</a> uses a logger named <code>sqlalchemy</code> and allow us to further customize its behaviour. This article shows how to configure logging for Flask and SQLAlchemy, both in debug mode and production mode.</p><h2 id="Default-logging-behaviour-of-Flask"><a href="#Default-logging-behaviour-of-Flask" class="headerlink" title="Default logging behaviour of Flask"></a>Default logging behaviour of Flask</h2><p>According to Flask document, when the <code>app.logger</code> property is accessed for the first time, it creates a logger with the name of the application, usually the module name you used in <code>app = Flask(__name__)</code>. The logging level is set to <code>DEBUG</code> if current application is in debug mode, or <code>NOTSET</code> and lets parent loggers decide the level. Then it checks if a log handler has already been added to the logger or any parent loggers, otherwise it adds a default one. The log format is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.Formatter(<span class="string">&quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&quot;</span>)</span><br></pre></td></tr></table></figure><p>In application, we can invoke the logging methods on <code>app.logger</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_logging <span class="keyword">import</span> app  <span class="comment"># flask_logging is the project name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Invoke in flask_logging.views.user module.</span></span><br><span class="line">app.logger.info(<span class="string">&#x27;Get user list&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-08 18:33:11,451] INFO in user: Get user list</span><br></pre></td></tr></table></figure><p>In production, the root logger is set to <code>WARNING</code> level by default, so only warning, error, and critical messages will be logged.</p><span id="more"></span><h2 id="Customize-application-logging"><a href="#Customize-application-logging" class="headerlink" title="Customize application logging"></a>Customize application logging</h2><p>There are several things we can improve in application logging:</p><ul><li>Use the full module name as the logger name, and print it in logs like <code>INFO in flask_logging.views.user</code>. This also allows us to configure logging for parent modules.</li><li>Change the log level to INFO in production, so that we may print some useful information for debugging.</li><li>Simplify the use of logger when applying the Flask <a href="https://flask.palletsprojects.com/en/2.1.x/patterns/appfactories/">Application Factories</a> pattern.</li></ul><p>In order to give the logger the full module name, we need to create it on our own. Then configuring level will be very easy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>() -&gt; Flask:</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    configure_logging(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_logging</span>(<span class="params">app: Flask</span>):</span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;[%(asctime)s] %(levelname)s %(name)s: %(message)s&#x27;</span>)</span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> app.debug:</span><br><span class="line">        logging.getLogger().setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><p>Here we use the Flask app factory pattern, and configure logging right after we create the app instance. This is necessary because once <code>app.logger</code> is accessed, default behaviour will be set up. The log format is similar to the default, except we use <code>%(name)s</code> instead of <code>%(module)s</code>. Then we set the root logger level to <code>INFO</code>, and if we are in debug mode, <code>DEBUG</code> level is used. Besides, <code>basicConfig</code> adds a default handler that logs into standard error. This is sufficient for applications running in containers.</p><p>To use logger in modules:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app, jsonify, Response</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@current_app.get(<span class="params"><span class="string">&#x27;/api/user/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_list</span>() -&gt; Response:</span><br><span class="line">    logger.info(<span class="string">&#x27;Get user list in view.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(users=[])</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-09 18:12:12,420] INFO flask_logging.views.user: Get user list in view.</span><br></pre></td></tr></table></figure><p>With app factory pattern, we need to replace <code>app.logger</code> with <code>current_app.logger</code>, and it is a little bit verbose. Dedicated logger for each module solves this problem, too.</p><h3 id="Fix-Werkzeug-logging"><a href="#Fix-Werkzeug-logging" class="headerlink" title="Fix Werkzeug logging"></a>Fix Werkzeug logging</h3><p>In debug mode, <a href="https://werkzeug.palletsprojects.com/">Werkzeug</a> will output access logs twice:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-09 18:17:28,530] INFO werkzeug:  * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"></span><br><span class="line">127.0.0.1 - - [09/Aug/2022 18:17:30] &quot;GET /api/user/list HTTP/1.1&quot; 200 -</span><br><span class="line">[2022-08-09 18:17:30,355] INFO werkzeug: 127.0.0.1 - - [09/Aug/2022 18:17:30] &quot;GET /api/user/list HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure><p>To fix it, we remove the extra handler under <code>werkzeug</code> logger:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    <span class="comment"># Fix werkzeug handler in debug mode</span></span><br><span class="line">    logging.getLogger(<span class="string">&#x27;werkzeug&#x27;</span>).handlers = []</span><br></pre></td></tr></table></figure><p>In production mode, the access log is controlled by WSGI server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b 127.0.0.1:5000 --access-logfile - &#x27;flask_logging:create_app()&#x27;</span><br></pre></td></tr></table></figure><h2 id="Log-SQLAlchemy-queries-in-debug-mode"><a href="#Log-SQLAlchemy-queries-in-debug-mode" class="headerlink" title="Log SQLAlchemy queries in debug mode"></a>Log SQLAlchemy queries in debug mode</h2><p>To log queries, SQLAlchemy gives us two options: create engine with <code>echo=True</code>, or configure the logger ourselves. Only use one approach or you will get duplicate logs. For <a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/">Flask-SQLAlchemy</a> users, use the following config:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_ECHO = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>I prefer using the standard logging module. All SQLAlchemy loggers are under the name <code>sqlalchemy</code>, and they are by default in <code>WARNING</code> level. To enable query logs, change the level of <code>sqlalchemy.engine</code> logger to <code>INFO</code>. If you also want to get the query result printed, set to <code>DEBUG</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    <span class="comment"># Make sure engine.echo is set to False</span></span><br><span class="line">    logging.getLogger(<span class="string">&#x27;sqlalchemy.engine&#x27;</span>).setLevel(logging.INFO)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-10 10:41:57,089] INFO sqlalchemy.engine.Engine: BEGIN (implicit)</span><br><span class="line">[2022-08-10 10:41:57,090] INFO sqlalchemy.engine.Engine: SELECT user.id AS user_id, user.username AS user_username FROM user</span><br><span class="line">[2022-08-10 10:41:57,090] INFO sqlalchemy.engine.Engine: [generated in 0.00015s] &#123;&#125;</span><br><span class="line">[2022-08-10 10:41:57,091] INFO sqlalchemy.engine.Engine: ROLLBACK</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Flask’s built-in <code>app.logger</code> is easy to use. But instead, we create our own loggers to fine-tune the configs, with Python standard logging module. It is also true for SQLAlchemy logs. The loggers are well defined in <code>sqlalchemy.engine</code>, <code>sqlalchemy.orm</code>, etc., so that we can change the configs easily. Demo code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/flask-logging">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Python, the built-in &lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module is the standard way of doing application logs, and most third-party libraries integrate well with it. For instance, &lt;a href=&quot;https://flask.palletsprojects.com/en/2.1.x/logging/&quot;&gt;Flask&lt;/a&gt; creates a default &lt;code&gt;app.logger&lt;/code&gt; with a &lt;code&gt;StreamHandler&lt;/code&gt; that writes to standard error. &lt;a href=&quot;https://docs.sqlalchemy.org/en/14/core/engines.html#configuring-logging&quot;&gt;SQLAlchemy&lt;/a&gt; uses a logger named &lt;code&gt;sqlalchemy&lt;/code&gt; and allow us to further customize its behaviour. This article shows how to configure logging for Flask and SQLAlchemy, both in debug mode and production mode.&lt;/p&gt;
&lt;h2 id=&quot;Default-logging-behaviour-of-Flask&quot;&gt;&lt;a href=&quot;#Default-logging-behaviour-of-Flask&quot; class=&quot;headerlink&quot; title=&quot;Default logging behaviour of Flask&quot;&gt;&lt;/a&gt;Default logging behaviour of Flask&lt;/h2&gt;&lt;p&gt;According to Flask document, when the &lt;code&gt;app.logger&lt;/code&gt; property is accessed for the first time, it creates a logger with the name of the application, usually the module name you used in &lt;code&gt;app = Flask(__name__)&lt;/code&gt;. The logging level is set to &lt;code&gt;DEBUG&lt;/code&gt; if current application is in debug mode, or &lt;code&gt;NOTSET&lt;/code&gt; and lets parent loggers decide the level. Then it checks if a log handler has already been added to the logger or any parent loggers, otherwise it adds a default one. The log format is as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logging.Formatter(&lt;span class=&quot;string&quot;&gt;&amp;quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In application, we can invoke the logging methods on &lt;code&gt;app.logger&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask_logging &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; app  &lt;span class=&quot;comment&quot;&gt;# flask_logging is the project name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Invoke in flask_logging.views.user module.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.logger.info(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Get user list&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The output is:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2022-08-08 18:33:11,451] INFO in user: Get user list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In production, the root logger is set to &lt;code&gt;WARNING&lt;/code&gt; level by default, so only warning, error, and critical messages will be logged.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="sqlalchemy" scheme="https://shzhangji.com/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>Use Composition API and Pinia in Vue 2 Project</title>
    <link href="https://shzhangji.com/blog/2022/07/31/use-composition-api-and-pinia-in-vue-2-project/"/>
    <id>https://shzhangji.com/blog/2022/07/31/use-composition-api-and-pinia-in-vue-2-project/</id>
    <published>2022-07-31T06:07:27.000Z</published>
    <updated>2022-07-31T06:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Composition API is one of the major features of Vue 3, and it greatly changes how we organize code. Vue 3 also introduces Pinia as the recommended state management library, superceding Vuex that now enters maintenance mode. It would be nice if we can use these cool features in Vue 2 project, since migration of legacy project could be difficult and costly. Fortunately, the community has tried hard to bring Vue 3 features back to Vue 2, like <a href="https://github.com/vuejs/composition-api"><code>@vue/composition-api</code></a>, <a href="https://github.com/antfu/unplugin-vue2-script-setup"><code>unplugin-vue2-script-setup</code></a> and <a href="https://github.com/vueuse/vue-demi"><code>vue-demi</code></a>. Recently, <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html">Vue 2.7</a> is released and backports features like Composition API, <code>&lt;script setup&gt;</code>, <code>defineComponent</code>, etc. This article will show you how to change your code from Options API to Composition API, from Vuex to Pinia.</p><h2 id="Why-Composition-API"><a href="#Why-Composition-API" class="headerlink" title="Why Composition API"></a>Why Composition API</h2><p>The main advantage of Composition API is that you can organize your code in a more flexible way. Previously with Options API, we can only group codes by <code>data</code>, <code>methods</code>, and hooks, while with Composition API, codes constituting one feature can be put together. There is a nice figure in the official document <em><a href="https://vuejs.org/guide/extras/composition-api-faq.html">Composition API FAQ</a></em> that illustrates how code blocks look differently after applying Composition API.</p><p><img src="/images/typescript/composition-api-after.png" alt="Options API vs. Composition API"></p><span id="more"></span><p>Another important advantage is better type inference. With Vue 2, TypeScript has a difficulty in inferring types from Options API, so we have to use <code>Vue.extend</code> or <a href="https://github.com/vuejs/vue-class-component">class-based components</a>. Though Vue 2.7 backports <code>defineComponent</code> that improves this situation, Composition API still provides a more natural and concise way to define types, for it only consists of plain variables and functions. So in this article, I will use TypeScript as the demo language. If your legacy project hasn’t adopted TypeScript yet, you can check out my previous post <em><a href="https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/">Add TypeScript Support to Vue 2 Project</a></em>.</p><p>For maintainers of larger projects, Composition API also brings better code reuse through custom composable functions, as well as smaller JS bundle and better performance. And last but not least, you can always use both APIs in one project. The Vue team has no plan to remove Options API.</p><h2 id="From-Options-API-to-Composition-API"><a href="#From-Options-API-to-Composition-API" class="headerlink" title="From Options API to Composition API"></a>From Options API to Composition API</h2><p>The transformation is not difficult, so long as you see the connection between these two APIs. Let’s start with a simple component:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Count: &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment()&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>There is a state, a lifecycle hook, and one method. The Composition API version is:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="comment">&lt;!-- Not changed --&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; count, increment &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>State becomes a <code>ref</code>; the <code>mounted</code> lifecycle hook becomes an <code>onMounted</code> function call; <code>increment</code> becomes a plain function. All logics go into the <code>setup</code> function of the component definition, and the returned variables can be used in template (<code>count</code>, <code>increment</code>). You may wonder if you can mix the Composition API with Options API in the same component. The answer is yes, but it is not a good practice, so do it judiciously.</p><p>To further simplify the definition, use the syntax sugar <code>&lt;script setup&gt;</code>, also available in Vue 2.7:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="More-on-states"><a href="#More-on-states" class="headerlink" title="More on states"></a>More on states</h2><p><code>ref</code> is used to define a single state variable, and we have to use <code>.value</code> to get and set its value. You can pass an object or array to <code>ref</code>, but it is not convenient to change only one member of the state, like changing a field value in a form. So <code>reactive</code> would be a better choice here.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;login()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; ...form &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>reactive</code> looks much more like the <code>data</code> section in Options API. The difference is you can define multiple <code>ref</code> and <code>reactive</code>s in one component, place them nearer to where they are used. There are other topics on component state, like <code>computed</code> and <code>watch</code>, please take a look at the official document <a href="https://vuejs.org/api/reactivity-core.html"><em>Reactivity API: Core</em></a>.</p><h2 id="Define-component’s-props-and-emits"><a href="#Define-component’s-props-and-emits" class="headerlink" title="Define component’s props and emits"></a>Define component’s <code>props</code> and <code>emits</code></h2><p>Let’s wrap login form into a component, to see how <code>props</code> and <code>emits</code> are defined:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="comment">&lt;!-- Not changed --&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, defineProps, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> interface <span class="title class_">Props</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: string</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">password</span>: string</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = defineProps&lt;<span class="title class_">Props</span>&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">form</span>: <span class="title class_">Props</span>): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="title function_">reactive</span>(&#123; ...props &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;login&#x27;</span>, &#123; ...form &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This component takes <code>props</code> as the initial values of form fields, and when the form is submitted, it emits the <code>login</code> event to parent component:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LoginForm</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;admin&quot;</span> @<span class="attr">login</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">LoginForm</span>, &#123; type <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./LoginForm.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">form: Props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(form)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see <code>props</code> and <code>emits</code> are both strongly typed, so TS will highlight any violation of the component interface.</p><p>Template refs are also supported in Composition API with TS. I wrote a post about wrapping Bootstrap 5 modal into a Vue component, with template ref and <code>v-model</code>. Please check out <a href="https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/"><em>Use Bootstrap V5 in Vue 3 Project</em></a>.</p><h2 id="From-Vuex-to-Pinia"><a href="#From-Vuex-to-Pinia" class="headerlink" title="From Vuex to Pinia"></a>From Vuex to Pinia</h2><p>State management library is often used when you want to share states between different components. Rather than <em>lifting the state up</em>, we use a dedicated global state store that results in cleaner code and good separation of concerns. A store is also used to interact with backend APIs, and it gives better integration with DevTools. In fact, using a state store has become a standard approach in frontend development.</p><p>In Vue 2, the default state management library is Vuex, and that is changing in Vue 3, because you can either use Reactivity API (<code>ref</code>, <code>reactive</code>, etc.) or Pinia to replace it with. I am not covering every aspect of Vuex or Pinia, just showing you how to convert a daily used Vuex store into new forms. Like this simple user store in Vuex 3.x:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> service <span class="keyword">from</span> <span class="string">&#x27;@/services/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = &#123;</span><br><span class="line">  <span class="attr">SAVE</span>: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> service.<span class="title function_">login</span>(payload)</span><br><span class="line">      <span class="title function_">commit</span>(types.<span class="property">SAVE</span>, &#123;</span><br><span class="line">        <span class="attr">username</span>: response.<span class="property">data</span>.<span class="property">payload</span>.<span class="property">username</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    [types.<span class="property">SAVE</span>](state, payload) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(state, payload)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>login</code> method sends username and password to remote API and if login successfully, save the username to its state. Then the state can be shared among components like nav bar, a dropdown of user list, etc. The Pinia version removes the mutation part, thus making the store a little bit simpler:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> service <span class="keyword">from</span> <span class="string">&#x27;@/services/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">data: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> service.<span class="title function_">login</span>(data)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">username</span> = response.<span class="property">data</span>.<span class="property">payload</span>.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Removing mutation may be the biggest improvement. Pinia also has better type inference out of the box, while in Vuex we need to define complex wrappers around store. Both integrates well with Composition API, because Vuex 4.x is built for Vue 3.x. Detailed comparison can be found on Pinia’s <a href="https://pinia.vuejs.org/introduction.html#comparison-with-vuex-3-x-4-x">official document</a>. To use the store:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Username: &#123;&#123; store.username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/stores/user&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  store.<span class="title function_">login</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Composition API is one of the major features of Vue 3, and it greatly changes how we organize code. Vue 3 also introduces Pinia as the recommended state management library, superceding Vuex that now enters maintenance mode. It would be nice if we can use these cool features in Vue 2 project, since migration of legacy project could be difficult and costly. Fortunately, the community has tried hard to bring Vue 3 features back to Vue 2, like &lt;a href=&quot;https://github.com/vuejs/composition-api&quot;&gt;&lt;code&gt;@vue/composition-api&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/antfu/unplugin-vue2-script-setup&quot;&gt;&lt;code&gt;unplugin-vue2-script-setup&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/vueuse/vue-demi&quot;&gt;&lt;code&gt;vue-demi&lt;/code&gt;&lt;/a&gt;. Recently, &lt;a href=&quot;https://blog.vuejs.org/posts/vue-2-7-naruto.html&quot;&gt;Vue 2.7&lt;/a&gt; is released and backports features like Composition API, &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;, &lt;code&gt;defineComponent&lt;/code&gt;, etc. This article will show you how to change your code from Options API to Composition API, from Vuex to Pinia.&lt;/p&gt;
&lt;h2 id=&quot;Why-Composition-API&quot;&gt;&lt;a href=&quot;#Why-Composition-API&quot; class=&quot;headerlink&quot; title=&quot;Why Composition API&quot;&gt;&lt;/a&gt;Why Composition API&lt;/h2&gt;&lt;p&gt;The main advantage of Composition API is that you can organize your code in a more flexible way. Previously with Options API, we can only group codes by &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and hooks, while with Composition API, codes constituting one feature can be put together. There is a nice figure in the official document &lt;em&gt;&lt;a href=&quot;https://vuejs.org/guide/extras/composition-api-faq.html&quot;&gt;Composition API FAQ&lt;/a&gt;&lt;/em&gt; that illustrates how code blocks look differently after applying Composition API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/typescript/composition-api-after.png&quot; alt=&quot;Options API vs. Composition API&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
    <category term="pinia" scheme="https://shzhangji.com/tags/pinia/"/>
    
  </entry>
  
  <entry>
    <title>Add TypeScript Support to Vue 2 Project</title>
    <link href="https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/"/>
    <id>https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/</id>
    <published>2022-07-24T09:13:40.000Z</published>
    <updated>2022-07-24T09:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Now that TypeScript has become the de facto standard in frontend development, new projects and third-party libraries are mostly built on its ecosystem. For existing projects, TypeScript can also be applied gradually. Just add the toolchain, and start writing or rewriting part of your application. In this article, I will walk you through the steps of adding TypeScript to a Vue 2 project, since I myself is working on a legacy project, and TypeScript has brought a lot of benefits.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>For those who are new to TypeScript, I recommend you read the guide <em><a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">TypeScript for JavaScript Programmers</a></em>. In short, TypeScript is a superset of JavaScript. It adds type hints to variables, as well as other syntax like class, interface, decorator, and some of them are already merged into ECMAScript. When compiling, TypeScript can do static type check. It will try to infer the variable type as much as possible, or you need to define the type explicitly. Here is the official <a href="https://www.typescriptlang.org/cheatsheets">TypeScript Cheat Sheet</a>.</p><p><img src="/images/typescript/cheat-sheet-interface.png" alt="TypeScript Cheat Sheet - Interface"></p><span id="more"></span><p>You should also be familiar with <a href="https://v2.vuejs.org/v2/guide/typescript.html">Vue</a>, <a href="https://vue-loader.vuejs.org/guide/pre-processors.html#typescript">vue-loader</a>, and <a href="https://webpack.js.org/guides/typescript/">webpack</a>. Vue 2 already has good support for TypeScript, and the recently published <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html">Vue 2.7</a> backported a lot of useful features from Vue 3, like composition API, <code>&lt;script setup&gt;</code>, and <code>defineComponent</code>, further improving the developer experience of TypeScript in Vue.</p><p>Before you start, upgrade the existing tools to their latest version. <code>vue-loader</code> v15 is the <a href="https://github.com/vuejs/vue-loader/issues/1919">last version</a> that supports Vue 2. Consult the official documents if you encounter migration issues.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue@^2.7.8</span><br><span class="line">yarn add -D vue-template-compiler@^2.7.8 vue-loader@^15.10.0 webpack@^5.73.0</span><br></pre></td></tr></table></figure><h2 id="Install-TypeScript-and-ts-loader"><a href="#Install-TypeScript-and-ts-loader" class="headerlink" title="Install TypeScript and ts-loader"></a>Install TypeScript and <code>ts-loader</code></h2><p>First, add <code>typescript</code> and <code>ts-loader</code> as development dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D typescript ts-loader</span><br></pre></td></tr></table></figure><p>Add <code>ts-loader</code> to webpack config:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">          <span class="attr">transpileOnly</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now <code>.ts</code> files will go through <code>ts-loader</code> to get compiled. <code>vue-loader</code> will extract <code>&lt;script lang=&quot;ts&quot;&gt;</code> blocks from SFC (Single-File Components) and they also get compiled. The <code>resolve</code> and <code>appendTsSuffixTo</code> options allow TypeScript to import <code>.vue</code> files as modules. <code>transpileOnly</code> tells TypeScript compiler <em>not</em> to do type checks during compiling. This is for performance reasons, and we will cover it later.</p><p>A TypeScript project should have a <code>tsconfig.json</code> in the project root. A minimum example would be:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Options like <code>baseUrl</code> and <code>moduleResolution</code> tells TypeScript how to find and import a module. <code>allowJs</code> allows you to import JavaScript modules in <code>.ts</code> files. <code>skipLibCheck</code> tells TypeScript to ignore type errors in <code>node_modules</code> folder. <code>strict</code> turns on extra type checks, such as no implict <code>any</code> or <code>this</code>.</p><h2 id="Write-Vue-component-with-TypeScript"><a href="#Write-Vue-component-with-TypeScript" class="headerlink" title="Write Vue component with TypeScript"></a>Write Vue component with TypeScript</h2><p>In Vue 2.7, we can use <code>defineComponent</code> with Options API to get better type inference. The following example is taken directly from <a href="https://vuejs.org/guide/typescript/overview.html#definecomponent">Vue 3 document</a>. To enable type check in VS Code, install the <a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Volar</a> extension.</p><p><img src="/images/typescript/vue-component-in-vs-code.png" alt="Vue component in VS Code"></p><p>The <code>count</code> variable in template is correctly inferred as number type. We can add more type hints to component properties, emits, and event handlers. Please refer to the <a href="https://vuejs.org/guide/typescript/options-api.html">document</a> for further details.</p><p>Another example would be typing the API request and response data. Take Axios for an instance. This library is currently written in JavaScript, but comes with a <a href="https://github.com/axios/axios/blob/v0.27.2/index.d.ts">type declaration file</a> that adds type hints to the public API. We can combine it with our custom request&#x2F;response types.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LoginRequest</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoginResponse</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data: LoginRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> api.<span class="property">post</span>&lt;<span class="title class_">LoginResponse</span>&gt;(<span class="string">&#x27;/login&#x27;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke the API in an async function</span></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">login</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;Jerry&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">userId</span>)</span><br></pre></td></tr></table></figure><p>If you are using OpenAPI, you can generate typed clients from the specification file. I have written a blog on this topic: <em><a href="https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/">OpenAPI Workflow with Flask and TypeScript</a></em>.</p><p>We can also add delaration file to our legacy JavaScript modules. Say there is a <code>utils.js</code> module with some function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatBytes</span>(<span class="params">bytes</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (bytes &gt; <span class="number">1024</span>) <span class="keyword">return</span> (bytes / <span class="number">1024</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>) + <span class="string">&#x27;K&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a <code>utils.d.ts</code> file with the following content:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatBytes</span>(<span class="params">bytes: <span class="built_in">number</span></span>): <span class="built_in">string</span></span><br></pre></td></tr></table></figure><p>Now TypeScript will be able to analyze the code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; formatBytes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">formatBytes</span>(<span class="string">&#x27;256&#x27;</span>) <span class="comment">// Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h2 id="Check-types-during-development-and-build"><a href="#Check-types-during-development-and-build" class="headerlink" title="Check types during development and build"></a>Check types during development and build</h2><p>As mentioned above, the <code>transpileOnly</code> option tells <code>ts-loader</code> to skip type check so as to speed up the bundling process, but obviously drops the benifit of static typing. Though IDEs like VS Code + Volar will identify the problems during development, we still need to check types when someone is not using an IDE, or before a pull request is merged. For this purpose, we shall add other two tools:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D fork-ts-checker-webpack-plugin@^7.2.13 vue-tsc@^0.39.0</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/TypeStrong/fork-ts-checker-webpack-plugin">ForkTsCheckerWebpackPlugin</a>, as its name suggests, forks a separate process from webpack and do the heavy lifting type check.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpack 5.73.0 compiled successfully in 4177 ms</span><br><span class="line">Type-checking in progress...</span><br><span class="line">ERROR in ./src/services/user.ts:28:13</span><br><span class="line">TS2345: Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span><br><span class="line">    26 | &#125;</span><br><span class="line">    27 |</span><br><span class="line">  &gt; 28 | formatBytes(&#x27;256&#x27;)</span><br><span class="line">       |             ^^^^^</span><br><span class="line">    29 |</span><br><span class="line"></span><br><span class="line">Found 1 error in 11671 ms.</span><br></pre></td></tr></table></figure><p>After <code>yarn start</code>, local dev server will be available in 4s, and type check takes 11s to finish. The error message will also be displayed on the web page.</p><p><img src="/images/typescript/fork-ts-checker-webpack-plugin.png" alt="ForkTsCheckerWebpackPlugin"></p><p>Add this plugin to webpack config, and turn on its support for Vue SFC.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ForkTsCheckerWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;fork-ts-checker-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ForkTsCheckerWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">typescript</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, this plugin only solves the problem during development, we still need a way to do type check before someone merges his code. The solution is to put <a href="https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc"><code>vue-tsc</code></a> in the lint phase of your project. <code>tsc</code> is the TypeScript Compiler, and <code>vue-tsc</code> is a wrapper of that to support compiling TS code block in SFC. Modify the <code>lint</code> script in your <code>package.json</code> and setup a proper CI pipeline.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .vue,.ts,.js . &amp;&amp; vue-tsc --noEmit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="More-on-code-style-and-linting"><a href="#More-on-code-style-and-linting" class="headerlink" title="More on code style and linting"></a>More on code style and linting</h2><p>We usually use <code>eslint</code> to enforce various rules of coding convention, and <code>prettier</code> for auto formatting. TypeScript also has dedicated lint rules and style guide. Install the necessary eslint plugins:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><p>To make it work with <a href="https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser"><code>esling-plugin-vue</code></a>, use the following <code>.eslintrc.js</code> config:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Prettier also has built-in support for TypeScript. The <code>prettier</code> plugin in <code>extends</code> helps disabling some of the formatting rules. Here is an example of <code>.prettierrc.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>And do not forget to add <a href="https://typicode.github.io/husky/#/?id=install"><code>husky</code></a> and <a href="https://github.com/okonet/lint-staged"><code>lint-staged</code></a> to your toolchain, that helps auto linting and formatting your code before it is committed.</p><h2 id="Appendix-TypeScript-transpilers"><a href="#Appendix-TypeScript-transpilers" class="headerlink" title="Appendix: TypeScript transpilers"></a>Appendix: TypeScript transpilers</h2><p><code>tsc</code> is the official compiler but it slows down the bundling. So we enable <code>transpileOnly</code> option in <code>ts-loader</code> and add <code>ForkTsCheckerWebpackPlugin</code> to tackle this problem. There are other transpilers that <em>understand</em> TypeScript syntax, like <a href="https://babeljs.io/docs/en/babel-preset-typescript"><code>@babel/preset-typescript</code></a>, <a href="https://esbuild.github.io/content-types/#typescript">esbuild</a>, and <a href="https://swc.rs/blog/swc-1#typescript-support">SWC</a>, but apparently none of them does type check so the checker plugin is still necessary.</p><p>Another note on <a href="https://typescript-eslint.io/docs/linting/typed-linting">TypeScript ESLint</a> project. It does have some <em>type-aware</em> linting rules, but they are rather strict and will cause a lot of warnings. Use it judiciously.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended-requiring-type-checking&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">project</span>: [<span class="string">&#x27;./tsconfig.json&#x27;</span>],</span><br><span class="line">    <span class="attr">extraFileExtensions</span>: [<span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some warnings on an existing project:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/morph-fe/src/App.vue</span><br><span class="line"> 6:7   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br><span class="line">10:9   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br><span class="line">10:18  error  Unsafe member access .get on an `any` value  @typescript-eslint/no-unsafe-member-access</span><br><span class="line">10:18  error  Unsafe call of an `any` typed value          @typescript-eslint/no-unsafe-call</span><br><span class="line">12:5   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Now that TypeScript has become the de facto standard in frontend development, new projects and third-party libraries are mostly built on its ecosystem. For existing projects, TypeScript can also be applied gradually. Just add the toolchain, and start writing or rewriting part of your application. In this article, I will walk you through the steps of adding TypeScript to a Vue 2 project, since I myself is working on a legacy project, and TypeScript has brought a lot of benefits.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;For those who are new to TypeScript, I recommend you read the guide &lt;em&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html&quot;&gt;TypeScript for JavaScript Programmers&lt;/a&gt;&lt;/em&gt;. In short, TypeScript is a superset of JavaScript. It adds type hints to variables, as well as other syntax like class, interface, decorator, and some of them are already merged into ECMAScript. When compiling, TypeScript can do static type check. It will try to infer the variable type as much as possible, or you need to define the type explicitly. Here is the official &lt;a href=&quot;https://www.typescriptlang.org/cheatsheets&quot;&gt;TypeScript Cheat Sheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/typescript/cheat-sheet-interface.png&quot; alt=&quot;TypeScript Cheat Sheet - Interface&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="eslint" scheme="https://shzhangji.com/tags/eslint/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
    <category term="webpack" scheme="https://shzhangji.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Manage Multiple CommandLineRunner in Spring Boot</title>
    <link href="https://shzhangji.com/blog/2022/07/16/manage-multiple-command-line-runner-in-spring-boot/"/>
    <id>https://shzhangji.com/blog/2022/07/16/manage-multiple-command-line-runner-in-spring-boot/</id>
    <published>2022-07-16T10:17:30.000Z</published>
    <updated>2022-07-16T10:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Spring Boot, the <a href="https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.spring-application.command-line-runner"><code>CommandLineRunner</code></a> and <code>ApplicationRunner</code> are two utility interfaces that we can use to execute code when application is started. However, all beans that implement these interfaces will be invoked by Spring Boot, and it takes some effort to execute only a portion of them. This is especially important when you are developing a console application with multiple entry points. In this article, we will use several techniques to achieve this goal.</p><h2 id="Put-CommandLineRunner-in-different-packages"><a href="#Put-CommandLineRunner-in-different-packages" class="headerlink" title="Put CommandLineRunner in different packages"></a>Put CommandLineRunner in different packages</h2><p>By default, <code>@SpringBootApplication</code> will scan components (or beans) in current and descendant packages. When multiple <code>CommandLineRunner</code>s are discovered, Spring will execute them all. So the first approach will be separating those runners into different packages.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shzhangji.package_a;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(JobA.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run package_a.JobA&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there is a <code>JobB</code> in <code>package_b</code>, these two jobs will not affect each other. But one problem is, when executing <code>JobA</code>, only components defined under <code>package_a</code> will be scanned. So if <code>JobA</code> wants to use a service in <code>com.shzhangji.common</code> package, we have to import this class explicitly:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shzhangji.package_a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shzhangji.common.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import(UserService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there are multiple classes or packages that you want to import, you may as well change the base packages property:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;</span></span><br><span class="line"><span class="meta">    &quot;com.shzhangji.common&quot;,</span></span><br><span class="line"><span class="meta">    &quot;com.shzhangji.package_a&quot;,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Conditional-scanning-of-components"><a href="#Conditional-scanning-of-components" class="headerlink" title="Conditional scanning of components"></a>Conditional scanning of components</h2><p>So the basic idea is to expose only one <code>CommandLineRunner</code> to Spring’s component scanning mechanism. Luckily Spring Framework provides the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html"><code>@Conditional</code></a> annotation that can be used to filter beans based on system property, profile, or more complex conditions. As a matter of fact, Spring Boot’s auto configuration feature is largely based on <code>@Conditional</code>. For instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="meta">@ConditionalOnClass(&#123; Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TomcatWebServerFactoryCustomizerConfiguration</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ConditionalOnClass(&#123; Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JettyWebServerFactoryCustomizerConfiguration</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When initializing the embedded web server, Spring will check if Tomcat or Jetty is on the classpath (<code>@ConditionalOnClass</code>), and create the corresponding beans. The configuration class itself is also conditionally processed in a web environment (<code>@ConditionalOnWebApplication</code>).</p><p>In our situation, we shall use the <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.html"><code>@ConditionalOnProperty</code></a> annotation, that filters beans based on system properties. Say we accept a property named <code>job</code>, and only create the <code>CommandLineRunner</code> bean when their values match.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;job&quot;, havingValue = &quot;JobConditionalProperty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConditionalProperty</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobConditionalProperty&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To run this example in IDEA, use the following configuration:</p><p><img src="/images/command-line/conditional-on-property.png" alt="IDEA Config - ConditionalOnProperty"></p><p>The <code>-Djob</code> in VM options and <code>--job</code> in program arguments are equivalent, so you only need to specify once. This property can also be set in a configuration file.</p><p>Similar to <code>@Conditional</code>, <a href="https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.profiles">Spring Profiles</a> can also be used to filter beans.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile(&quot;JobByProfile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobByProfile</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobByProfile&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can either activate the profile in command line arguments or environment variables.</p><p><img src="/images/command-line/profile.png" alt="IDEA Config - Profile"></p><h2 id="Write-a-JobDispatcher"><a href="#Write-a-JobDispatcher" class="headerlink" title="Write a JobDispatcher"></a>Write a JobDispatcher</h2><p>Lastly, we can always add a middle layer to solve the problem, i.e. a <code>JobDispatcher</code> that decides which <code>Runnable</code> to run. Only this time, we use the <code>ApplicationRunner</code> instead, because it will help us parsing the command line arguments.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobDispatcher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AutowireCapableBeanFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">jobArgs</span> <span class="operator">=</span> args.getOptionValues(<span class="string">&quot;job&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (jobArgs == <span class="literal">null</span> || jobArgs.size() != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid argument --job&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">jobClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.shzhangji.demo.commandline.dispatcher.&quot;</span> + jobArgs.get(<span class="number">0</span>));</span><br><span class="line">    <span class="type">var</span> <span class="variable">job</span> <span class="operator">=</span> (Runnable) factory.createBean(jobClass);</span><br><span class="line">    job.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we pass <code>--job=JobDispatcherA</code> on the command line, the dispatcher will try to locate the job class, and initialize it with beans defined in context.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobDispatcherA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobDispatcherA in application context &#123;&#125;&quot;</span>, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/command-line">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Spring Boot, the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.spring-application.command-line-runner&quot;&gt;&lt;code&gt;CommandLineRunner&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; are two utility interfaces that we can use to execute code when application is started. However, all beans that implement these interfaces will be invoked by Spring Boot, and it takes some effort to execute only a portion of them. This is especially important when you are developing a console application with multiple entry points. In this article, we will use several techniques to achieve this goal.&lt;/p&gt;
&lt;h2 id=&quot;Put-CommandLineRunner-in-different-packages&quot;&gt;&lt;a href=&quot;#Put-CommandLineRunner-in-different-packages&quot; class=&quot;headerlink&quot; title=&quot;Put CommandLineRunner in different packages&quot;&gt;&lt;/a&gt;Put CommandLineRunner in different packages&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;@SpringBootApplication&lt;/code&gt; will scan components (or beans) in current and descendant packages. When multiple &lt;code&gt;CommandLineRunner&lt;/code&gt;s are discovered, Spring will execute them all. So the first approach will be separating those runners into different packages.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.shzhangji.package_a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SpringApplication.run(JobA.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.info(&lt;span class=&quot;string&quot;&gt;&amp;quot;Run package_a.JobA&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If there is a &lt;code&gt;JobB&lt;/code&gt; in &lt;code&gt;package_b&lt;/code&gt;, these two jobs will not affect each other. But one problem is, when executing &lt;code&gt;JobA&lt;/code&gt;, only components defined under &lt;code&gt;package_a&lt;/code&gt; will be scanned. So if &lt;code&gt;JobA&lt;/code&gt; wants to use a service in &lt;code&gt;com.shzhangji.common&lt;/code&gt; package, we have to import this class explicitly:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.shzhangji.package_a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.shzhangji.common.UserService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Import(UserService.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If there are multiple classes or packages that you want to import, you may as well change the base packages property:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication(scanBasePackages = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;quot;com.shzhangji.common&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;quot;com.shzhangji.package_a&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="spring" scheme="https://shzhangji.com/tags/spring/"/>
    
    <category term="spring boot" scheme="https://shzhangji.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Store Custom Data in Spring MVC Request Context</title>
    <link href="https://shzhangji.com/blog/2022/07/05/store-custom-data-in-spring-mvc-request-context/"/>
    <id>https://shzhangji.com/blog/2022/07/05/store-custom-data-in-spring-mvc-request-context/</id>
    <published>2022-07-05T00:04:41.000Z</published>
    <updated>2022-07-05T00:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>When developing a web application with Spring MVC, you want to make some data available throughout the current request, like authentication information, request identifier, etc. These data are injected into a request-scoped context, and destroyed after the request ends. There are several ways to achieve that, and this article will demonstrate how.</p><h2 id="Use-HttpServletRequest-or-WebRequest"><a href="#Use-HttpServletRequest-or-WebRequest" class="headerlink" title="Use HttpServletRequest or WebRequest"></a>Use HttpServletRequest or WebRequest</h2><p>Controller methods can delare an <code>HttpServletRequest</code> typed argument. When it is invoked, Spring will pass in an instance that contains information specific to the current request, like path and headers. It also provides a pair of methods that gets and sets custom attributes. For instance, Spring itself uses it to store application context, locale and theme resolver.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ctx</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ctx);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can certainly use it to store our own data, like in a <code>Filter</code> that sets the user information.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Spring also provides the <code>WebRequest</code> interface that abstracts away Java servlet class. Under the hood, they store data in the same place.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentUser</span><span class="params">(WebRequest request)</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>, WebRequest.SCOPE_REQUEST);</span><br><span class="line">  <span class="keyword">return</span> user.getUsername();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpServletRequest</code> can also be injected as a dependency. For example in a service class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">getFromRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;Get from HttpServletRequest: &#123;&#125;&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may need some knowledge of <a href="https://projectlombok.org/">Project Lombok</a> to understand the code. In short, when Spring initializes this service bean, it passes in a <strong>proxy</strong> object of <code>HttpServletRequest</code>. When <code>getFromRequest</code> is invoked, the <code>request</code> variable within will point to the current servlet request instance.</p><p>As we can see, using <code>HttpServletRequest</code> is straightforward, but it has two disadvantages. First, it is not type safe, we need to cast the return value. Second, the service layer should not know of the HTTP request. The context information we pass to lower layers should be decoupled. These two problems can be solved by the next approach.</p><h2 id="Annotate-context-bean-with-RequestScope"><a href="#Annotate-context-bean-with-RequestScope" class="headerlink" title="Annotate context bean with @RequestScope"></a>Annotate context bean with @RequestScope</h2><p>The default Spring <a href="https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#beans-factory-scopes">bean scope</a> is <code>singleton</code>, and there are other scopes like <code>prototype</code>, <code>request</code>, and <code>session</code>. When marked with <code>@RequestScope</code>, a new instance will be created for every HTTP request, and get destroyed accordingly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequestScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomContext</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When injected as a dependency, Spring also wraps it with a proxy object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CustomContext context;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">getFromScoped</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Get from request-scoped context: &#123;&#125;&quot;</span>, context.getUser());</span><br><span class="line">    <span class="keyword">return</span> context.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the service has a typed context object, and it is not coupled with the HTTP layer.</p><h2 id="RequestContextHolder-static-method"><a href="#RequestContextHolder-static-method" class="headerlink" title="RequestContextHolder static method"></a>RequestContextHolder static method</h2><p>There is a utility class <code>RequestContextHolder</code> from which we can get the <code>currentRequestAttributes</code>, latter is an implementation of <code>RequestAttributes</code> interface with <code>getAttribute</code> and <code>setAttribute</code> methods. The difference is this interface can be used to extract request-scoped attributes (stored in <code>HttpServletRequest</code>) <em>and</em> session-scoped attributes (in <code>HttpSession</code>). The <code>WebRequest</code> instance is actually backed by <code>RequestAttributes</code>, so is the <code>@RequestScope</code> annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">getFromRequestContextHolder</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) RequestContextHolder.currentRequestAttributes()</span><br><span class="line">      .getAttribute(<span class="string">&quot;user&quot;</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">  log.info(<span class="string">&quot;Get from RequestContextHolder: &#123;&#125;&quot;</span>, user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since <code>RequestContextHolder</code> is used via static methods, it is necessary to tackle the multithreading problems. The answer is obvious: <code>ThreadLocal</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RequestContextHolder</span>  &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>&lt;&gt;(<span class="string">&quot;Request attributes&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title function_">getRequestAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> requestAttributesHolder.get();</span><br><span class="line">    <span class="keyword">return</span> attributes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This gives us an idea of implementing the fourth approach, i.e. write our own thread-local request context.</p><h2 id="Thread-local-request-context"><a href="#Thread-local-request-context" class="headerlink" title="Thread-local request context"></a>Thread-local request context</h2><p>Each servlet request is handled in a separate thread, so we can use a thread-local object to hold the request-scoped context.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomContextHolder</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CustomContext&gt; holder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(CustomContext context)</span> &#123;</span><br><span class="line">    holder.set(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> CustomContext <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> holder.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    holder.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beware the thread that processes your request is borrowed from a thread pool, and you don’t want your previous request info leaking into the next, so let’s clean it up in the <code>Filter</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CustomContextHolder holder;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">threadLocalContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomContext</span>();</span><br><span class="line">    threadLocalContext.setUser(user);</span><br><span class="line">    holder.set(threadLocalContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      filterChain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      holder.remove();</span><br><span class="line">      log.info(<span class="string">&quot;Remove custom context from thread local.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/request-context">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;When developing a web application with Spring MVC, you want to make some data available throughout the current request, like authentication information, request identifier, etc. These data are injected into a request-scoped context, and destroyed after the request ends. There are several ways to achieve that, and this article will demonstrate how.&lt;/p&gt;
&lt;h2 id=&quot;Use-HttpServletRequest-or-WebRequest&quot;&gt;&lt;a href=&quot;#Use-HttpServletRequest-or-WebRequest&quot; class=&quot;headerlink&quot; title=&quot;Use HttpServletRequest or WebRequest&quot;&gt;&lt;/a&gt;Use HttpServletRequest or WebRequest&lt;/h2&gt;&lt;p&gt;Controller methods can delare an &lt;code&gt;HttpServletRequest&lt;/code&gt; typed argument. When it is invoked, Spring will pass in an instance that contains information specific to the current request, like path and headers. It also provides a pair of methods that gets and sets custom attributes. For instance, Spring itself uses it to store application context, locale and theme resolver.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@GetMapping(&amp;quot;/info&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; request.getAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String.valueOf(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can certainly use it to store our own data, like in a &lt;code&gt;Filter&lt;/code&gt; that sets the user information.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserFilter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;OncePerRequestFilter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;doFilterInternal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.setAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Jerry&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filterChain.doFilter(request, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="spring" scheme="https://shzhangji.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Monitor Kubernetes Volume Storage</title>
    <link href="https://shzhangji.com/blog/2022/07/01/monitor-kubernetes-volume-storage/"/>
    <id>https://shzhangji.com/blog/2022/07/01/monitor-kubernetes-volume-storage/</id>
    <published>2022-07-01T00:21:39.000Z</published>
    <updated>2022-07-01T00:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pods running on Kubernetes may claim a Persistent Volume to store data that last between pod restarts. This volume is usually of limited size, so we need to monitor its storage and alert for low free space. For stateless pods, it is also necessary to monitor its disk usage, since the application within may write logs or other contents directly onto the Docker writable layer. In Kubernetes terms, this space is called ephemeral storage. Another way to prevent ephemeral storge from filling up is to monitor the nodes’ disk space directly. This article will demonstrate how to monitor volume storage with Prometheus.</p><h2 id="Monitor-Persistent-Volume"><a href="#Monitor-Persistent-Volume" class="headerlink" title="Monitor Persistent Volume"></a>Monitor Persistent Volume</h2><p><code>kubelet</code> exposes the following metrics for Persistent Volumes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://10.0.0.1:10255/metrics</span><br><span class="line"># HELP kubelet_volume_stats_capacity_bytes [ALPHA] Capacity in bytes of the volume</span><br><span class="line"># TYPE kubelet_volume_stats_capacity_bytes gauge</span><br><span class="line">kubelet_volume_stats_capacity_bytes&#123;namespace=&quot;airflow&quot;,persistentvolumeclaim=&quot;data-airflow2-postgresql-0&quot;&#125; 4.214145024e+10</span><br><span class="line">kubelet_volume_stats_capacity_bytes&#123;namespace=&quot;default&quot;,persistentvolumeclaim=&quot;grafana&quot;&#125; 2.1003583488e+10</span><br><span class="line"></span><br><span class="line"># HELP kubelet_volume_stats_used_bytes [ALPHA] Number of used bytes in the volume</span><br><span class="line"># TYPE kubelet_volume_stats_used_bytes gauge</span><br><span class="line">kubelet_volume_stats_used_bytes&#123;namespace=&quot;airflow&quot;,persistentvolumeclaim=&quot;data-airflow2-postgresql-0&quot;&#125; 4.086779904e+09</span><br><span class="line">kubelet_volume_stats_used_bytes&#123;namespace=&quot;default&quot;,persistentvolumeclaim=&quot;grafana&quot;&#125; 4.9381376e+07</span><br></pre></td></tr></table></figure><p>After you setup the <a href="https://github.com/prometheus-operator/kube-prometheus">Prometheus Stack</a> with <a href="https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack">Helm chart</a>, you will get a Service and ServiceMonitor that help scraping these metrics. Then they can be queried in Prometheus UI:</p><p><img src="/images/k8s-volume/prometheus-ui.png" alt="Prometheus UI"></p><span id="more"></span><p>And visualized with Grafana:</p><p><img src="/images/k8s-volume/grafana.png" alt="Grafana"></p><p>Here is a simple alert rule that warns on disk usage:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">PrometheusPV</span></span><br><span class="line">  <span class="attr">expr:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    sum(kubelet_volume_stats_used_bytes&#123;persistentvolumeclaim=&quot;prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0&quot;&#125;)</span></span><br><span class="line"><span class="string">    / sum(kubelet_volume_stats_capacity_bytes&#123;persistentvolumeclaim=&quot;prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0&quot;&#125;)</span></span><br><span class="line"><span class="string">    &gt; 0.8</span></span><br><span class="line"><span class="string"></span>  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Prometheus</span> <span class="string">PV</span> <span class="string">disk</span> <span class="string">usage</span> <span class="string">is</span> <span class="string">greater</span> <span class="string">than</span> <span class="number">80</span><span class="string">%.</span></span><br></pre></td></tr></table></figure><h2 id="Monitor-Ephemeral-Storage"><a href="#Monitor-Ephemeral-Storage" class="headerlink" title="Monitor Ephemeral Storage"></a>Monitor Ephemeral Storage</h2><p>According to <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-emphemeralstorage-consumption">Kubernetes documentation</a>, ephemeral storage consists of <code>emptyDir</code>, logs, and the above-mentioned <a href="https://docs.docker.com/storage/storagedriver/">writable container layer</a>. One can limit the use of ephemeral storage by configuring <code>resources</code> in container spec:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;4Gi&quot;</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ephemeral</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ephemeral</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>kubelet</code> integrates the <a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md">cAdvisor</a> (Container Advisor) utility, which exposes a series of container metrics:</p><table><thead><tr><th>Metric name</th><th>Type</th><th>Description</th><th>Unit</th></tr></thead><tbody><tr><td><strong>container_fs_usage_bytes</strong></td><td>Gauge</td><td>Number of bytes that are consumed by the container on this filesystem</td><td>bytes</td></tr><tr><td>container_memory_working_set_bytes</td><td>Gauge</td><td>Current working set</td><td>bytes</td></tr><tr><td>container_cpu_usage_seconds_total</td><td>Counter</td><td>Cumulative cpu time consumed</td><td>seconds</td></tr><tr><td>container_network_transmit_bytes_total</td><td>Counter</td><td>Cumulative count of bytes transmitted</td><td>bytes</td></tr></tbody></table><p>To get the <code>limits</code> we specified in pod spec, we need the help of <a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs"><code>kube-state-metrics</code></a> that exposes a metric named <code>kube_pod_container_resource_limits</code>:</p><table><thead><tr><th>Metric name</th><th>Value</th></tr></thead><tbody><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;”nginx-57bf55c5b5-n7vzp”, resource&#x3D;”memory”, unit&#x3D;”byte”}</td><td>67108864</td></tr><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;”nginx-57bf55c5b5-n7vzp”, resource&#x3D;”cpu”, unit&#x3D;”core”}</td><td>0.1</td></tr><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;”nginx-57bf55c5b5-n7vzp”, resource&#x3D;”ephemeral_storage”, unit&#x3D;”byte”}</td><td>1073741824</td></tr></tbody></table><p>If a pod is using more disk space than expected, it is usually because of application logs. One can adjust the log level, mount a dedicated PV for logging, or clear log files periodically. To temporarily solve the alert, just restart the Deployment or StatefulSet.</p><h2 id="Monitor-Node-Disk-Space"><a href="#Monitor-Node-Disk-Space" class="headerlink" title="Monitor Node Disk Space"></a>Monitor Node Disk Space</h2><p>Though all cloud infrastructure providers have out-of-the-box warnings for virtual machines’ disk space, we can still setup our own graphs and alerts. Prometheus has built-in <a href="https://github.com/prometheus/node_exporter"><code>node-exporter</code></a> metrics:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum(</span><br><span class="line">    max by (device) (</span><br><span class="line">        node_filesystem_size_bytes&#123;job=&quot;node-exporter&quot;, instance=&quot;10.0.0.1:9100&quot;, fstype!=&quot;&quot;&#125;</span><br><span class="line">    -</span><br><span class="line">        node_filesystem_avail_bytes&#123;job=&quot;node-exporter&quot;, instance=&quot;10.0.0.1:9100&quot;, fstype!=&quot;&quot;&#125;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/k8s-volume/node-filesystem-size.png" alt="Node filesystem size"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pods running on Kubernetes may claim a Persistent Volume to store data that last between pod restarts. This volume is usually of limited size, so we need to monitor its storage and alert for low free space. For stateless pods, it is also necessary to monitor its disk usage, since the application within may write logs or other contents directly onto the Docker writable layer. In Kubernetes terms, this space is called ephemeral storage. Another way to prevent ephemeral storge from filling up is to monitor the nodes’ disk space directly. This article will demonstrate how to monitor volume storage with Prometheus.&lt;/p&gt;
&lt;h2 id=&quot;Monitor-Persistent-Volume&quot;&gt;&lt;a href=&quot;#Monitor-Persistent-Volume&quot; class=&quot;headerlink&quot; title=&quot;Monitor Persistent Volume&quot;&gt;&lt;/a&gt;Monitor Persistent Volume&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kubelet&lt;/code&gt; exposes the following metrics for Persistent Volumes:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://10.0.0.1:10255/metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# HELP kubelet_volume_stats_capacity_bytes [ALPHA] Capacity in bytes of the volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# TYPE kubelet_volume_stats_capacity_bytes gauge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_capacity_bytes&amp;#123;namespace=&amp;quot;airflow&amp;quot;,persistentvolumeclaim=&amp;quot;data-airflow2-postgresql-0&amp;quot;&amp;#125; 4.214145024e+10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_capacity_bytes&amp;#123;namespace=&amp;quot;default&amp;quot;,persistentvolumeclaim=&amp;quot;grafana&amp;quot;&amp;#125; 2.1003583488e+10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# HELP kubelet_volume_stats_used_bytes [ALPHA] Number of used bytes in the volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# TYPE kubelet_volume_stats_used_bytes gauge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_used_bytes&amp;#123;namespace=&amp;quot;airflow&amp;quot;,persistentvolumeclaim=&amp;quot;data-airflow2-postgresql-0&amp;quot;&amp;#125; 4.086779904e+09&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_used_bytes&amp;#123;namespace=&amp;quot;default&amp;quot;,persistentvolumeclaim=&amp;quot;grafana&amp;quot;&amp;#125; 4.9381376e+07&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;After you setup the &lt;a href=&quot;https://github.com/prometheus-operator/kube-prometheus&quot;&gt;Prometheus Stack&lt;/a&gt; with &lt;a href=&quot;https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack&quot;&gt;Helm chart&lt;/a&gt;, you will get a Service and ServiceMonitor that help scraping these metrics. Then they can be queried in Prometheus UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s-volume/prometheus-ui.png&quot; alt=&quot;Prometheus UI&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="kubernetes" scheme="https://shzhangji.com/tags/kubernetes/"/>
    
    <category term="prometheus" scheme="https://shzhangji.com/tags/prometheus/"/>
    
    <category term="devops" scheme="https://shzhangji.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Write Your Own Flask SQLAlchemy Extension</title>
    <link href="https://shzhangji.com/blog/2022/06/26/write-your-own-flask-sqlalchemy-extension/"/>
    <id>https://shzhangji.com/blog/2022/06/26/write-your-own-flask-sqlalchemy-extension/</id>
    <published>2022-06-26T04:53:16.000Z</published>
    <updated>2022-06-26T04:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to connecting to database in Flask project, we tend to use the <a href="https://flask-sqlalchemy.palletsprojects.com/">Flask-SQLAlchemy</a> extension that handles the lifecycle of database connection, add a certain of utilities for defining models and executing queries, and integrate well with the Flask framework. However, if you are developing a rather simple project with Flask and SQLAlchemy, and do not want to depend on another third-party library, or you prefer using SQLAlchemy directly, making the model layer agnostic of web frameworks, you can write your own extension. Besides, you will gain better type hints for SQLAlchemy model, and possibly easier migration to SQLAlchemy 2.x. This article will show you how to integrate SQLAlchemy 1.4 with Flask 2.1.</p><h2 id="The-alpha-version"><a href="#The-alpha-version" class="headerlink" title="The alpha version"></a>The alpha version</h2><p>In the official document <a href="https://flask.palletsprojects.com/en/2.1.x/extensiondev/">Flask Extension Development</a>, it shows us writing a sqlite3 extension that plays well with Flask application context. So our first try is to replace sqlite3 with SQLAlchemy:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</span><br><span class="line"><span class="keyword">from</span> flask.<span class="built_in">globals</span> <span class="keyword">import</span> _app_ctx_stack, _app_ctx_err_msg</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine <span class="keyword">import</span> Engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLAlchemyAlpha</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, app: <span class="type">Optional</span>[Flask] = <span class="literal">None</span></span>):</span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> app <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">        app.config.setdefault(<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>, <span class="string">&#x27;sqlite://&#x27;</span>)</span><br><span class="line">        app.teardown_appcontext(self.teardown)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>) -&gt; Engine:</span><br><span class="line">        <span class="keyword">return</span> create_engine(current_app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy&#x27;</span>):</span><br><span class="line">            ctx.sqlalchemy.dispose()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">engine</span>(<span class="params">self</span>) -&gt; Engine:</span><br><span class="line">        ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy&#x27;</span>):</span><br><span class="line">                ctx.sqlalchemy = self.connect()</span><br><span class="line">            <span class="keyword">return</span> ctx.sqlalchemy</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br></pre></td></tr></table></figure><span id="more"></span><p>Several notes on our alpha version. First, it plays well with the <a href="https://flask.palletsprojects.com/en/2.1.x/patterns/appfactories/">Application Factories</a>, that means the extension can be used to initialize multiple application instances, with different configurations for web server, testing, etc. The key point is to provide an <code>init_app</code> method for different apps, and use the <code>current_app</code> proxy during work. To initialize the app:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemyAlpha(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">db = SQLAlchemyAlpha()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>() -&gt; Flask:</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>Second, it plays well with <a href="https://flask.palletsprojects.com/en/2.1.x/appcontext/">The Application Context</a>, by storing data on current app context’s stack, instead of on the extension instance, i.e. <code>self.some_attr</code>. When the <code>engine</code> attribute is first accessed, the extension creates a SQLAlchemy engine with the current app’s config, and stores it on the current app context. When this context is popped, the engine object is also disposed, releasing the connection pool. Flask will automatically push and pop application context during request and command line interface. Here is an example of CLI:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_alpha</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test alpha extension.&quot;&quot;&quot;</span></span><br><span class="line">    user_count = db_alpha.engine.execute(<span class="string">&#x27;SELECT COUNT(*) FROM `user`&#x27;</span>).scalar_one()</span><br><span class="line">    app.logger.info(<span class="string">f&#x27;User count: <span class="subst">&#123;user_count&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Keep-engine-around"><a href="#Keep-engine-around" class="headerlink" title="Keep engine around"></a>Keep engine around</h2><p>The major problem of the alpha version is constantly creating and disposing SQLAlchemy engine objects. And we known <a href="https://docs.sqlalchemy.org/en/14/core/connections.html">Engine</a> is rather a heavy object to construct, and should be kept around throughout the lifespan of the application. There is an extension point of the Flask app instance, where we can store data for the entire app.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">    url = app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>]</span><br><span class="line">    app.extensions[<span class="string">&#x27;sqlalchemy&#x27;</span>] = create_engine(url)</span><br><span class="line">    app.teardown_appcontext(self.teardown)</span><br></pre></td></tr></table></figure><p>For working with SQLAlchemy, we often prefer using sessions, so in the extension we need to create a session for each request, and properly close it after the context is popped.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>) -&gt; Session:</span><br><span class="line">    <span class="keyword">return</span> Session(current_app.extensions[<span class="string">&#x27;sqlalchemy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy_session&#x27;</span>):</span><br><span class="line">        ctx.sqlalchemy_session.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">session</span>(<span class="params">self</span>) -&gt; Session:</span><br><span class="line">    ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> ctx <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy_session&#x27;</span>):</span><br><span class="line">        ctx.sqlalchemy_session = self.connect()</span><br><span class="line">    <span class="keyword">return</span> ctx.sqlalchemy_session</span><br></pre></td></tr></table></figure><p>You may wonder why we don’t use <a href="https://docs.sqlalchemy.org/en/14/orm/contextual.html"><code>scoped_session</code></a>, which is the recommended way to use sessions in a multi-thread environment. The answer is simple: an application context will not be shared by different workers, so it is safe to use the same session throughout the request. And, since session is a light-weight object, it is OK to create it on every request. Check Werkzeug <a href="https://werkzeug.palletsprojects.com/en/2.1.x/local/">Context Locals</a> for more information.</p><h2 id="Define-models-in-a-native-way"><a href="#Define-models-in-a-native-way" class="headerlink" title="Define models in a native way"></a>Define models in a native way</h2><p>Now that we have a simple but fully functional flask-sqlalchemy extension, we can start writing models in a native way.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String)</span><br></pre></td></tr></table></figure><p>There is no <code>db.Model</code> or <code>db.Integer</code>. The model base class need to be declared explicitly, as well as the table name of each model. Add a CLI that creates the tables:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Initialize database.&quot;&quot;&quot;</span></span><br><span class="line">    Base.metadata.create_all(db.session.get_bind())</span><br></pre></td></tr></table></figure><p>And execute query in a view:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/user/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_list</span>() -&gt; Response:</span><br><span class="line">    users: <span class="type">List</span>[User] = db.session.query(User).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> jsonify(users=users)</span><br></pre></td></tr></table></figure><p>To enable type hints for SQLAlchemy models, install <code>sqlalchemy2-stubs</code> and enable the plugin in <code>mypy.ini</code>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mypy]</span></span><br><span class="line"><span class="attr">warn_unused_configs</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">plugins</span> = sqlalchemy.ext.mypy.plugin</span><br></pre></td></tr></table></figure><p>Now <code>user.id</code> will have the type <code>Column[Integer]</code>. This will continue to work in SQLAlchemy 2.x, except no extra dependency is needed. You may want to read the document <a href="https://docs.sqlalchemy.org/en/14/orm/extensions/mypy.html">Mypy Support for ORM Mappings</a>.</p><p>Source code in this article can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/native-sqlalchemy">GitHub</a>.</p><h2 id="Appendix-I-Serialize-SQLAlchemy-models-to-JSON"><a href="#Appendix-I-Serialize-SQLAlchemy-models-to-JSON" class="headerlink" title="Appendix I: Serialize SQLAlchemy models to JSON"></a>Appendix I: Serialize SQLAlchemy models to JSON</h2><p>Flask’s built-in JSON serializer does not recoganize SQLAlchemy models, neither the frequently used <code>Decimal</code> and <code>datetime</code> objects. But we can easily enhance it with a custom encoder:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.json <span class="keyword">import</span> JSONEncoder</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.row <span class="keyword">import</span> Row</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm.decl_api <span class="keyword">import</span> DeclarativeMeta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomEncoder</span>(<span class="title class_ inherited__">JSONEncoder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Decimal):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Row):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">dict</span>(obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj.__class__, DeclarativeMeta):</span><br><span class="line">            <span class="keyword">return</span> &#123;c.name: <span class="built_in">getattr</span>(obj, c.name) <span class="keyword">for</span> c <span class="keyword">in</span> obj.__table__.columns&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().default(obj)</span><br></pre></td></tr></table></figure><p><code>Row</code> is for core engine use case, and <code>DeclarativeMeta</code> for ORM. Add a line when creating the app:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.json_encoder = CustomEncoder</span><br></pre></td></tr></table></figure><h2 id="Appendix-II-Support-multiple-database-binds"><a href="#Appendix-II-Support-multiple-database-binds" class="headerlink" title="Appendix II: Support multiple database binds"></a>Appendix II: Support multiple database binds</h2><p>If you are interested in supporting multiple binds like Flask-SQLAlchemy does, here is a proof of concept. But for such complex scenario, I suggest use the opensource extension instead, for it is more mature, feature-complete, and fully tested.</p><p>This time we do not create engine on app startup. We create scoped sessions on demand.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; scoped_session:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;default&#x27;</span>:</span><br><span class="line">        url = current_app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = current_app.config[<span class="string">&#x27;SQLALCHEMY_BINDS&#x27;</span>][name]</span><br><span class="line"></span><br><span class="line">    engine = create_engine(url, echo=echo)</span><br><span class="line">    session_factory = sessionmaker(bind=engine)</span><br><span class="line">    <span class="keyword">return</span> scoped_session(session_factory)</span><br></pre></td></tr></table></figure><p>The configuration style mimics Flask-SQLAlchemy. This version of <code>connect</code> will return a properly configured <code>scoped_session</code> object, and it will be shared among different workers, so we store it in the app’s <code>extensions</code> dict.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Holder</span>:</span><br><span class="line">    sessions: <span class="type">Dict</span>[<span class="built_in">str</span>, scoped_session]</span><br><span class="line">    lock: Lock</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sessions = &#123;&#125;</span><br><span class="line">        self.lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLAlchemyMulti</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">        app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>] = Holder()</span><br><span class="line">        app.teardown_appcontext(self.teardown)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_session</span>(<span class="params">self, name: <span class="built_in">str</span> = <span class="string">&#x27;default&#x27;</span></span>) -&gt; Session:</span><br><span class="line">        holder: Holder = current_app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>]</span><br><span class="line">        <span class="keyword">with</span> holder.lock:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> holder.sessions:</span><br><span class="line">                holder.sessions[name] = self.connect(name)</span><br><span class="line">            <span class="keyword">return</span> holder.sessions[name]()</span><br></pre></td></tr></table></figure><p>Note the creation of the <code>scoped_session</code> object is not thread-safe, so we guard it with a lock. Again, this lock should not be stored as extension instance’s attribute, we create a <code>Holder</code> class to hold both the lock and scoped sessions.</p><p>Do not forget to do the cleanup work:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    holder: Holder = current_app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> session <span class="keyword">in</span> holder.sessions.values():</span><br><span class="line">        session.remove()</span><br></pre></td></tr></table></figure><p><code>scoped_session.remove</code> will invoke <code>close</code> on the session and remove it from its registry. Next request will get a brand new session object.</p><p>We can verify if it uses the desired connection:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_db</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Access product database.&quot;&quot;&quot;</span></span><br><span class="line">    db_file = db_multi.get_session(<span class="string">&#x27;product_db&#x27;</span>).execute(</span><br><span class="line">        text(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT `file` FROM pragma_database_list</span></span><br><span class="line"><span class="string">        WHERE `name` = :name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>),</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ).scalar()</span><br><span class="line">    app.logger.info(<span class="string">f&#x27;Database file: <span class="subst">&#123;db_file&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;When it comes to connecting to database in Flask project, we tend to use the &lt;a href=&quot;https://flask-sqlalchemy.palletsprojects.com/&quot;&gt;Flask-SQLAlchemy&lt;/a&gt; extension that handles the lifecycle of database connection, add a certain of utilities for defining models and executing queries, and integrate well with the Flask framework. However, if you are developing a rather simple project with Flask and SQLAlchemy, and do not want to depend on another third-party library, or you prefer using SQLAlchemy directly, making the model layer agnostic of web frameworks, you can write your own extension. Besides, you will gain better type hints for SQLAlchemy model, and possibly easier migration to SQLAlchemy 2.x. This article will show you how to integrate SQLAlchemy 1.4 with Flask 2.1.&lt;/p&gt;
&lt;h2 id=&quot;The-alpha-version&quot;&gt;&lt;a href=&quot;#The-alpha-version&quot; class=&quot;headerlink&quot; title=&quot;The alpha version&quot;&gt;&lt;/a&gt;The alpha version&lt;/h2&gt;&lt;p&gt;In the official document &lt;a href=&quot;https://flask.palletsprojects.com/en/2.1.x/extensiondev/&quot;&gt;Flask Extension Development&lt;/a&gt;, it shows us writing a sqlite3 extension that plays well with Flask application context. So our first try is to replace sqlite3 with SQLAlchemy:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask, current_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask.&lt;span class=&quot;built_in&quot;&gt;globals&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; _app_ctx_stack, _app_ctx_err_msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; create_engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy.engine &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SQLAlchemyAlpha&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, app: &lt;span class=&quot;type&quot;&gt;Optional&lt;/span&gt;[Flask] = &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.app = app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; app &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.init_app(app)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;init_app&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, app: Flask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app.config.setdefault(&lt;span class=&quot;string&quot;&gt;&amp;#x27;SQLALCHEMY_DATABASE_URI&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlite://&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app.teardown_appcontext(self.teardown)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;connect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;) -&amp;gt; Engine:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; create_engine(current_app.config[&lt;span class=&quot;string&quot;&gt;&amp;#x27;SQLALCHEMY_DATABASE_URI&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;teardown&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, exception&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx = _app_ctx_stack.top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(ctx, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlalchemy&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.sqlalchemy.dispose()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;engine&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;) -&amp;gt; Engine:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx = _app_ctx_stack.top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ctx &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(ctx, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlalchemy&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ctx.sqlalchemy = self.connect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctx.sqlalchemy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; RuntimeError(_app_ctx_err_msg)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="sqlalchemy" scheme="https://shzhangji.com/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPI Workflow with Flask and TypeScript</title>
    <link href="https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/"/>
    <id>https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/</id>
    <published>2022-06-19T06:48:27.000Z</published>
    <updated>2022-06-19T06:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.openapis.org/">OpenAPI</a> has become the de facto standard of designing web APIs, and there are numerous tools developed around its ecosystem. In this article, I will demonstrate the workflow of using OpenAPI in both backend and frontend projects.</p><p><img src="/images/openapi-workflow/openapi-3.0.png" alt="OpenAPI 3.0"></p><h2 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h2><p>There are <a href="https://swagger.io/blog/api-design/design-first-or-code-first-api-development/">code first and design first</a> approaches when using OpenAPI, and here we go with code first approach, i.e. writing the API server first, add specification to the method docs, then generate the final OpenAPI specification. The API server will be developed with Python <a href="https://flask.palletsprojects.com/">Flask</a> framework and <a href="https://apispec.readthedocs.io/">apispec</a> library with <a href="https://marshmallow.readthedocs.io/">marshmallow</a> extension. Let’s first install the dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flask==2.1.2</span><br><span class="line">Flask-Cors==3.0.10</span><br><span class="line">Flask-SQLAlchemy==2.5.1</span><br><span class="line">SQLAlchemy==1.4.36</span><br><span class="line">python-dotenv==0.20.0</span><br><span class="line">apispec[marshmallow]==5.2.2</span><br><span class="line">apispec-webframeworks==0.5.2</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Get-post-list"><a href="#Get-post-list" class="headerlink" title="Get post list"></a>Get post list</h3><p>We will develop a simple blog post list page like this:</p><p><img src="/images/openapi-workflow/blog-post-list.png" alt="Blog post list"></p><p>The first API we implement is <code>get_post_list</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/post/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post_list</span>() -&gt; Response:</span><br><span class="line">    page = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">    sort = request.args.get(<span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    query = db.session.query(Post)</span><br><span class="line">    <span class="keyword">if</span> sort == <span class="string">&#x27;asc&#x27;</span>:</span><br><span class="line">        query = query.order_by(Post.updated_at.asc())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        query = query.order_by(Post.updated_at.desc())</span><br><span class="line"></span><br><span class="line">    query = query.offset((page - <span class="number">1</span>) * PAGE_SIZE).limit(PAGE_SIZE)</span><br><span class="line">    posts = query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> jsonify(posts=post_schema.dump(posts, many=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>It is a regular web API, that parses the GET parameters, construct a SQLAlchemy query with pagination, and return the post list. The only thing special here is <code>post_schema</code>, which uses the marshmallow library to serialize post items. The schema is defined as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span> = fields.Integer()</span><br><span class="line">    title = fields.String(required=<span class="literal">True</span>, validate=validate.Length(<span class="built_in">min</span>=<span class="number">1</span>))</span><br><span class="line">    content = fields.String(required=<span class="literal">True</span>, validate=validate.Length(<span class="built_in">min</span>=<span class="number">1</span>))</span><br><span class="line">    updated_at = fields.DateTime(<span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, dump_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post_schema = PostSchema()</span><br></pre></td></tr></table></figure><p>The schema is not that different from the SQLAlchemy model, but with extra information about validation, format, and whether some field should be dumped to the output. We will see how to use the schema to deserialize and validate the form data, later in <code>save_post</code> API.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String)</span><br><span class="line">    content = db.Column(db.String)</span><br><span class="line">    updated_at = db.Column(db.DateTime)</span><br></pre></td></tr></table></figure><h3 id="Add-spec-to-docstring"><a href="#Add-spec-to-docstring" class="headerlink" title="Add spec to docstring"></a>Add spec to docstring</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/post/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post_list</span>() -&gt; Response:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">      summary: Get post list.</span></span><br><span class="line"><span class="string">      tags: [post]</span></span><br><span class="line"><span class="string">      x-swagger-router-controller: oasis.views</span></span><br><span class="line"><span class="string">      operationId: get_post_list</span></span><br><span class="line"><span class="string">      parameters:</span></span><br><span class="line"><span class="string">        - in: query</span></span><br><span class="line"><span class="string">          name: page</span></span><br><span class="line"><span class="string">          schema:</span></span><br><span class="line"><span class="string">            type: integer</span></span><br><span class="line"><span class="string">            minimum: 1</span></span><br><span class="line"><span class="string">        - in: query</span></span><br><span class="line"><span class="string">          name: sort</span></span><br><span class="line"><span class="string">          schema:</span></span><br><span class="line"><span class="string">            type: string</span></span><br><span class="line"><span class="string">            enum: [asc, desc]</span></span><br><span class="line"><span class="string">      responses:</span></span><br><span class="line"><span class="string">        &#x27;200&#x27;:</span></span><br><span class="line"><span class="string">          description: OK</span></span><br><span class="line"><span class="string">          content:</span></span><br><span class="line"><span class="string">            application/json:</span></span><br><span class="line"><span class="string">              schema:</span></span><br><span class="line"><span class="string">                type: object</span></span><br><span class="line"><span class="string">                properties:</span></span><br><span class="line"><span class="string">                  posts:</span></span><br><span class="line"><span class="string">                    type: array</span></span><br><span class="line"><span class="string">                    items:</span></span><br><span class="line"><span class="string">                      $ref: &#x27;#/components/schemas/Post&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>The YAML is exactly the same as OpenAPI specification states, except the apispec library will use the route and schema to generate the complete spec file.</p><h3 id="Generate-specification-file"><a href="#Generate-specification-file" class="headerlink" title="Generate specification file"></a>Generate specification file</h3><p>To wire these routes and schemas, we create an <code>openapi.py</code> file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apispec <span class="keyword">import</span> APISpec</span><br><span class="line"><span class="keyword">from</span> apispec.ext.marshmallow <span class="keyword">import</span> MarshmallowPlugin</span><br><span class="line"><span class="keyword">from</span> apispec_webframeworks.flask <span class="keyword">import</span> FlaskPlugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> oasis <span class="keyword">import</span> app, views, schemas</span><br><span class="line"></span><br><span class="line">spec = APISpec(</span><br><span class="line">    title=<span class="string">&#x27;Oasis&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.1.0&#x27;</span>,</span><br><span class="line">    openapi_version=<span class="string">&#x27;3.0.2&#x27;</span>,</span><br><span class="line">    info=&#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Demo project for OpenAPI workflow.&#x27;</span>&#125;,</span><br><span class="line">    plugins=[FlaskPlugin(), MarshmallowPlugin()],</span><br><span class="line">    servers=[&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">spec.components.schema(<span class="string">&#x27;Post&#x27;</span>, schema=schemas.PostSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    spec.path(view=views.get_post_list)</span><br></pre></td></tr></table></figure><p>And then a CLI command tool to generate the specification:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> oasis <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> oasis.openapi <span class="keyword">import</span> spec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate OpenAPI specification.&quot;&quot;&quot;</span></span><br><span class="line">    spec_path = Path(__file__).parent.joinpath(<span class="string">&#x27;../openapi.yaml&#x27;</span>).resolve()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(spec_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;# DO NOT EDIT\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;# Auto generated by &quot;flask gen&quot;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(spec.to_yaml())</span><br><span class="line"></span><br><span class="line">    app.logger.info(<span class="string">f&#x27;Generated <span class="subst">&#123;spec_path&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The output file <code>openapi.yaml</code> looks like this:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Demo</span> <span class="string">project</span> <span class="string">for</span> <span class="string">OpenAPI</span> <span class="string">workflow.</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Oasis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://127.0.0.1:5000</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/api/post/list:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Get</span> <span class="string">post</span> <span class="string">list.</span></span><br><span class="line">      <span class="attr">x-swagger-router-controller:</span> <span class="string">oasis.views</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">get_post_list</span></span><br><span class="line">      <span class="attr">parameters:</span> [<span class="string">...</span>]</span><br><span class="line">      <span class="attr">responses:</span> &#123;<span class="string">...</span>&#125;</span><br><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">Post:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">        <span class="attr">title:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">updated_at:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">date-time</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">content</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">title</span></span><br></pre></td></tr></table></figure><h3 id="More-on-post-API"><a href="#More-on-post-API" class="headerlink" title="More on post API"></a>More on post API</h3><p>Let’s create another API that accepts form data, validate them, and save to database.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/api/post/save&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_post</span>() -&gt; Response:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">      summary: Save post.</span></span><br><span class="line"><span class="string">      tags: [post]</span></span><br><span class="line"><span class="string">      x-swagger-router-controller: oasis.views</span></span><br><span class="line"><span class="string">      operationId: save_post</span></span><br><span class="line"><span class="string">      requestBody:</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string">        content:</span></span><br><span class="line"><span class="string">          application/x-www-form-urlencoded:</span></span><br><span class="line"><span class="string">            schema:</span></span><br><span class="line"><span class="string">              $ref: &#x27;#/components/schemas/Post&#x27;</span></span><br><span class="line"><span class="string">      responses:</span></span><br><span class="line"><span class="string">        &#x27;200&#x27;:</span></span><br><span class="line"><span class="string">          description: OK</span></span><br><span class="line"><span class="string">          content:</span></span><br><span class="line"><span class="string">            application/json:</span></span><br><span class="line"><span class="string">              schema:</span></span><br><span class="line"><span class="string">                type: object</span></span><br><span class="line"><span class="string">                properties:</span></span><br><span class="line"><span class="string">                  id:</span></span><br><span class="line"><span class="string">                    type: integer</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_form = post_schema.load(request.form)</span><br><span class="line">    <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> AppError(e.messages)</span><br><span class="line"></span><br><span class="line">    post = Post(**post_form)</span><br><span class="line">    post = db.session.merge(post)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure><p>We can write custom validation in the schema file. It is also a good way to separate concerns.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validates(<span class="params"><span class="string">&#x27;id&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_id</span>(<span class="params">self, value: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        post = db.session.query(Post).get(value)</span><br><span class="line">        <span class="keyword">if</span> post <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Post ID not found.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Preview-API-docs"><a href="#Preview-API-docs" class="headerlink" title="Preview API docs"></a>Preview API docs</h3><p>OpenAPI enjoys a nice documentation UI that you can preview in VS Code. Install the OpenAPI (Swagger) Editor extension, and turn on the preview alongside <code>openapi.yaml</code>:</p><p><img src="/images/openapi-workflow/vscode-openapi.png" alt="VS Code OpenAPI"></p><p>If you want to run <em>Try it out</em>, make sure you enable the CORS of the API server. For Flask, there is an extension for this task:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    CORS(app)</span><br></pre></td></tr></table></figure><h2 id="API-Client"><a href="#API-Client" class="headerlink" title="API Client"></a>API Client</h2><p>Now we have a complete OpenAPI specification file, we can generate all forms of clients and stubs from it. Here we use the <a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI Generator</a> to create a TypeScript-Fetch client, and use it in a Vue project.</p><h3 id="Generate-client-codes"><a href="#Generate-client-codes" class="headerlink" title="Generate client codes"></a>Generate client codes</h3><p>First add the development tool via package manager like <code>yarn</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @openapitools/openapi-generator-cli</span><br></pre></td></tr></table></figure><p>And create a configuration file <code>openapitools.json</code> for OpenAPI generator:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/@openapitools/openapi-generator-cli/config.schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spaces&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;generator-cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;downloadUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://maven.aliyun.com/nexus/content/groups/public/$&#123;groupId&#125;/$&#123;artifactId&#125;/$&#123;versionName&#125;/$&#123;artifactId&#125;-$&#123;versionName&#125;.jar&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;generators&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;v1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;inputSpec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../openapi-server/openapi.yaml&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;generatorName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typescript-fetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/openapi&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>downloadUrl</code> can be used when you have trouble reaching the Maven central. <code>generators</code> section indicates the path of <code>openapi.yaml</code>, which generator we use, and the output path. For convenience, we create a script in <code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openapi-generator-cli generate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>After running <code>yarn gen</code>, we get a fully functional client in <code>src/openapi</code> folder.</p><h3 id="Use-the-generated-client"><a href="#Use-the-generated-client" class="headerlink" title="Use the generated client"></a>Use the generated client</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PostApi</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postApi = <span class="keyword">new</span> <span class="title class_">PostApi</span>()</span><br><span class="line">postApi.<span class="title function_">getPostList</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">posts</span>) &#125;)</span><br></pre></td></tr></table></figure><p>Note the base path of the API request is <code>http://127.0.0.1:5000</code>, as we defined in <code>openapi.py</code>, which should be overridden in production. Since typically the frontend code and API server are deployed under the same domain, we can set the base path to an empty string. Create an <code>api.ts</code> file:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Configuration</span>, <span class="title class_">PostApi</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> conf = <span class="keyword">new</span> <span class="title class_">Configuration</span>(&#123;</span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postApi = <span class="keyword">new</span> <span class="title class_">PostApi</span>(conf)</span><br></pre></td></tr></table></figure><p>And use it in your web application:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; postApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"></span><br><span class="line">postApi.<span class="title function_">getPostList</span>()</span><br></pre></td></tr></table></figure><h3 id="Display-post-list"><a href="#Display-post-list" class="headerlink" title="Display post list"></a>Display post list</h3><p>Let’s request for the posts when page is loaded, and display them via Vue and Bootstrap:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; postApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> type &#123; <span class="title class_">Post</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> posts = ref&lt;<span class="title class_">Post</span>[]&gt;([])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  postApi.<span class="title function_">getPostList</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (response.<span class="property">posts</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      posts.<span class="property">value</span> = response.<span class="property">posts</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-grid gap-3 my-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;&#123;post.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Updated at &#123;&#123;post.updatedAt&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The full source code can be found on GitHub: <a href="https://github.com/jizhang/blog-demo/tree/master/openapi-server">openapi-server</a>, <a href="https://github.com/jizhang/blog-demo/tree/master/openapi-fe">openapi-fe</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI&lt;/a&gt; has become the de facto standard of designing web APIs, and there are numerous tools developed around its ecosystem. In this article, I will demonstrate the workflow of using OpenAPI in both backend and frontend projects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/openapi-workflow/openapi-3.0.png&quot; alt=&quot;OpenAPI 3.0&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-Server&quot;&gt;&lt;a href=&quot;#API-Server&quot; class=&quot;headerlink&quot; title=&quot;API Server&quot;&gt;&lt;/a&gt;API Server&lt;/h2&gt;&lt;p&gt;There are &lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;code first and design first&lt;/a&gt; approaches when using OpenAPI, and here we go with code first approach, i.e. writing the API server first, add specification to the method docs, then generate the final OpenAPI specification. The API server will be developed with Python &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;Flask&lt;/a&gt; framework and &lt;a href=&quot;https://apispec.readthedocs.io/&quot;&gt;apispec&lt;/a&gt; library with &lt;a href=&quot;https://marshmallow.readthedocs.io/&quot;&gt;marshmallow&lt;/a&gt; extension. Let’s first install the dependencies:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Flask==2.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-Cors==3.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-SQLAlchemy==2.5.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQLAlchemy==1.4.36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python-dotenv==0.20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apispec[marshmallow]==5.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apispec-webframeworks==0.5.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="openapi" scheme="https://shzhangji.com/tags/openapi/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Use Bootstrap V5 in Vue 3 Project</title>
    <link href="https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/"/>
    <id>https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/</id>
    <published>2022-06-11T12:06:26.000Z</published>
    <updated>2022-06-11T12:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap V5 and Vue 3.x have been released for a while, but the widely used BootstrapVue library is still based on Bootstrap V4 and Vue 2.x. A <a href="https://github.com/bootstrap-vue/bootstrap-vue/issues/5196">new version</a> of BootstrapVue is under development, and there is an alternative project <a href="https://cdmoro.github.io/bootstrap-vue-3/">BootstrapVue 3</a> in alpha version. However, since Bootstrap is mainly a CSS framework, and it has dropped jQuery dependency in V5, it is not that difficult to integrate into a Vue 3.x project on your own. In this article, we will go through the steps of creating such a project.</p><h2 id="Create-Vite-project"><a href="#Create-Vite-project" class="headerlink" title="Create Vite project"></a>Create Vite project</h2><p>The recommended way of using Vue 3.x is with Vite. Install <code>yarn</code> and create from the <code>vue-ts</code> template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite bootstrap-vue3 --template vue-ts</span><br><span class="line">cd bootstrap-vue3</span><br><span class="line">yarn install</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h2 id="Add-Bootstrap-dependencies"><a href="#Add-Bootstrap-dependencies" class="headerlink" title="Add Bootstrap dependencies"></a>Add Bootstrap dependencies</h2><p>Bootstrap is published on npm, and it has an extra dependency Popper, so let’s install them both:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap @popperjs/core</span><br></pre></td></tr></table></figure><p>You may also need the type definitions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/bootstrap</span><br></pre></td></tr></table></figure><h2 id="Use-Bootstrap-CSS"><a href="#Use-Bootstrap-CSS" class="headerlink" title="Use Bootstrap CSS"></a>Use Bootstrap CSS</h2><p>Just add a line to your <code>App.vue</code> file and you are free to use Bootstrap CSS:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can also use Sass for further <a href="https://getbootstrap.com/docs/5.2/customize/sass/">customization</a>.</p><span id="more"></span><h2 id="Use-JavaScript-plugins"><a href="#Use-JavaScript-plugins" class="headerlink" title="Use JavaScript plugins"></a>Use JavaScript plugins</h2><p>Bootstrap provides JS plugins to enable interactive components, such as Modal, Toast, etc. There are two ways of using these plugins: through <code>data</code> attributes, or create instances programatically. Let’s take <a href="https://getbootstrap.com/docs/5.2/components/modal/">Modal</a> for an example.</p><h3 id="Through-data-attributes"><a href="#Through-data-attributes" class="headerlink" title="Through data attributes"></a>Through <code>data</code> attributes</h3><p>First, you need to import the Bootstrap JS. In the following example, we import the individual Modal plugin. You can also import the full Bootstrap JS using <code>import &#39;bootstrap&#39;</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/js/dist/modal&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#exampleModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;exampleModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModalLabel&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>When the <em>Launch</em> button is clicked, <code>data-bs-toggle</code> tells Bootstrap to show or hide a modal dialog with the element ID indicated by <code>data-bs-target</code>. When the <em>Close</em> button is clicked, <code>data-bs-dismiss</code> indicates hiding the dialog that contains this button. <code>data</code> attribute is simple, but not flexible. In practice, we tend to use JS instance instead.</p><h3 id="Through-JS-instances"><a href="#Through-JS-instances" class="headerlink" title="Through JS instances"></a>Through JS instances</h3><p>From the Bootstrap document, we see the following instruction:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myModalAlternative = <span class="keyword">new</span> bootstrap.<span class="title class_">Modal</span>(<span class="string">&#x27;#myModal&#x27;</span>, options)</span><br></pre></td></tr></table></figure><p>It creates a <code>Modal</code> instance on a DOM element with the ID <code>myModal</code>, and then we can call the <code>show</code> or <code>hide</code> methods on it. In Vue, we need to replace the element ID with a <a href="https://vuejs.org/guide/essentials/template-refs.html">Template Ref</a>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modalRef = ref&lt;<span class="title class_">HTMLElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">modal</span>: <span class="title class_">Modal</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modalRef.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal = <span class="keyword">new</span> <span class="title class_">Modal</span>(modalRef.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">launchDemoModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  modal.<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;launchDemoModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;modalRef&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>modalRef</code> will be set by Vue when component is mounted, at that time we create the Modal instance with the passed-in DOM element. Note <code>data-bs-dimiss</code> still works in this example.</p><h3 id="Write-a-custom-component"><a href="#Write-a-custom-component" class="headerlink" title="Write a custom component"></a>Write a custom component</h3><p>If you need to use Modal in different places, it is better to wrap it in a component. Create a <code>components/Modal.vue</code> file and put the following code in it:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">modelValue</span>: boolean</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: string</span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;update:modelValue&#x27;</span>, <span class="attr">modelValue</span>: boolean): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modalRef = ref&lt;<span class="title class_">HTMLElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">modal</span>: <span class="title class_">Modal</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modalRef.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal = <span class="keyword">new</span> <span class="title class_">Modal</span>(modalRef.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> props.<span class="property">modelValue</span>, <span class="function">(<span class="params">modelValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modelValue) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal.<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    modal.<span class="title function_">hide</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;modalRef&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We use <code>v-model</code> to control the visibility of the modal dialog. By watching the value of <code>modelValue</code> property, we call corresponding methods on the Modal instance. Also we have replaced the <code>data-bs-dismiss</code> with a function that changes the value of <code>modelValue</code>, because that should be the single source of truth of the modal state.</p><p>Use this component in a demo view:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Modal.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">launchDemoModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">closeModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">saveChanges</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">closeModal</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;Changes saved.&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;launchDemoModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Modal title&quot;</span>&gt;</span></span><br><span class="line">    Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeModal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveChanges&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Check out the <a href="https://vuejs.org/guide/essentials/component-basics.html">Vue document</a> to learn about component, slot, v-model, etc. Code examples can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/bootstrap-vue3">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bootstrap V5 and Vue 3.x have been released for a while, but the widely used BootstrapVue library is still based on Bootstrap V4 and Vue 2.x. A &lt;a href=&quot;https://github.com/bootstrap-vue/bootstrap-vue/issues/5196&quot;&gt;new version&lt;/a&gt; of BootstrapVue is under development, and there is an alternative project &lt;a href=&quot;https://cdmoro.github.io/bootstrap-vue-3/&quot;&gt;BootstrapVue 3&lt;/a&gt; in alpha version. However, since Bootstrap is mainly a CSS framework, and it has dropped jQuery dependency in V5, it is not that difficult to integrate into a Vue 3.x project on your own. In this article, we will go through the steps of creating such a project.&lt;/p&gt;
&lt;h2 id=&quot;Create-Vite-project&quot;&gt;&lt;a href=&quot;#Create-Vite-project&quot; class=&quot;headerlink&quot; title=&quot;Create Vite project&quot;&gt;&lt;/a&gt;Create Vite project&lt;/h2&gt;&lt;p&gt;The recommended way of using Vue 3.x is with Vite. Install &lt;code&gt;yarn&lt;/code&gt; and create from the &lt;code&gt;vue-ts&lt;/code&gt; template:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn create vite bootstrap-vue3 --template vue-ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bootstrap-vue3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Add-Bootstrap-dependencies&quot;&gt;&lt;a href=&quot;#Add-Bootstrap-dependencies&quot; class=&quot;headerlink&quot; title=&quot;Add Bootstrap dependencies&quot;&gt;&lt;/a&gt;Add Bootstrap dependencies&lt;/h2&gt;&lt;p&gt;Bootstrap is published on npm, and it has an extra dependency Popper, so let’s install them both:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add bootstrap @popperjs/core&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may also need the type definitions:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add -D @types/bootstrap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Use-Bootstrap-CSS&quot;&gt;&lt;a href=&quot;#Use-Bootstrap-CSS&quot; class=&quot;headerlink&quot; title=&quot;Use Bootstrap CSS&quot;&gt;&lt;/a&gt;Use Bootstrap CSS&lt;/h2&gt;&lt;p&gt;Just add a line to your &lt;code&gt;App.vue&lt;/code&gt; file and you are free to use Bootstrap CSS:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bootstrap/dist/css/bootstrap.min.css&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Primary&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can also use Sass for further &lt;a href=&quot;https://getbootstrap.com/docs/5.2/customize/sass/&quot;&gt;customization&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="bootstrap" scheme="https://shzhangji.com/tags/bootstrap/"/>
    
    <category term="vite" scheme="https://shzhangji.com/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>Migrate from hexo-deployer-git to GitHub Actions</title>
    <link href="https://shzhangji.com/blog/2022/06/03/migrate-from-hexo-deployer-git-to-github-actions/"/>
    <id>https://shzhangji.com/blog/2022/06/03/migrate-from-hexo-deployer-git-to-github-actions/</id>
    <published>2022-06-03T06:34:18.000Z</published>
    <updated>2022-06-03T06:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Create <code>.github/workflows/pages.yml</code> in your <code>master</code> branch:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.22&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>Go to GitHub repo’s Settings &gt; Pages, change source branch to <code>gh-pages</code>.</p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><span id="more"></span><p>Previously with <a href="https://github.com/hexojs/hexo-deployer-git"><code>hexo-deployer-git</code></a> plugin, we generate the static site locally and push those files to github’s master branch, which will be deployed to GitHub Pages server. The config in <code>_config.yml</code> is as simple as:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:jizhang/jizhang.github.com</span></span><br></pre></td></tr></table></figure><p>Now with GitHub Actions, a CI&#x2F;CD platform available to public repositories, the build process can be triggered on remote servers whenever master branch is updated. Hexo provides an <a href="https://hexo.io/docs/github-pages">official document</a> on how to setup the workflow, but it turns out the configuration can be a little bit simpler, thanks to the new versions of <code>actions</code> (we’ll cover it later).</p><p>A workflow is a sequence of jobs to build, test, and deploy our code. Here we only need one job named <code>deploy</code> to generate the static files and push to a branch.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span> []</span><br></pre></td></tr></table></figure><p>A job consists of steps that either run a shell command or invoke an <code>action</code> to execute a common task. For instance, we have defined two steps to install node dependencies and build the static site:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>Make sure you have the following scripts in <code>package.json</code>. Newer version of hexo already has them.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server --draft&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>But where does the node environment come from? First, the job <code>runs-on</code> a specified platform, which is <code>ubuntu-latest</code> here, and <code>uses</code> the <a href="https://github.com/actions/setup-node"><code>setup-node</code></a> action to prepare the node environment, <code>yarn</code> command, as well as the cache facility.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">node-version:</span> <span class="string">&quot;12.22&quot;</span></span><br><span class="line">      <span class="attr">cache:</span> <span class="string">yarn</span></span><br></pre></td></tr></table></figure><p>Under the hood, it searches for a local cache of the specific node version, where github provides last three LTS versions, or it falls back to downloading from the official site. The <code>yarn</code> package manager is pre-bundled by github, or you need a separate step to install it.</p><p>When it comes to caching the downloaded packages, <code>setup-node</code> action utilizes <a href="https://github.com/actions/cache"><code>actions/cache</code></a>. It caches the global package data, i.e. <code>~/.cache/yarn/v6</code> folder, instead of <code>node_modules</code>, so that cache can be shared between different node versions. <code>setup-node</code> generates a cache key in the form of <code>node-cache-Linux-yarn-$&#123;hash(yarn.lock)&#125;</code>. See more about caching on <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">GitHub Docs</a>.</p><p>The static site is generated in <code>public</code> folder, and we need to push them into the <code>gh-pages</code> branch. There is an action <a href="https://github.com/peaceiris/actions-gh-pages"><code>peaceiris/actions-gh-pages</code></a> that already covers this.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>It first clones the <code>gh-pages</code> branch into work directory, overwrites it with the files in <code>public</code> folder, commits and pushes to the remote branch. The <code>GITHUB_TOKEN</code> is provided by GitHub Actions, with adequate permissions.</p><p>Last but not least, this workflow needs to be triggered on the <code>push</code> event of the <code>master</code> branch:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>Here is a screenshot of this workflow:</p><p><img src="/images/use-github-actions.png" alt="Use GitHub Actions"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Create &lt;code&gt;.github/workflows/pages.yml&lt;/code&gt; in your &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;gh-pages&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;push:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;branches:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/checkout@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/setup-node@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;node-version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;12.22&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;cache:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;github_token:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;secrets.GITHUB_TOKEN&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;publish_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./public&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go to GitHub repo’s Settings &amp;gt; Pages, change source branch to &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;How-it-works&quot;&gt;&lt;a href=&quot;#How-it-works&quot; class=&quot;headerlink&quot; title=&quot;How it works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="hexo" scheme="https://shzhangji.com/tags/hexo/"/>
    
    <category term="github" scheme="https://shzhangji.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Deploy Flink Job Cluster on Kubernetes</title>
    <link href="https://shzhangji.com/blog/2019/08/24/deploy-flink-job-cluster-on-kubernetes/"/>
    <id>https://shzhangji.com/blog/2019/08/24/deploy-flink-job-cluster-on-kubernetes/</id>
    <published>2019-08-24T11:33:22.000Z</published>
    <updated>2019-08-24T11:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/">Kubernetes</a> is the trending container orchestration system that can be used to host various applications from web services to data processing jobs. Applications are packaged in self-contained, yet light-weight containers, and we declare how they should be deployed, how they scale, and how they expose as services. <a href="https://flink.apache.org/">Flink</a> is also a trending distributed computing framework that can run on a variety of platforms, including Kubernetes. Combining them will bring us robust and scalable deployments of data processing jobs, and more safely Flink can share a Kubernetes cluster with other services.</p><p><img src="/images/flink-on-kubernetes.png" alt="Flink on Kubernetes"></p><p>When deploying Flink on Kubernetes, there are two options, session cluster and job cluster. Session cluster is like running a standalone Flink cluster on k8s that can accept multiple jobs and is suitable for short running tasks or ad-hoc queries. Job cluster, on the other hand, deploys a full set of Flink cluster for each individual job. We build container image for each job, and provide it with dedicated resources, so that jobs have less chance interfering with other, and can scale out independently. So this article will illustrate how to run a Flink job cluster on Kubernetes, the steps are:</p><ul><li>Compile and package the Flink job jar.</li><li>Build a Docker image containing the Flink runtime and the job jar.</li><li>Create a Kubernetes Job for Flink JobManager.</li><li>Create a Kubernetes Service for this Job.</li><li>Create a Kubernetes Deployment for Flink TaskManagers.</li><li>Enable Flink JobManager HA with ZooKeeper.</li><li>Correctly stop and resume Flink job with SavePoint facility.</li></ul><span id="more"></span><h2 id="Kubernetes-Playground"><a href="#Kubernetes-Playground" class="headerlink" title="Kubernetes Playground"></a>Kubernetes Playground</h2><p>In case you do not already have a Kubernetes environment, one can easily setup a local playground with <a href="https://github.com/kubernetes/minikube">minikube</a>. Take MacOS for an example:</p><ul><li>Install <a href="https://www.virtualbox.org/">VirtualBox</a>, since minikube will setup a k8s cluster inside a virtual machine.</li><li>Download the <a href="https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64">minikube binary</a>, making it executable and accessible from PATH.</li><li>Execute <code>minikube start</code>, it will download the virtual machine image, kubelet and kubeadm facilities, install and verify the k8s cluster. If you have trouble accessing the internet, setup a proxy and <a href="https://minikube.sigs.k8s.io/docs/reference/networking/proxy/">tell minikube to use it</a>.</li><li>Download and install the <a href="https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/darwin/amd64/kubectl">kubectl binary</a>. Minikube has configured kubectl to point to the installed k8s cluster, so one can execute <code>kubectl get pods -A</code> to see the running system pods.</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   kube-apiserver-minikube            1/1     Running   0          16m</span><br><span class="line">kube-system   etcd-minikube                      1/1     Running   0          15m</span><br><span class="line">kube-system   coredns-5c98db65d4-d4t2h           1/1     Running   0          17m</span><br></pre></td></tr></table></figure><h2 id="Flink-Streaming-Job"><a href="#Flink-Streaming-Job" class="headerlink" title="Flink Streaming Job"></a>Flink Streaming Job</h2><p>Let us create a simple streaming job, that reads data from socket, and prints the count of words every 5 seconds. The following code is taken from <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/dev/datastream_api.html#example-program">Flink doc</a>, and a full Maven project can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/flink-on-kubernetes">GitHub</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = env</span><br><span class="line">    .socketTextStream(<span class="string">&quot;192.168.99.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> <span class="title class_">Splitter</span>())</span><br><span class="line">    .keyBy(<span class="number">0</span>)</span><br><span class="line">    .timeWindow(Time.seconds(<span class="number">5</span>))</span><br><span class="line">    .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">dataStream.print();</span><br></pre></td></tr></table></figure><p>IP <code>192.168.99.1</code> allows container to access services running on minikube host. For this example to work, you need to run <code>nc -lk 9999</code> on your host before creating the JobManager pod.</p><p>Run <code>mvn clean package</code>, and the compiled job jar can be found in <code>target/flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar</code>.</p><h2 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h2><p>Flink provides an official docker image on <a href="https://hub.docker.com/_/flink">DockerHub</a>. We can use it as the base image and add job jar into it. Besides, in recent Flink distribution, the Hadoop binary is not included anymore, so we need to add Hadoop jar as well. Take a quick look at the base image’s <a href="https://github.com/docker-flink/docker-flink/blob/master/1.8/scala_2.12-debian/Dockerfile">Dockerfile</a>, it does the following tasks:</p><ul><li>Create from OpenJDK 1.8 base image.</li><li>Install Flink into <code>/opt/flink</code>.</li><li>Add <code>flink</code> user and group.</li><li>Configure the entry point, which we will override in k8s deployments.</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">ENV</span> FLINK_HOME=/opt/flink</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$FLINK_HOME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd flink &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  wget -O flink.tgz <span class="string">&quot;<span class="variable">$FLINK_TGZ_URL</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  tar -xf flink.tgz</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>Based on it, we create a new Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> flink:<span class="number">1.8</span>.<span class="number">1</span>-scala_2.<span class="number">12</span></span><br><span class="line"><span class="keyword">ARG</span> hadoop_jar</span><br><span class="line"><span class="keyword">ARG</span> job_jar</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=flink:flink <span class="variable">$hadoop_jar</span> <span class="variable">$job_jar</span> <span class="variable">$FLINK_HOME</span>/lib/</span></span><br><span class="line"><span class="keyword">USER</span> flink</span><br></pre></td></tr></table></figure><p>Before building the image, you need to install Docker CLI and point it to the docker service inside minikube:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install docker</span><br><span class="line">$ <span class="built_in">eval</span> $(minikube docker-env)</span><br></pre></td></tr></table></figure><p>Then, download the <a href="https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.8.3-7.0/flink-shaded-hadoop-2-uber-2.8.3-7.0.jar">Hadoop uber jar</a>, and execute the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/Dockerfile</span><br><span class="line">$ <span class="built_in">cp</span> /path/to/flink-shaded-hadoop-2-uber-2.8.3-7.0.jar hadoop.jar</span><br><span class="line">$ <span class="built_in">cp</span> /path/to/flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar job.jar</span><br><span class="line">$ docker build --build-arg hadoop_jar=hadoop.jar --build-arg job_jar=job.jar --tag flink-on-kubernetes:0.0.1 .</span><br></pre></td></tr></table></figure><p>Now we have a local docker image that is ready to be deployed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY           TAG    IMAGE ID      CREATED         SIZE</span><br><span class="line">flink-on-kubernetes  0.0.1  505d2f11cc57  10 seconds ago  618MB</span><br></pre></td></tr></table></figure><h2 id="Deploy-JobManager"><a href="#Deploy-JobManager" class="headerlink" title="Deploy JobManager"></a>Deploy JobManager</h2><p>First, we create a k8s Job for Flink JobManager. Job and Deployment both create and manage Pods to do some work. The difference is Job will quit if the Pod finishes successfully, based on the exit code, while Deployment only quits when asked to. This feature enables us to cancel the Flink job manually, without worrying Deployment restarts the JobManager by mistake.</p><p>Here’s the <a href="https://github.com/jizhang/blog-demo/blob/master/flink-on-kubernetes/docker/jobmanager.yml"><code>jobmanager.yml</code></a>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jobmanager</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">flink-on-kubernetes:0.0.1</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dparallelism.default=1&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dblob.server.port=6124&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dqueryable-state.server.ports=6125&quot;</span>]</span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6123</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6124</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">blob</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6125</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ui</span></span><br></pre></td></tr></table></figure><ul><li><code>$&#123;JOB&#125;</code> can be replaced by <code>envsubst</code>, so that config files can be reused by different jobs.</li><li>Container’s entry point is changed to <code>standalone-job.sh</code>. It will start the JobManager in foreground, scan the class path for a <code>Main-Class</code> as the job entry point, or you can specify the full class name via <code>-j</code> option. Then, this job is automatically submitted to the cluster.</li><li>JobManager’s RPC address is the k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies">Service</a>‘s name, which we will create later. Other containers can access JobManager via this host name.</li><li>Blob server and queryable state server’s ports are by default random. We change them to fixed ports for easy exposure.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> JOB=flink-on-kubernetes</span><br><span class="line">$ envsubst &lt;jobmanager.yml | kubectl create -f -</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager-kc4kq   1/1     Running   0          2m26s</span><br></pre></td></tr></table></figure><p>Next, we expose this JobManager as k8s Service, so that TaskManagers can register to it.</p><p><code>service.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">    <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6123</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">blob</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6124</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6125</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ui</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p><code>type: NodePort</code> is necessary because we also want to interact with this JobManager outside the k8s cluster.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ envsubst &lt;service.yml | kubectl create -f -</span><br><span class="line">$ kubectl get service</span><br><span class="line">NAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                                      AGE</span><br><span class="line">flink-on-kubernetes-jobmanager   NodePort    10.109.78.143   &lt;none&gt;        6123:31476/TCP,6124:32268/TCP,6125:31602/TCP,8081:31254/TCP  15m</span><br></pre></td></tr></table></figure><p>We can see Flink dashboard is exposed on port 31254 on the virtual machine. Minikube provides a command to retrieve the full url of a service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ minikube service <span class="variable">$JOB</span>-jobmanager --url</span><br><span class="line">http://192.168.99.108:31476</span><br><span class="line">http://192.168.99.108:32268</span><br><span class="line">http://192.168.99.108:31602</span><br><span class="line">http://192.168.99.108:31254</span><br></pre></td></tr></table></figure><h2 id="Deploy-TaskManager"><a href="#Deploy-TaskManager" class="headerlink" title="Deploy TaskManager"></a>Deploy TaskManager</h2><p><code>taskmanager.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">      <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">taskmanager</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">flink-on-kubernetes:0.0.1</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/taskmanager.sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>, <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>]</span><br></pre></td></tr></table></figure><p>Change the number of <code>replicas</code> to add more TaskManagers. The <code>taskmanager.numberOfTaskSlots</code> is set to <code>1</code> in this image, which is recommended because we should let k8s handle the scaling.</p><p>Now the job cluster is running, try typing something into the <code>nc</code> console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc -lk 9999</span><br><span class="line">hello world</span><br><span class="line">hello flink</span><br></pre></td></tr></table></figure><p>Open another terminal and tail the TaskManager’s standard output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f -l instance=<span class="variable">$JOB</span>-taskmanager</span><br><span class="line">(hello,2)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br></pre></td></tr></table></figure><h2 id="Configure-JobManager-HA"><a href="#Configure-JobManager-HA" class="headerlink" title="Configure JobManager HA"></a>Configure JobManager HA</h2><p>While TaskManager can achieve high availability by increasing the replicas of the Deployment, JobManager is still a single point of failure. Flink comes with an <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/jobmanager_high_availability.html">HA solution</a> with the help of ZooKeeper and a distributed file system like HDFS. In a standalone cluster, multiple JobManagers are started and one of them is elected as leader. In YARN or Kubernetes deployment, only one JobManager instance is required. The cluster’s meta info is stored in ZooKeeper, and checkpoint data are stored in HDFS. When JobManager is down, Kubernetes will restart the container, and the new JobManager will restore the last checkpoint and resume the job.</p><p>To enable JobManager HA, change the start command of both JobManager and TaskManager:</p><p><code>jobmanager-ha.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dparallelism.default=1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dblob.server.port=6124&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dqueryable-state.server.ports=6125&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability=zookeeper&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.quorum=192.168.99.1:2181&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.path.root=/flink&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.cluster-id=/$&#123;JOB&#125;&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.storageDir=hdfs://192.168.99.1:9000/flink/recovery&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.jobmanager.port=6123&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p><code>taskmanager-ha.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/taskmanager.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability=zookeeper&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.quorum=192.168.99.1:2181&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.path.root=/flink&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.cluster-id=/$&#123;JOB&#125;&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.storageDir=hdfs://192.168.99.1:9000/flink/recovery&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><ul><li>Prepare a ZooKeeper and HDFS environment on minikube host, so that Flink containers can access them via <code>192.168.99.1:2181</code> and <code>192.168.99.1:9000</code>.</li><li>Cluster meta data will be stored under <code>/flink/$&#123;JOB&#125;</code> in ZooKeeper.</li><li>Checkpoint data is stored under <code>/flink/recovery</code> in HDFS. Make sure you create the <code>/flink</code> directory with proper permission.</li><li>The <code>jobmanager.rpc.address</code> property is removed from TaskManager’s arguments because the RPC host and port of JobManager will be fetched from ZooKeeper. The RPC port is by default random, so we changed to a fixed port via <code>high-availability.jobmanager.port</code>, which is exposed in k8s Service.</li></ul><h2 id="Manage-Flink-Job"><a href="#Manage-Flink-Job" class="headerlink" title="Manage Flink Job"></a>Manage Flink Job</h2><p>We can interact with Flink cluster via RESTful API. It is the same port as Flink Dashboard. Install Flink binaries on your host machine, and pass <code>-m</code> argument to point to the JobManager in k8s:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink list -m 192.168.99.108:30206</span><br><span class="line">------------------ Running/Restarting Jobs -------------------</span><br><span class="line">24.08.2019 12:50:28 : 00000000000000000000000000000000 : Window WordCount (RUNNING)</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>In HA mode, Flink job ID is by default <code>00000000000000000000000000000000</code>. We can use this ID to cancel Flink job with <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html">SavePoint</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink cancel -m 192.168.99.108:30206 -s hdfs://192.168.99.1:9000/flink/savepoints/ 00000000000000000000000000000000</span><br><span class="line">Cancelled job 00000000000000000000000000000000. Savepoint stored <span class="keyword">in</span> hdfs://192.168.99.1:9000/flink/savepoints/savepoint-000000-f776c8e50a0c.</span><br></pre></td></tr></table></figure><p>And the k8s Job is now in completed status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get job</span><br><span class="line">NAME                             COMPLETIONS   DURATION   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager   1/1           4m40s      7m14s</span><br></pre></td></tr></table></figure><p>To re-submit the job, we need to delete them first:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete job <span class="variable">$JOB</span>-jobmanager</span><br><span class="line">$ kubectl delete deployment <span class="variable">$JOB</span>-taskmanager</span><br></pre></td></tr></table></figure><p>Then add a command argument to <code>jobmanager-savepoint.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">...</span></span><br><span class="line">       <span class="string">&quot;--fromSavepoint&quot;</span>, <span class="string">&quot;$&#123;SAVEPOINT&#125;&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>Start this job from the SavePoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> SAVEPOINT=hdfs://192.168.99.1:9000/flink/savepoints/savepoint-000000-f776c8e50a0c</span><br><span class="line">$ envsubst &lt;jobmanager-savepoint.yml | kubectl create -f -</span><br></pre></td></tr></table></figure><p>One note on SavePoint, it has to be used with HA mode, because the <code>--fromSavepoint</code> argument will be passed to <code>standalone-job.sh</code> every time Kubernetes tries to restart a failed JobManager. With HA mode enabled, the new JobManager will first restore from the CheckPoint, ignoring the SavePoint.</p><h3 id="Scale-Flink-Job"><a href="#Scale-Flink-Job" class="headerlink" title="Scale Flink Job"></a>Scale Flink Job</h3><p>There are two ways to scale a Flink job. One is manually restarting it with a different <code>parallelism.default</code> config, which can be found in <code>jobmanager.yml</code>. Another way is using the <code>bin/flink modify</code> command. Under the hood, this command cancels the job with a SavePoint, and restarts it with the new parallelism. So for this to work, you need to first set the default SavePoint directory, like:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">...</span></span><br><span class="line">       <span class="string">&quot;-Dstate.savepoints.dir=hdfs://192.168.99.1:9000/flink/savepoints/&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>Then, add more TaskManagers with <code>kubectl scale</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale --replicas=2 deployment/<span class="variable">$JOB</span>-taskmanager</span><br><span class="line">deployment.extensions/flink-on-kubernetes-taskmanager scaled</span><br></pre></td></tr></table></figure><p>And modify the parallelism of the running job:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink modify 755877434b676ce9dae5cfb533ed7f33 -m 192.168.99.108:30206 -p 2</span><br><span class="line">Modify job 755877434b676ce9dae5cfb533ed7f33.</span><br><span class="line">Rescaled job 755877434b676ce9dae5cfb533ed7f33. Its new parallelism is 2.</span><br></pre></td></tr></table></figure><p>However, due to an <a href="https://issues.apache.org/jira/browse/FLINK-11997">unresolved issue</a>, we cannot use <code>flink modify</code> to scale an HA job cluster in Kubernetes mode. Use the manual method instead.</p><h2 id="Flink-Native-Support-on-Kubernetes"><a href="#Flink-Native-Support-on-Kubernetes" class="headerlink" title="Flink Native Support on Kubernetes"></a>Flink Native Support on Kubernetes</h2><p>Flink enjoys a very active community that constantly improves its own design (<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077">FLIP-6</a>) to adopt current cloud-native environment. They’ve also noticed the rapid development of Kubernetes, and the native support of Flink on K8s is under development as well. It’s known that Flink can run natively on resource management systems like YARN&#x2F;Mesos. Take YARN for an instance, Flink will first start an ApplicationMaster as the JobManager, analyze how much resource this job needs, and request YARN ResourceManager for containers to run TaskManager. When the parallelism changes, JobManager will acquire or release containers correspondingly. This kind of active resource management for Kubernetes is under development (<a href="https://issues.apache.org/jira/browse/FLINK-9953">FLINK-9953</a>). In future, we can deploy Flink cluster on K8s with a simple command.</p><p>Besides, another kind of resource management is also on its way. It’s called reactive container mode (<a href="https://issues.apache.org/jira/browse/FLINK-10407">FLINK-10407</a>). In short, when the JobManager realizes there are idle TaskManagers, it will automatically scale the job to its maximum parallelism. Thus, we only need to use <code>kubectl scale</code> changing <code>replicas</code>, without executing <code>flink modify</code> later. Such convenient features will be available soon, I believe.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/deployment/kubernetes.html">https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/deployment/kubernetes.html</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/">https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</a></li><li><a href="https://jobs.zalando.com/tech/blog/running-apache-flink-on-kubernetes/">https://jobs.zalando.com/tech/blog/running-apache-flink-on-kubernetes/</a></li><li><a href="https://www.slideshare.net/tillrohrmann/redesigning-apache-flinks-distributed-architecture-flink-forward-2017">https://www.slideshare.net/tillrohrmann/redesigning-apache-flinks-distributed-architecture-flink-forward-2017</a></li><li><a href="https://www.slideshare.net/tillrohrmann/future-of-apache-flink-deployments-containers-kubernetes-and-more-flink-forward-2019-sf">https://www.slideshare.net/tillrohrmann/future-of-apache-flink-deployments-containers-kubernetes-and-more-flink-forward-2019-sf</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; is the trending container orchestration system that can be used to host various applications from web services to data processing jobs. Applications are packaged in self-contained, yet light-weight containers, and we declare how they should be deployed, how they scale, and how they expose as services. &lt;a href=&quot;https://flink.apache.org/&quot;&gt;Flink&lt;/a&gt; is also a trending distributed computing framework that can run on a variety of platforms, including Kubernetes. Combining them will bring us robust and scalable deployments of data processing jobs, and more safely Flink can share a Kubernetes cluster with other services.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flink-on-kubernetes.png&quot; alt=&quot;Flink on Kubernetes&quot;&gt;&lt;/p&gt;
&lt;p&gt;When deploying Flink on Kubernetes, there are two options, session cluster and job cluster. Session cluster is like running a standalone Flink cluster on k8s that can accept multiple jobs and is suitable for short running tasks or ad-hoc queries. Job cluster, on the other hand, deploys a full set of Flink cluster for each individual job. We build container image for each job, and provide it with dedicated resources, so that jobs have less chance interfering with other, and can scale out independently. So this article will illustrate how to run a Flink job cluster on Kubernetes, the steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile and package the Flink job jar.&lt;/li&gt;
&lt;li&gt;Build a Docker image containing the Flink runtime and the job jar.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Job for Flink JobManager.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Service for this Job.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Deployment for Flink TaskManagers.&lt;/li&gt;
&lt;li&gt;Enable Flink JobManager HA with ZooKeeper.&lt;/li&gt;
&lt;li&gt;Correctly stop and resume Flink job with SavePoint facility.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="flink" scheme="https://shzhangji.com/tags/flink/"/>
    
    <category term="kubernetes" scheme="https://shzhangji.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Hive ACID Transactional Table</title>
    <link href="https://shzhangji.com/blog/2019/06/10/understanding-hive-acid-transactional-table/"/>
    <id>https://shzhangji.com/blog/2019/06/10/understanding-hive-acid-transactional-table/</id>
    <published>2019-06-10T12:40:55.000Z</published>
    <updated>2019-06-10T12:40:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hive.apache.org/">Apache Hive</a> introduced transactions since version 0.13 to fully support ACID semantics on Hive table, including INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;MERGE statements, streaming data ingestion, etc. In Hive 3.0, this feature is further improved by optimizing the underlying data file structure, reducing constraints on table scheme, and supporting predicate push down and vectorized query. Examples and setup can be found on <a href="https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions">Hive wiki</a> and other <a href="https://hortonworks.com/tutorial/using-hive-acid-transactions-to-insert-update-and-delete-data/">tutorials</a>, while this article will focus on how transactional table is saved on HDFS, and take a closer look at the read-write process.</p><h2 id="File-Structure"><a href="#File-Structure" class="headerlink" title="File Structure"></a>File Structure</h2><h3 id="Insert-Data"><a href="#Insert-Data" class="headerlink" title="Insert Data"></a>Insert Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (id <span class="type">int</span>, name string, salary <span class="type">int</span>)</span><br><span class="line">STORED <span class="keyword">AS</span> ORC TBLPROPERTIES (<span class="string">&#x27;transactional&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jerry&#x27;</span>, <span class="number">5000</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Tom&#x27;</span>,   <span class="number">8000</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Kate&#x27;</span>,  <span class="number">6000</span>);</span><br></pre></td></tr></table></figure><p>An INSERT statement is executed in a single transaction. It will create a <code>delta</code> directory containing information about this transaction and its data.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/_orc_acid_version</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000</span><br></pre></td></tr></table></figure><p>The schema of this folder’s name is <code>delta_minWID_maxWID_stmtID</code>, i.e. “delta” prefix, transactional writes’ range (minimum and maximum write ID), and statement ID. In detail:</p><ul><li>All INSERT statements will create a <code>delta</code> directory. UPDATE statement will also create <code>delta</code> directory right after a <code>delete</code> directory. <code>delete</code> directory is prefixed with “delete_delta”.</li><li>Hive will assign a globally unique ID for every transaction, both read and write. For transactional writes like INSERT and DELETE, it will also assign a table-wise unique ID, a.k.a. a write ID. The write ID range will be encoded in the <code>delta</code> and <code>delete</code> directory names.</li><li>Statement ID is used when multiple writes into the same table happen in one transaction.</li></ul><span id="more"></span><p>For its content, <code>_orc_acid_version</code> always contains “2”, indicating this directory is in ACID version 2 format. Compared with previous version, the main difference is that UPDATE now uses split-update technique to support predicate push down and other features (<a href="https://jira.apache.org/jira/browse/HIVE-14035">HIVE-14035</a>). <code>bucket_00000</code> is the inserted records. Since this table is not bucketed, there is only one file, and it is in <a href="https://orc.apache.org/">ORC</a> format. We can take a look at its content with <a href="https://orc.apache.org/docs/java-tools.html">orc-tools</a>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ orc-tools data bucket_00000</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:0,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Jerry&quot;,&quot;salary&quot;:5000&#125;&#125;</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:1,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Tom&quot;,&quot;salary&quot;:8000&#125;&#125;</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:2,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Kate&quot;,&quot;salary&quot;:6000&#125;&#125;</span><br></pre></td></tr></table></figure><p>The file content is displayed in JSON, row-wise. We can see the actual data is in <code>row</code>, while other keys work for transaction mechanism:</p><ul><li><code>operation</code> 0 means INSERT, 1 UPDATE, and 2 DELETE. UPDATE will not appear because of the split-update technique mentioned above.</li><li><code>originalTransaction</code> is the previous write ID. For INSERT, it is the same as <code>currentTransaction</code>. For DELETE, it is the write ID when this record is first created.</li><li><code>bucket</code> is a 32-bit integer defined by <code>BucketCodec</code> class. Their meanings are:<ul><li>bit 1-3: bucket codec version, currently <code>001</code>.</li><li>bit 4: reserved for future.</li><li>bit 5-16: the bucket ID, 0-based. This ID is determined by CLUSTERED BY columns and number of buckets. It matches the <code>bucket_N</code> prefixed files.</li><li>bit 17-20: reserved for future.</li><li>bit 21-32: statement ID.</li><li>For instance, the binary form of <code>536936448</code> is <code>00100000000000010000000000000000</code>, showing it is a version 1 codec, and bucket ID is 1.</li></ul></li><li><code>rowId</code> is the auto-generated unique ID within the transaction and bucket.</li><li><code>currentTransaction</code> is the current write ID.</li><li><code>row</code> contains the actual data. For DELETE, <code>row</code> will be null.</li></ul><p>We can note that the data rows are ordered by (<code>originalTransaction</code>, <code>bucket</code>, <code>rowId</code>), which is essential for the reading process.</p><p>These information can also be viewed by the <code>row__id</code> virtual column:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> row__id, id, name, salary <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:0&#125;    1       Jerry   5000</span><br><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:1&#125;    2       Tom     8000</span><br><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:2&#125;    3       Kate    6000</span><br></pre></td></tr></table></figure><h4 id="Streaming-Data-Ingest-V2"><a href="#Streaming-Data-Ingest-V2" class="headerlink" title="Streaming Data Ingest V2"></a>Streaming Data Ingest V2</h4><p>Hive 3.0 also upgrades the former <a href="https://cwiki.apache.org/confluence/display/Hive/Streaming+Data+Ingest+V2">Streaming API</a>. Now users or third-party tools like Flume can use the ACID feature writing data continuously into Hive table. These operations will also create <code>delta</code> directories. But mutation is no longer supported.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamingConnection</span> <span class="variable">connection</span> <span class="operator">=</span> HiveStreamingConnection.newBuilder().connect();</span><br><span class="line">connection.beginTransaction();</span><br><span class="line">connection.write(<span class="string">&quot;11,val11,Asia,China&quot;</span>.getBytes());</span><br><span class="line">connection.write(<span class="string">&quot;12,val12,Asia,India&quot;</span>.getBytes());</span><br><span class="line">connection.commitTransaction();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h3 id="Update-Data"><a href="#Update-Data" class="headerlink" title="Update Data"></a>Update Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">7000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>This statement will first run a query to find out the <code>row__id</code> of the updating records, and then create a <code>delete</code> directory a long with a <code>delta</code> directory:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000</span><br><span class="line">/user/hive/warehouse/employee/delete_delta_0000002_0000002_0000/bucket_00000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0000/bucket_00000</span><br></pre></td></tr></table></figure><p>Content of <code>delete_delta_0000002_0000002_0000/bucket_00000</code>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;operation&quot;:2,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:1,&quot;currentTransaction&quot;:2,&quot;row&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>Content of <code>delta_0000002_0000002_0000/bucket_00000</code>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:2,&quot;bucket&quot;:536870912,&quot;rowId&quot;:0,&quot;currentTransaction&quot;:2,&quot;row&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Tom&quot;,&quot;salary&quot;:7000&#125;&#125;</span><br></pre></td></tr></table></figure><p>DELETE statement works similarly to UPDATE, i.e. find the record but generate only <code>delete</code> directory.</p><h3 id="Merge-Statement"><a href="#Merge-Statement" class="headerlink" title="Merge Statement"></a>Merge Statement</h3><p>MERGE is like MySQL’s INSERT ON UPDATE. It can update target table with a source table. For instance:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_update (id <span class="type">int</span>, name string, salary <span class="type">int</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_update <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Tom&#x27;</span>,  <span class="number">7000</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> employee <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">USING</span> employee_update <span class="keyword">AS</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> salary <span class="operator">=</span> b.salary</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span> <span class="keyword">INSERT</span> <span class="keyword">VALUES</span> (b.id, b.name, b.salary);</span><br></pre></td></tr></table></figure><p>This statement will update the salary of Tom, and insert a new row of Mary. WHENs are considered different statements. The INSERT clause generates <code>delta_0000002_0000002_0000</code>, containing the row of Mary, while UPDATE generates <code>delete_delta_0000002_0000002_0001</code> and <code>delta_0000002_0000002_0001</code>, deleting and inserting the row of Tom.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0000</span><br><span class="line">/user/hive/warehouse/employee/delete_delta_0000002_0000002_0001</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0001</span><br></pre></td></tr></table></figure><h3 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h3><p>As time goes, there will be more and more <code>delta</code> and <code>delete</code> directories in the table, which will affect the read performance, since reading is a process of merging the results of valid transactions. Small files are neither friendly to file systems like HDFS. So Hive uses two kinds of compactors, namely minor and major, to merge these directories while preserving the transaction information.</p><p>Minor compaction will merge multiple <code>delta</code> and <code>delete</code> files into one <code>delta</code> and <code>delete</code> file, respectively. The transaction ID will be preserved in folder name as write ID range, as mentioned above, while omitting the statement ID. Compactions will be automatically initiated in Hive metastore process based on some configured thresholds. We can also trigger it manually with the following SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee COMPACT <span class="string">&#x27;minor&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Take the result of MERGE statement for an instance. After minor compaction, the folder structure will become:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delete_delta_0000001_0000002</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000002</span><br></pre></td></tr></table></figure><p>In <code>delta_0000001_0000002/bucket_00000</code>, rows are simply ordered and concatenated, i.e. two rows of Tom will be both included. Minor compact does not delete any data.</p><p>Major compaction, on the other hand, will merge and write the current table into a single directory, with the name <code>base_N</code>, where N is the latest write ID. Deleted data will be removed in major compaction. <code>row_id</code> remains untouched.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/base_0000002</span><br></pre></td></tr></table></figure><p>Note that after minor or major compaction, the original files will not be deleted immediately. Deletion is carried out by a cleaner thread, so there will be multiple files containing the same transaction data simultaneously. Take this into account when understanding the reading process.</p><h2 id="Reading-Process"><a href="#Reading-Process" class="headerlink" title="Reading Process"></a>Reading Process</h2><p>Now we see three kinds of files in an ACID table, <code>base</code>, <code>delta</code>, and <code>delete</code>. Each contains data rows that can be identified by <code>row__id</code> and sorted by it, too. Reading data from an ACID table is a process of merging these files, and reflecting the result of the last transaction. This process is written in <code>OrcInputFormat</code> and <code>OrcRawRecordMerger</code> class, and it is basically a merge-sort algorithm.</p><p>Take the following files for an instance. This structure can be generated by: insert three rows, do a major compaction, then update two rows. <code>1-0-0-1</code> is short for <code>originalTransaction</code> - <code>bucketId</code> (not encoded) - <code>rowId</code> - <code>currentTransaction</code>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+    +----------+    +----------+</span><br><span class="line">| base_1   |    | delete_2 |    | delta_2  |</span><br><span class="line">+----------+    +----------+    +----------+</span><br><span class="line">| 1-0-0-1  |    | 1-0-1-2  |    | 2-0-0-2  |</span><br><span class="line">| 1-0-1-1  |    | 1-0-2-2  |    | 2-0-1-2  |</span><br><span class="line">| 1-0-2-1  |    +----------+    +----------+</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>Merging process:</p><ul><li>Sort rows from all files by (<code>originalTransaction</code>, <code>bucketId</code>, <code>rowId</code>) ascendingly, (<code>currentTransaction</code>) descendingly. i.e.<ul><li><code>1-0-0-1</code></li><li><code>1-0-1-2</code></li><li><code>1-0-1-1</code></li><li>…</li><li><code>2-0-1-2</code></li></ul></li><li>Fetch the first record.</li><li>If the <code>row__id</code> is the same as previous, skip.</li><li>If the operation is DELETE, skip.<ul><li>As a result, for <code>1-0-1-2</code> and <code>1-0-1-1</code>, this row will be skipped.</li></ul></li><li>Otherwise, emit the row.</li><li>Repeat.</li></ul><p>The merging is done in a streaming way. Hive will open all the files, read the first record, and construct a <code>ReaderKey</code> class, storing <code>originalTransaction</code>, <code>bucketId</code>, <code>rowId</code>, and <code>currentTransaction</code>. <code>ReaderKey</code> class implements the <code>Comparable</code> interface, so they can be sorted in an customized order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordIdentifier</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;RecordIdentifier&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> writeId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> bucketId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> rowId;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">compareToInternal</span><span class="params">(RecordIdentifier other)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (other == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (writeId != other.writeId) &#123;</span><br><span class="line">      <span class="keyword">return</span> writeId &lt; other.writeId ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bucketId != other.bucketId) &#123;</span><br><span class="line">      <span class="keyword">return</span> bucketId &lt; other.bucketId ? - <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rowId != other.rowId) &#123;</span><br><span class="line">      <span class="keyword">return</span> rowId &lt; other.rowId ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderKey</span> <span class="keyword">extends</span> <span class="title class_">RecordIdentifier</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> currentWriteId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDeleteEvent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(RecordIdentifier other)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sup</span> <span class="operator">=</span> compareToInternal(other);</span><br><span class="line">    <span class="keyword">if</span> (sup == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (other.getClass() == ReaderKey.class) &#123;</span><br><span class="line">        <span class="type">ReaderKey</span> <span class="variable">oth</span> <span class="operator">=</span> (ReaderKey) other;</span><br><span class="line">        <span class="keyword">if</span> (currentWriteId != oth.currentWriteId) &#123;</span><br><span class="line">          <span class="keyword">return</span> currentWriteId &lt; oth.currentWriteId ? +<span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isDeleteEvent != oth.isDeleteEvent) &#123;</span><br><span class="line">          <span class="keyword">return</span> isDeleteEvent ? -<span class="number">1</span> : +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sup;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, the <code>ReaderKey</code> and the file handler will be put into a <code>TreeMap</code>, so every time we poll for the first entry, we can get the desired file handler and read data.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrcRawRecordMerger</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;ReaderKey, ReaderPair&gt; readers = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">next</span><span class="params">(RecordIdentifier recordIdentifier, OrcStruct prev)</span> &#123;</span><br><span class="line">    Map.Entry&lt;ReaderKey, ReaderPair&gt; entry = readers.pollFirstEntry();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Select-Files"><a href="#Select-Files" class="headerlink" title="Select Files"></a>Select Files</h3><p>Previously we pointed out that different transaction files may co-exist at the same time, so Hive needs to first select the files that are valid for the latest transaction. For instance, the following directory structure is the result of these operations: two inserts, one minor compact, one major compact, and one delete.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delta_0000001_0000001_0000</span><br><span class="line">delta_0000002_0000002_0000</span><br><span class="line">delta_0000001_0000002</span><br><span class="line">base_0000002</span><br><span class="line">delete_delta_0000003_0000003_0000</span><br></pre></td></tr></table></figure><p>Filtering process:</p><ul><li>Consult the Hive Metastore to find out the valid write ID list.</li><li>Extract transaction information from files names, including file type, write ID range, and statement ID.</li><li>Select the <code>base</code> file with the maximum valid write ID.</li><li>Sort <code>delta</code> and <code>delete</code> files by write ID range:<ul><li>Smaller <code>minWID</code> orders first;</li><li>If <code>minWID</code> is the same, larger <code>maxWID</code> orders first;</li><li>Otherwise, sort by <code>stmtID</code>; files w&#x2F;o <code>stmtID</code> orders first.</li></ul></li><li>Use the <code>base</code> file’s write ID as the current write ID, then iterate and filter <code>delta</code> files:<ul><li>If <code>maxWID</code> is larger than the current write ID, keep it, and update the current write ID;</li><li>If write ID range is the same as previous, keep the file, too.</li></ul></li></ul><p>There are some special cases in this process, e.g. no <code>base</code> file, multiple statements, contains original data files, even ACID version 1 files. More details can be found in <code>AcidUtils#getAcidState</code>.</p><h3 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title="Parallel Execution"></a>Parallel Execution</h3><p>When executing in parallel environment, such as multiple Hadoop mappers, <code>delta</code> files need to be re-organized. In short, <code>base</code> and <code>delta</code> files can be divided into different splits, while all <code>delete</code> files have to be available to all splits. This ensures deleted records will not be emitted.</p><p><img src="/images/hive-acid/parallel-execution.png" alt="Parallel Execution"></p><h3 id="Vectorized-Query"><a href="#Vectorized-Query" class="headerlink" title="Vectorized Query"></a>Vectorized Query</h3><p>For <a href="https://cwiki.apache.org/confluence/display/Hive/Vectorized+Query+Execution">vectoried query</a>, Hive will first try to load all <code>delete</code> files into memory and construct an optimized data structure that can be used to filter out deleted rows when processing row batches. If the <code>delete</code> files are too large, it falls back to sort-merge algorithm.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VectorizedOrcAcidRowBatchReader</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DeleteEventRegistry deleteEventRegistry;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">DeleteEventRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findDeletedRecords</span><span class="params">(ColumnVector[] cols, <span class="type">int</span> size, BitSet selectedBitSet)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ColumnizedDeleteEventRegistry</span> <span class="keyword">implements</span> <span class="title class_">DeleteEventRegistry</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SortMergedDeleteEventRegistry</span> <span class="keyword">implements</span> <span class="title class_">DeleteEventRegistry</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">next</span><span class="params">(NullWritable key, VectorizedRowBatch value)</span> &#123;</span><br><span class="line">    <span class="type">BitSet</span> <span class="variable">selectedBitSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitSet</span>(vectorizedRowBatchBase.size);</span><br><span class="line">    <span class="built_in">this</span>.deleteEventRegistry.findDeletedRecords(innerRecordIdColumnVector,</span><br><span class="line">        vectorizedRowBatchBase.size, selectedBitSet);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">setBitIndex</span> <span class="operator">=</span> selectedBitSet.nextSetBit(<span class="number">0</span>), selectedItr = <span class="number">0</span>;</span><br><span class="line">        setBitIndex &gt;= <span class="number">0</span>;</span><br><span class="line">        setBitIndex = selectedBitSet.nextSetBit(setBitIndex+<span class="number">1</span>), ++selectedItr) &#123;</span><br><span class="line">      value.selected[selectedItr] = setBitIndex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transaction-Management"><a href="#Transaction-Management" class="headerlink" title="Transaction Management"></a>Transaction Management</h2><p>Hive introduced a new lock manager to support transactional tables. <code>DbTxnManager</code> will detect the ACID operations in query plan and contact the Hive Metastore to open and commit new transactions. It also implements the read-write lock mechanism to support normal locking requirements.</p><p><img src="/images/hive-acid/transaction-management.png" alt="Transaction Management"></p><p>The Hive Metastore is responsible for allocating new transaction IDs. This is done in a database transaction so that multiple Metastore instances will not conflict with each other.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TxnHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Long&gt; <span class="title function_">openTxns</span><span class="params">(Connection dbConn, Statement stmt, OpenTxnRequest rqst)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sqlGenerator.addForUpdateClause(<span class="string">&quot;select ntxn_next from NEXT_TXN_ID&quot;</span>);</span><br><span class="line">    s = <span class="string">&quot;update NEXT_TXN_ID set ntxn_next = &quot;</span> + (first + numTxns);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> first; i &lt; first + numTxns; i++) &#123;</span><br><span class="line">      txnIds.add(i);</span><br><span class="line">      rows.add(i + <span class="string">&quot;,&quot;</span> + quoteChar(TXN_OPEN) + <span class="string">&quot;,&quot;</span> + now + <span class="string">&quot;,&quot;</span> + now + <span class="string">&quot;,&quot;</span></span><br><span class="line">          + quoteString(rqst.getUser()) + <span class="string">&quot;,&quot;</span> + quoteString(rqst.getHostname()) + <span class="string">&quot;,&quot;</span> + txnType.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; queries = sqlGenerator.createInsertValuesStmt(</span><br><span class="line">        <span class="string">&quot;TXNS (txn_id, txn_state, txn_started, txn_last_heartbeat, txn_user, txn_host, txn_type)&quot;</span>, rows);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions">Hive Transactions</a></li><li><a href="https://www.slideshare.net/Hadoop_Summit/transactional-operations-in-apache-hive-present-and-future-102803358">Transactional Operations in Apache Hive</a></li><li><a href="https://orc.apache.org/docs/acid.html">ORCFile ACID Support</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://hive.apache.org/&quot;&gt;Apache Hive&lt;/a&gt; introduced transactions since version 0.13 to fully support ACID semantics on Hive table, including INSERT&amp;#x2F;UPDATE&amp;#x2F;DELETE&amp;#x2F;MERGE statements, streaming data ingestion, etc. In Hive 3.0, this feature is further improved by optimizing the underlying data file structure, reducing constraints on table scheme, and supporting predicate push down and vectorized query. Examples and setup can be found on &lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions&quot;&gt;Hive wiki&lt;/a&gt; and other &lt;a href=&quot;https://hortonworks.com/tutorial/using-hive-acid-transactions-to-insert-update-and-delete-data/&quot;&gt;tutorials&lt;/a&gt;, while this article will focus on how transactional table is saved on HDFS, and take a closer look at the read-write process.&lt;/p&gt;
&lt;h2 id=&quot;File-Structure&quot;&gt;&lt;a href=&quot;#File-Structure&quot; class=&quot;headerlink&quot; title=&quot;File Structure&quot;&gt;&lt;/a&gt;File Structure&lt;/h2&gt;&lt;h3 id=&quot;Insert-Data&quot;&gt;&lt;a href=&quot;#Insert-Data&quot; class=&quot;headerlink&quot; title=&quot;Insert Data&quot;&gt;&lt;/a&gt;Insert Data&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; employee (id &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, name string, salary &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STORED &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ORC TBLPROPERTIES (&lt;span class=&quot;string&quot;&gt;&amp;#x27;transactional&amp;#x27;&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; employee &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Jerry&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Tom&amp;#x27;&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Kate&amp;#x27;&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;6000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;An INSERT statement is executed in a single transaction. It will create a &lt;code&gt;delta&lt;/code&gt; directory containing information about this transaction and its data.&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000/_orc_acid_version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The schema of this folder’s name is &lt;code&gt;delta_minWID_maxWID_stmtID&lt;/code&gt;, i.e. “delta” prefix, transactional writes’ range (minimum and maximum write ID), and statement ID. In detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All INSERT statements will create a &lt;code&gt;delta&lt;/code&gt; directory. UPDATE statement will also create &lt;code&gt;delta&lt;/code&gt; directory right after a &lt;code&gt;delete&lt;/code&gt; directory. &lt;code&gt;delete&lt;/code&gt; directory is prefixed with “delete_delta”.&lt;/li&gt;
&lt;li&gt;Hive will assign a globally unique ID for every transaction, both read and write. For transactional writes like INSERT and DELETE, it will also assign a table-wise unique ID, a.k.a. a write ID. The write ID range will be encoded in the &lt;code&gt;delta&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; directory names.&lt;/li&gt;
&lt;li&gt;Statement ID is used when multiple writes into the same table happen in one transaction.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="hive" scheme="https://shzhangji.com/tags/hive/"/>
    
    <category term="hadoop" scheme="https://shzhangji.com/tags/hadoop/"/>
    
  </entry>
  
</feed>
