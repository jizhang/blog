<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ji ZHANG&#39;s Blog</title>
  
  <subtitle>If I rest, I rust.</subtitle>
  <link href="https://shzhangji.com/atom.xml" rel="self"/>
  
  <link href="https://shzhangji.com/"/>
  <updated>2023-02-13T10:36:12.000Z</updated>
  <id>https://shzhangji.com/</id>
  
  <author>
    <name>Ji ZHANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setup CI with GitHub Actions (Java/Node/Python)</title>
    <link href="https://shzhangji.com/blog/2023/02/13/setup-ci-with-github-actions-java-node-python/"/>
    <id>https://shzhangji.com/blog/2023/02/13/setup-ci-with-github-actions-java-node-python/</id>
    <published>2023-02-13T10:36:12.000Z</published>
    <updated>2023-02-13T10:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Continuous integration, or CI, is a great tool to maintain a healthy code base. As in <a href="https://github.com/okonet/lint-staged">lint-staged</a>‚Äòs motto, ‚Äúdon‚Äôt let üí© slip into your code base‚Äù, CI can run various checks to prevent compilation error, unit test failure, or violation of code style from being merged into the main branch. Besides, CI can also do the packaging work, making artifacts that are ready to be deployed to production. In this article, I‚Äôll demonstrate how to use <a href="https://docs.github.com/en/actions">GitHub Actions</a> to define CI workflow that checks and packages Java&#x2F;Node&#x2F;Python applications.</p><p><img src="/images/ci-with-github-actions.png" alt="CI with GitHub Actions"></p><h2 id="Run-Maven-verify-on-push"><a href="#Run-Maven-verify-on-push" class="headerlink" title="Run Maven verify on push"></a>Run Maven verify on push</h2><p>CI typically has two phases, one is during development and before merging into the master, the other is right after the feature branch is merged. Former only requires checking the code, i.e. build the newly pushed code in a branch, and see if there‚Äôs any violation or bug. After it‚Äôs merged, CI will run checking <em>and</em> packaging altogether, to produce a deployable artifact, usually a Docker image.</p><p>For Java project, we use JUnit, Checkstyle and SpotBugs as Maven plugins to run various checks whenever someone pushes to a feature branch. To do that with GitHub Actions, we need to create a workflow that includes setting up Java environment and running <code>mvn verify</code>. Here‚Äôs a minimum workflow definition in <code>project-root/.github/workflows/build.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">temurin</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">--batch-mode</span> <span class="string">verify</span></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><code>on: push</code> defines the <a href="https://docs.github.com/en/actions/using-workflows/triggering-a-workflow">trigger</a> of the workflow. Whenever there‚Äôs a new commit pushed to any branch, the workflow will run. You can limit the branches that trigger this workflow, or use some other events like <code>pull_request</code>.</li><li><code>verify</code> is the name of a job we define in this workflow. A workflow can have multiple jobs, we‚Äôll add another one named <code>build</code> very soon. Jobs are executed in parallel by default, that‚Äôs why <code>jobs</code> is a mapping instead of a sequence. But we can add dependencies between jobs, as well as conditions that may prevent a job from running.</li><li>A job consists of severl <code>steps</code>, here we‚Äôve defined three. A step can either be a command, indicated by <code>run</code>; or use of a predefined set of code, named ‚Äúaction‚Äù, indicated by <code>uses</code>. There‚Äôre tons of official and third-party actions we can use to build up a workflow. We can also build our own actions to share in a corporation.</li><li><a href="https://github.com/actions/checkout">actions&#x2F;checkout</a> merely checks out the code into workspace for further use. It only checks out the one commit that triggers this workflow. It‚Äôs also a good practice to pin the version of an action, as in <code>actions/checkout@v3</code>.</li><li><a href="https://github.com/actions/setup-java">actions&#x2F;setup-java</a> creates the specific JDK environment for us. <code>cache: maven</code> is important here because it utilizes the <a href="https://github.com/actions/cache">actions&#x2F;cache</a> to upload Maven dependencies to GitHub‚Äôs cache server, so that they don‚Äôt need to be downloaded from the central repository again. The cache key is based on the content of <code>pom.xml</code>, and there‚Äôre several rules of <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">cache sharing between branches</a>.</li></ul><h2 id="Initialize-service-containers-for-testing"><a href="#Initialize-service-containers-for-testing" class="headerlink" title="Initialize service containers for testing"></a>Initialize service containers for testing</h2><p>During the test phase, we oftentimes need a local database service to run the unit tests, integration tests, etc., and GitHub Actions comes with a ready-made solution for this purpose, viz. <a href="https://docs.github.com/en/actions/using-containerized-services/about-service-containers">Containerized services</a>. Here is a minimum example of spinning up a Redis instance within a job:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><p>Before running the <code>verify</code> job, the runner, with Docker already installed, starts up a Redis container and maps its port to the host, in this case <code>6379</code>. Then any process in the runner can access Redis via <code>localhost:6379</code>. Mind that containers take time to start, and sometimes the starting process is long, so GitHub Actions uses <code>docker inspect</code> to ensure container has entered the <code>healthy</code> state before it makes headway to the next step. So we need to set <a href="https://docs.docker.com/engine/reference/commandline/run/"><code>--health-cmd</code></a> for our services:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">  <span class="attr">options:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    --health-cmd &quot;redis-cli ping&quot;</span></span><br><span class="line"><span class="string">    --health-interval 10s</span></span><br><span class="line"><span class="string">    --health-timeout 5s</span></span><br><span class="line"><span class="string">    --health-retries 5</span></span><br></pre></td></tr></table></figure><p>This is especially important for the MySQL service we are about to setup, because it usually takes more time to start up:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">MYSQL_DATABASE:</span> <span class="string">project_test</span></span><br><span class="line">          <span class="attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">options:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">          --health-cmd=&quot;mysqladmin ping&quot;</span></span><br><span class="line"><span class="string">          --health-interval=10s</span></span><br><span class="line"><span class="string">          --health-timeout=5s</span></span><br><span class="line"><span class="string">          --health-retries=5</span></span><br></pre></td></tr></table></figure><h2 id="Share-artifacts-between-jobs"><a href="#Share-artifacts-between-jobs" class="headerlink" title="Share artifacts between jobs"></a>Share artifacts between jobs</h2><p>After <code>mvn verify</code>, there‚Äôll be an uber JAR in <code>target/project-1.0-SNAPSHOT.jar</code>, and we want to build it into a Docker image for deployment. We‚Äôre going to create a separate job for this task, but the first thing we need to do is to transfer the JAR file from the <code>verify</code> job <em>to</em> the new <code>build</code> job, because jobs in a workflow are executed independently and in parallel, so we also need to tell the runner that <code>build</code> is dependent on <code>verify</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">JAR_FILE:</span> <span class="string">project-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">verify:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">--batch-mode</span> <span class="string">verify</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">target/$&#123;&#123;</span> <span class="string">env.JAR_FILE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">retention-days:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">verify</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br></pre></td></tr></table></figure><ul><li><code>env</code> is a place to set common variables within workflow. Here we use it for the filename of the JAR. We‚Äôll see more use of it in the <code>build</code> job.</li><li><code>actions/upload-artifact</code> and its counterpart <code>download-artifact</code> are used to share files between jobs, aka., artifact. It can be a single file or a directory, identified by the <code>name</code>. Artifacts can only be shared within the same <em>workflow run</em>. Once uploaded, they are accessible through GitHub UI as well. There‚Äôre more examples in the <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts">documentation</a>.</li><li><code>needs</code> creates a dependency between <code>verify</code> and <code>build</code>, so that they are executed sequentially.</li></ul><h2 id="Build-Docker-image-for-deployment"><a href="#Build-Docker-image-for-deployment" class="headerlink" title="Build Docker image for deployment"></a>Build Docker image for deployment</h2><p>Let‚Äôs take Spring Boot project for an example. There‚Äôre some <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/container-images.html">guidelines</a> on how to efficiently build the packaged JAR into a layered Docker image, with the built-in tool provided by Spring Boot. The full Dockerfile can be found in the above link. One thing we care about is the <code>JAR_FILE</code> argument:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17</span>-jre as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> application</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE=target/*.jar</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> application.jar</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>For the <code>build</code> job, the <code>docker</code> CLI is already installed in the runner, but we still need to take care of something like logging into Docker repository, tagging the image, etc. Fortunately there‚Äôre some <code>actions</code> for these purposes. Besides, we‚Äôre not going to push our image into Docker hub. Instead, we use the <a href="https://docs.github.com/en/packages">GitHub Packages</a> service. Here‚Äôs the full definition of the <code>build</code> job:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">REGISTRY:</span> <span class="string">ghcr.io</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">JAR_FILE:</span> <span class="string">project-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">verify</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">registry:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.actor</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/metadata-action@v4</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">images:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.REGISTRY</span> <span class="string">&#125;&#125;/$&#123;&#123;</span> <span class="string">env.IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">type=sha</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">JAR_FILE=$&#123;&#123;</span> <span class="string">env.JAR_FILE</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>if</code> statement indicates this job is only executed under certain circumstances. In this case, only run on <code>master</code> branch. There‚Äôre other <a href="https://docs.github.com/en/actions/learn-github-actions/contexts">conditions</a> you can use, and <code>if</code> can also be added in <code>step</code>. Say only upload artifact when the <code>verify</code> job is executed on <code>master</code> branch.</li><li><code>docker/login-action</code> setups the credentials for logging into GitHub Packages. The <code>GITHUB_TOKEN</code> is automatically generated and its permissions can be controlled in the <a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository">Settings</a>.</li><li><code>docker/metadata-action</code> is used to extract meta data from the repository. In this example, I‚Äôm using the Git short commit as the Docker image tag, i.e. <code>sha-729b875</code>, and this action helps me to extract this information from the Git repository and exposes it as the <a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs">output</a>, which is another feature that GitHub Actions provides for sharing information between steps and jobs. To be more specific:<ul><li><code>metadata-action</code> will generate a list of tags based on the <code>images</code> and <code>tags</code> parameters. The above configuration will generate something like <code>ghcr.io/jizhang/proton:sha-729b875</code>. Other options can be found in this <a href="https://github.com/docker/metadata-action">link</a>.</li><li>We give this step an <code>id</code>, which is <code>meta</code>, and then access its output via <code>steps.meta.outputs.tags</code>.</li><li>The parameter <code>images</code>, <code>tags</code>, and <code>tags</code> in <code>build-push-action</code> all support multi-line string so that multiple tags can be published.</li></ul></li><li><code>docker/build-push-action</code> does the build-and-push job. The Dockerfile should be in the project root, and we pass the <code>JAR_FILE</code> argument which points to the artifact that we‚Äôve downloaded from the previous job.</li></ul><p>If built successfully, the Docker image can be found in your Profile - Packages. Here‚Äôs the <a href="https://github.com/jizhang/proton-server/blob/32b5a28f5c7227d74557a1e80dc6579b345487a1/.github/workflows/build.yml">full example</a> of using GitHub Actions with a Java project. The final pipeline looks like this:</p><p><img src="/images/github-actions-java.png" alt="GitHub Actions with Java project"></p><h2 id="Setup-CI-for-Node-js-project"><a href="#Setup-CI-for-Node-js-project" class="headerlink" title="Setup CI for Node.js project"></a>Setup CI for Node.js project</h2><p>Similarly, we create two jobs for testing and building. In the <code>test</code> job, we use the official <code>setup-node</code> action to install specific Node.js version. It also privodes cache facility for <code>yarn</code>, <code>npm</code> package managers.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;18&#x27;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">lint:ci</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">build/Dockerfile</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The build output is generaly in the <code>dist</code> directory, so we just copy it onto an Nginx image and publish to GitHub Packages. I also have a <a href="https://github.com/jizhang/proton/blob/2da93e759861236099983955ef4964958a70248d/.github/workflows/build.yml">project</a> for demonstration.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.17</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> build/nginx/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> dist/ /app/</span></span><br></pre></td></tr></table></figure><h2 id="Setup-CI-for-Python-project"><a href="#Setup-CI-for-Python-project" class="headerlink" title="Setup CI for Python project"></a>Setup CI for Python project</h2><p>For Python project, one of the popular dependency management tools is <a href="https://python-poetry.org/">Poetry</a>, and the official <code>setup-python</code> action provides out-of-the-box caching for Poetry-managed virtual environment. Here‚Äôs the abridged <code>build.yml</code>, full file can be found in this <a href="https://github.com/jizhang/timetable/blob/63a77df1a2f0df4d1e816e60211f1e960441029b/.github/workflows/build.yml">link</a>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">PYTHON_VERSION:</span> <span class="string">&#x27;3.10&#x27;</span></span><br><span class="line">  <span class="attr">POETRY_VERSION:</span> <span class="string">&#x27;1.3.2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">pipx</span> <span class="string">install</span> <span class="string">poetry==$&#123;&#123;</span> <span class="string">env.POETRY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-python@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.PYTHON_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">poetry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">run</span> <span class="string">ruff</span> <span class="string">timetable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">poetry</span> <span class="string">run</span> <span class="string">mypy</span> <span class="string">timetable</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker/build-push-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            PYTHON_VERSION=$&#123;&#123; env.PYTHON_VERSION &#125;&#125;</span></span><br><span class="line"><span class="string">            POETRY_VERSION=$&#123;&#123; env.POETRY_VERSION &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>But for the <code>build</code> job, Python is different from the aforementioned projects in that it doesn‚Äôt produce bundle files like JAR or minified JS. So we have to invoke Poetry inside the Dockerfile to install the project dependencies, which makes the Dockerfile a bit more complicated:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> PYTHON_VERSION</span><br><span class="line"><span class="keyword">FROM</span> python:$&#123;PYTHON_VERSION&#125;-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> POETRY_VERSION</span><br><span class="line"><span class="keyword">ENV</span> POETRY_HOME=/opt/poetry</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m venv <span class="variable">$POETRY_HOME</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/pip install poetry==<span class="variable">$&#123;POETRY_VERSION&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="variable">$POETRY_HOME</span>/bin/poetry config virtualenvs.create <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="variable">$POETRY_HOME</span>/bin/poetry install --extras gunicorn --without dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> timetable/ ./timetable/</span></span><br></pre></td></tr></table></figure><ul><li>According to the guidelines, Poetry should be installed in a separate virtual environment. Using <code>pipx</code> also works.</li><li>For project dependencies however, we install them directly into the system level Python, because this container is only used by one application. Setting <code>virtualenvs.create</code> to <code>false</code> tells Poetry to skip creating new environment for us.</li><li>When installing dependencies, we skip the ones for development and include the <code>gunicorn</code> WSGI server. Check out the documentation of Poetry and the sample project‚Äôs <a href="https://github.com/jizhang/timetable/blob/63a77df1a2f0df4d1e816e60211f1e960441029b/pyproject.toml">pyproject.toml</a> file for more information.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven">https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven</a></li><li><a href="https://docs.github.com/en/actions/publishing-packages/publishing-docker-images">https://docs.github.com/en/actions/publishing-packages/publishing-docker-images</a></li><li><a href="https://endjin.com/blog/2022/09/continuous-integration-with-github-actions">https://endjin.com/blog/2022/09/continuous-integration-with-github-actions</a></li><li><a href="https://github.com/vuejs/vue/blob/v2.7.14/.github/workflows/ci.yml">https://github.com/vuejs/vue/blob/v2.7.14/.github/workflows/ci.yml</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Continuous integration, or CI, is a great tool to maintain a healthy code base. As in &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt;‚Äòs motto, ‚Äúdon‚Äôt let üí© slip into your code base‚Äù, CI can run various checks to prevent compilation error, unit test failure, or violation of code style from being merged into the main branch. Besides, CI can also do the packaging work, making artifacts that are ready to be deployed to production. In this article, I‚Äôll demonstrate how to use &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt; to define CI workflow that checks and packages Java&amp;#x2F;Node&amp;#x2F;Python applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ci-with-github-actions.png&quot; alt=&quot;CI with GitHub Actions&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Run-Maven-verify-on-push&quot;&gt;&lt;a href=&quot;#Run-Maven-verify-on-push&quot; class=&quot;headerlink&quot; title=&quot;Run Maven verify on push&quot;&gt;&lt;/a&gt;Run Maven verify on push&lt;/h2&gt;&lt;p&gt;CI typically has two phases, one is during development and before merging into the master, the other is right after the feature branch is merged. Former only requires checking the code, i.e. build the newly pushed code in a branch, and see if there‚Äôs any violation or bug. After it‚Äôs merged, CI will run checking &lt;em&gt;and&lt;/em&gt; packaging altogether, to produce a deployable artifact, usually a Docker image.&lt;/p&gt;
&lt;p&gt;For Java project, we use JUnit, Checkstyle and SpotBugs as Maven plugins to run various checks whenever someone pushes to a feature branch. To do that with GitHub Actions, we need to create a workflow that includes setting up Java environment and running &lt;code&gt;mvn verify&lt;/code&gt;. Here‚Äôs a minimum workflow definition in &lt;code&gt;project-root/.github/workflows/build.yml&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;push&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;verify:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/checkout@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/setup-java@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;java-version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;17&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;distribution:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;temurin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;cache:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;maven&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;mvn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;--batch-mode&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;verify&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="github" scheme="https://shzhangji.com/tags/github/"/>
    
    <category term="ci" scheme="https://shzhangji.com/tags/ci/"/>
    
    <category term="docker" scheme="https://shzhangji.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API Authentication with Spring Security</title>
    <link href="https://shzhangji.com/blog/2023/01/15/restful-api-authentication-with-spring-security/"/>
    <id>https://shzhangji.com/blog/2023/01/15/restful-api-authentication-with-spring-security/</id>
    <published>2023-01-15T06:51:51.000Z</published>
    <updated>2023-01-15T06:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to implementing user authentication in RESTful API server, there‚Äôre several options like <a href="https://spring.io/projects/spring-security">Spring Security</a>, <a href="https://shiro.apache.org/">Apache Shiro</a>, or writing our own version of Filters and Servlets. If the server already uses <a href="https://spring.io/projects/spring-boot">Spring Boot</a>, then Spring Security is really a good fit, for it integrates quite well with Spring Boot project, thanks to all those automatic configurations. However, Spring Security‚Äôs login facility is originally built for web forms or basic HTTP authentication, while modern apps usually lean on RESTful API. We can either adapt the frontend client to utilizing the built-in login methods as in this tutorial <a href="https://spring.io/guides/tutorials/spring-security-and-angular-js/">Spring Security and Angular JS</a>, or write custom Filter to <a href="https://ckinan.com/blog/spring-security-credentials-from-json-request/">extract user credentials from input JSON</a>.</p><p><img src="/images/spring-security.png" alt="Spring Security"></p><p>Having said that, personally I still prefer to maintain a consistent API style in user authentication, and I don‚Äôt want to write awkward logics with raw Servlet request&#x2F;response objects in Filter, instead of using what Spring MVC provides, i.e. <code>@RestController</code>, <code>@RequestBody</code>, form validation, etc. Luckily, Spring Security provides integration for Servlet API, so that we can login&#x2F;logout user within the Controller. In this article, I will demonstrate how to use Spring Security to guard your RESTful API server, with the following functions:</p><ul><li>Login&#x2F;logout with JSON API.</li><li>Return 401 for unauthenticated requests.</li><li>Custom table for user data.</li><li>CSRF protection.</li><li>Remember me.</li><li>Session persistence.</li></ul><span id="more"></span><h2 id="Defining-user-authentication-API"><a href="#Defining-user-authentication-API" class="headerlink" title="Defining user authentication API"></a>Defining user authentication API</h2><p>Let‚Äôs define three APIs for user login, logout, and one that returns the currently logged-in user. All the requests and responses should be in the form of <code>application/json</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /api/login</span><br><span class="line">Request: &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;888888&quot;&#125;</span><br><span class="line">Response: &#123;&quot;id&quot;:1,&quot;nickname&quot;:&quot;Jerry&quot;&#125;</span><br><span class="line"></span><br><span class="line">POST /api/logout</span><br><span class="line">Response: &#123;&#125;</span><br><span class="line"></span><br><span class="line">GET /api/current-user</span><br><span class="line">Response: &#123;&quot;id&quot;:1,&quot;nickname&quot;:&quot;Jerry&quot;&#125;</span><br></pre></td></tr></table></figure><p>With Spring Boot, creating RESTful APIs is effortless. In the following example, we also add form validation and a custom exception handled by a global contoller. But these functions are beyond the scope of this article. The Spring Boot version I‚Äôm using is 3.x, with Spring Security 6.x, and Java 17.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(<span class="number">1</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> LogoutResponse <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LogoutResponse</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(<span class="number">1</span>, <span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CurrentUser</span><span class="params">(Integer id, String nickname)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">LogoutResponse</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Configure-Spring-Security-filter-chain"><a href="#Configure-Spring-Security-filter-chain" class="headerlink" title="Configure Spring Security filter chain"></a>Configure Spring Security filter chain</h2><p>Add the Spring Security dependency into the project, along with the JDBC related ones, since we‚Äôre going to retrieve user information from own version of <code>user</code> table. Note the dependency versions are managed by Spring Boot parent pom.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It‚Äôs not that Spring Security doesn‚Äôt come with good defaults for table schema, but we probably want to have more control over them or we already have a set of user tables. If you‚Äôre interested, here‚Äôs the link to the default <a href="https://docs.spring.io/spring-security/reference/servlet/appendix/database-schema.html#_user_schema">User Schema</a>. Instead, I‚Äôm using the following schema in this demo.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT</span><br><span class="line">  ,username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,nickname <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,created_at DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">  ,updated_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">  ,<span class="keyword">UNIQUE</span> KEY uk_username (username)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$10$f4aQLof9kgM8mzJIP7a.Vuc3WYcQK8brcL6hrHdCdkzTH8AppEpOm&#x27;</span>, <span class="string">&#x27;Jerry&#x27;</span>, NOW(), NOW());</span><br></pre></td></tr></table></figure><p>The default password-hashing algorithm used by Spring Security is BCrypt. The following snippet can be used to generate such password digest. Other options can be found <a href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html">here</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"><span class="type">var</span> <span class="variable">password</span> <span class="operator">=</span> encoder.encode(<span class="string">&quot;888888&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&#123;bcrypt&#125;&quot;</span> + password);</span><br></pre></td></tr></table></figure><p>By default, Spring Security will guard all API endpoints including <code>/api/login</code>, so we first need to tell it to back down at certain requests, by configuring the <code>SecurityFilterChain</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">        .authorizeHttpRequests(customizer -&gt; customizer</span><br><span class="line">            .requestMatchers(<span class="string">&quot;/api/login&quot;</span>).permitAll()</span><br><span class="line">            .requestMatchers(<span class="string">&quot;/api/**&quot;</span>).authenticated()</span><br><span class="line">            .anyRequest().denyAll())</span><br><span class="line">        .exceptionHandling(customizer -&gt; customizer</span><br><span class="line">            .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">HttpStatusEntryPoint</span>(HttpStatus.UNAUTHORIZED)))</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In addition, we tell Spring Security that when an unauthenticated user tries to access the restricted routes, it‚Äôll respond with 401 Unauthorized, so that the client, usually a single page application, can redirect to its login page. This facility is called authentication entry point. In the old days, it was the server‚Äôs job to redirect to a login page, so the default entry point is an HTML page resided in the <code>/login</code> URL.</p><h2 id="Retrieve-user-credentials-from-database"><a href="#Retrieve-user-credentials-from-database" class="headerlink" title="Retrieve user credentials from database"></a>Retrieve user credentials from database</h2><p>Again, with Spring Boot, this task is much simplified. Let‚Äôs create the <code>User</code> entity and its corresponding repository.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String nickname;</span><br><span class="line">  <span class="keyword">private</span> Date createdAt;</span><br><span class="line">  <span class="keyword">private</span> Date updatedAt;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123; <span class="keyword">return</span> Set.of(); &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;User, Integer&gt; &#123;</span><br><span class="line">  Optional&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note the <code>User</code> class implements the <code>UserDetails</code> interface, which tells Spring Security that this class can be used for authentication. To wire it into the mechanism, we need another class that implements <code>UserDetailsService</code> interface, mainly for retrieving the <code>User</code> instances from wherever we store them.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserRepository repo;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> repo.findByUsername(username)</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;Username &quot;</span> + username + <span class="string">&quot; not found&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It‚Äôll find the table row by username, and use the aforementioned password encoder to check the authenticity.</p><h2 id="User-login-in-Controller-methods"><a href="#User-login-in-Controller-methods" class="headerlink" title="User login in Controller methods"></a>User login in Controller methods</h2><p>From Servlet 3+, <code>HttpServletRequest</code> adds <code>login</code>&#x2F;<code>logout</code> methods to help authenticate user credential programmatically, and Spring Security <a href="https://docs.spring.io/spring-security/reference/servlet/integrations/servlet-api.html#servletapi-3">integrates with this function</a>. So in our <code>/api/login</code> handler, we simply invoke this method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult,</span></span><br><span class="line"><span class="params">                         HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    request.login(form.getUsername(), form.getPassword());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(<span class="string">&quot;Invalid username or password&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">var</span> <span class="variable">auth</span> <span class="operator">=</span> (Authentication) request.getUserPrincipal();</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) auth.getPrincipal();</span><br><span class="line">  log.info(<span class="string">&quot;User &#123;&#125; logged in.&quot;</span>, user.getUsername());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>request.logout</code> can be used accordingly, and for <code>/api/current-user</code>, the <code>@AuthenticationPrincipal</code> annotation can be used on parameter to access the currently logged-in user:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">(<span class="meta">@AuthenticationPrincipal</span> User user)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can test these APIs with <a href="https://httpie.io/">httpie</a>, a commandline HTTP client:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/current-user</span><br><span class="line">HTTP/1.1 401</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Sun, 15 Jan 2023 04:10:51 GMT</span><br></pre></td></tr></table></figure><p>As expected, since we‚Äôre not logged in, the server responds with 401. Then let‚Äôs try authenticate with username and password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888</span><br><span class="line">HTTP/1.1 401</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Sun, 15 Jan 2023 04:12:50 GMT</span><br></pre></td></tr></table></figure><p>Unfortunately, the server denies us agian even if we provide the correct credential. The reason is Spring Security, by default, enables CSRF protection for all non-idempotent requests, such as POST, DELETE, etc. This can be disabled by configuration, and next section I‚Äôll show you how to use it properly to protect the API.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> http</span><br><span class="line">      .authorizeHttpRequests(customizer -&gt; customizer)</span><br><span class="line">      .csrf().disable()</span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now test the API again. Note that in the second request, we pass the Session ID as Cookie. You may notice the key <code>SESSION</code> is different from the default <code>JSESSIONID</code>, that is because I‚Äôm using Spring Session for session persistence, which I‚Äôll cover in the last section.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 04:20:45 GMT</span><br><span class="line">Set-Cookie: SESSION=ZDZkOGQ5NTEtYmI4My00YjI2LTg3YzYtNDMzZTlkOWRmZDYz; Path=/; HttpOnly; SameSite=Lax</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% http localhost:8080/api/current-user Cookie:SESSION=ZDZkOGQ5NTEtYmI4My00YjI2LTg3YzYtNDMzZTlkOWRmZDYz</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 04:21:03 GMT</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Enable-CSRF-protection"><a href="#Enable-CSRF-protection" class="headerlink" title="Enable CSRF protection"></a>Enable CSRF protection</h2><p>CSRF protection prevents malicious site from tricking user to submit a form unwillingly. Every form will be embedded with a server-generated token known as the CSRF token. Since the token cannot be attained by third-party, and it is validated in every submission, thus making the request safe. In the old days, again, web forms are generated on server side, while the token is saved in a hidden <code>&lt;input&gt;</code> and got submitted together with the form data. For instance, in Thymeleaf the token can be retrieved by a request attribute named <code>_csrf</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>But with SPA (Single Page Application), we need another way to retrieve the token. One approach is mentioned in the Angular tutorial I linked to earlier, in which the CSRF token is saved in Cookie, and every Ajax POST request is equipped with a header containing this token. Here I take a different approach, that is creating a dedicated endpoint for token retrieval:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/csrf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CsrfResponse <span class="title function_">csrf</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">csrf</span> <span class="operator">=</span> (CsrfToken) request.getAttribute(<span class="string">&quot;_csrf&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CsrfResponse</span>(csrf.getToken());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">CsrfResponse</span><span class="params">(String token)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>This API should also be excluded from Spring Security:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestMatchers(<span class="string">&quot;/api/csrf&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure><p>The client could fetch the CSRF token when it needs to do a POST&#x2F;DELETE request. This token can also be cached in <code>localStorage</code> for further use, as long as the session is not timed out. Don‚Äôt forget to clear the cache when user logs out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCsrfToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/csrf&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> payload = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">  <span class="keyword">return</span> payload.<span class="property">token</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;X-CSRF-TOKEN&#x27;</span>: <span class="keyword">await</span> <span class="title function_">getCsrfToken</span>(),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; username, password &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Remember-me-authentication"><a href="#Remember-me-authentication" class="headerlink" title="Remember-me authentication"></a>Remember-me authentication</h2><p>When implementing this demo, the most tricky part is to utilize Spring Security‚Äôs built-in remember-me authentication, in that Spring Security basically functions as a series of Filters, so when I decide to authenticate user in Controller instead of Filter, there‚Äôll be some extra work to do. Normally, with form login or filter-based auth, remember-me can be switched on by the following config:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe(customizer -&gt; customizer.alwaysRemember(<span class="literal">true</span>).key(<span class="string">&quot;demo&quot;</span>))</span><br></pre></td></tr></table></figure><p>Under the hood, when user has logged in successfully, <code>RememberMeServices#loginSuccess</code> is invoked to generate and save a <code>remember-me</code> Cookie to the client. Next time the user can login without providing username and password.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">% http localhost:8080/api/login username=admin password=888888 \</span><br><span class="line">    Cookie:SESSION=YTI3ODMzZDctMjJlOC00MzNhLWIxYjItMTJkYzlhZDE2ZmM3 \</span><br><span class="line">    X-CSRF-TOKEN:7NABU1UXxYeZH3GQf0G4NB0qGEiZwc0yIPR95Cte7jBWnYDc2-EzZTRzpuG0e0eoSWyMVi4YNSmo96wfQ8NE3Bg92QZhq7Pt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 05:59:41 GMT</span><br><span class="line">Set-Cookie: remember-me=YWRtaW46MTY3NDk3MTk4MTAwNDpTSEEyNTY6YmY3NjAwMmU0ODg3ZTFiMzgxMDBhNWEyMzM1NDgxOWYzODgwYmIxM2JlMzhmNjM2MjA1MGM0MWNkMjA1YWY1Yg; Max-Age=1209600; Expires=Sun, 29 Jan 2023 05:59:41 GMT; Path=/; HttpOnly</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% http localhost:8080/api/current-user \</span><br><span class="line">    Cookie:remember-me=YWRtaW46MTY3NDk3MTk4MTAwNDpTSEEyNTY6YmY3NjAwMmU0ODg3ZTFiMzgxMDBhNWEyMzM1NDgxOWYzODgwYmIxM2JlMzhmNjM2MjA1MGM0MWNkMjA1YWY1Yg</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sun, 15 Jan 2023 05:59:59 GMT</span><br><span class="line">Set-Cookie: SESSION=NDA4NjEwM2ItNTY2YS00ZDFlLWFiNjEtOTJjNGI2MGE4MTlj; Path=/; HttpOnly; SameSite=Lax</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;nickname&quot;: &quot;Jerry&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unfortunately, <code>HttpServletRequest#login</code> does not call <code>RememberMeServices#loginSuccess</code> for us, so we need to invoke the method by ourselves. Worse still, the <code>RememberMeServices</code> instance, in this case <code>TokenBasedRememberMeServices</code>, is only available within the Filter chain, meaning it is not registered in the Spring IoC container. After some digging in the source code, I managed to expose this instance to other Spring components.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ConfigurableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(&quot;securityFilterChain&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">chain</span> <span class="operator">=</span> http</span><br><span class="line">        .authorizeHttpRequests(customizer -&gt; customizer)</span><br><span class="line">        .rememberMe(customizer -&gt; customizer.alwaysRemember(<span class="literal">true</span>).key(<span class="string">&quot;demo&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">rememberMeServices</span> <span class="operator">=</span> http.getSharedObject(RememberMeServices.class);</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;rememberMeServices&quot;</span>, rememberMeServices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;securityFilterChain&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RememberMeServices rememberMeServices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <code>RememberMeServices</code> instance is created in the configuration phase by Spring Security, and we save it into the IoC container, making it available in the <code>AuthController</code>. The <code>@DependsOn</code> annotation ensures that <code>RememberMeServices</code> is registered before the <code>AuthController</code> is created. Next, the <code>loginSuccess</code> method can be invoked like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CurrentUser <span class="title function_">login</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> LoginForm form, BindingResult bindingResult,</span></span><br><span class="line"><span class="params">                         HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">  request.login(form.getUsername(), form.getPassword());</span><br><span class="line">  <span class="type">var</span> <span class="variable">auth</span> <span class="operator">=</span> (Authentication) request.getUserPrincipal();</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) auth.getPrincipal();</span><br><span class="line">  rememberMeServices.loginSuccess(request, response, auth);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getId(), user.getNickname());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-persistence"><a href="#Session-persistence" class="headerlink" title="Session persistence"></a>Session persistence</h2><p>Login state and CSRF token are stored in HTTP Session, and by default Session data are kept in Java process memory, so when the server restarts or there‚Äôre multiple backends, users may need to login several times. The solution is simple, use Spring Session to store data in a third-party persistent storage. Take Redis for an example.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Due to Spring Boot‚Äôs auto-configuration feature, adding the dependencies will suffice to use Redis as the Session storage. To specify the Redis instance in production, add the following configs in <code>application.properties</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><p>The demo project can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/api-auth">GitHub</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.spring.io/spring-security/reference/index.html">https://docs.spring.io/spring-security/reference/index.html</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.security">https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.security</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-web-security">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-web-security</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;When it comes to implementing user authentication in RESTful API server, there‚Äôre several options like &lt;a href=&quot;https://spring.io/projects/spring-security&quot;&gt;Spring Security&lt;/a&gt;, &lt;a href=&quot;https://shiro.apache.org/&quot;&gt;Apache Shiro&lt;/a&gt;, or writing our own version of Filters and Servlets. If the server already uses &lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt;, then Spring Security is really a good fit, for it integrates quite well with Spring Boot project, thanks to all those automatic configurations. However, Spring Security‚Äôs login facility is originally built for web forms or basic HTTP authentication, while modern apps usually lean on RESTful API. We can either adapt the frontend client to utilizing the built-in login methods as in this tutorial &lt;a href=&quot;https://spring.io/guides/tutorials/spring-security-and-angular-js/&quot;&gt;Spring Security and Angular JS&lt;/a&gt;, or write custom Filter to &lt;a href=&quot;https://ckinan.com/blog/spring-security-credentials-from-json-request/&quot;&gt;extract user credentials from input JSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/spring-security.png&quot; alt=&quot;Spring Security&quot;&gt;&lt;/p&gt;
&lt;p&gt;Having said that, personally I still prefer to maintain a consistent API style in user authentication, and I don‚Äôt want to write awkward logics with raw Servlet request&amp;#x2F;response objects in Filter, instead of using what Spring MVC provides, i.e. &lt;code&gt;@RestController&lt;/code&gt;, &lt;code&gt;@RequestBody&lt;/code&gt;, form validation, etc. Luckily, Spring Security provides integration for Servlet API, so that we can login&amp;#x2F;logout user within the Controller. In this article, I will demonstrate how to use Spring Security to guard your RESTful API server, with the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login&amp;#x2F;logout with JSON API.&lt;/li&gt;
&lt;li&gt;Return 401 for unauthenticated requests.&lt;/li&gt;
&lt;li&gt;Custom table for user data.&lt;/li&gt;
&lt;li&gt;CSRF protection.&lt;/li&gt;
&lt;li&gt;Remember me.&lt;/li&gt;
&lt;li&gt;Session persistence.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="restful" scheme="https://shzhangji.com/tags/restful/"/>
    
    <category term="spring boot" scheme="https://shzhangji.com/tags/spring-boot/"/>
    
    <category term="spring security" scheme="https://shzhangji.com/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>Mock API in Parcel Project</title>
    <link href="https://shzhangji.com/blog/2023/01/09/mock-api-in-parcel-project/"/>
    <id>https://shzhangji.com/blog/2023/01/09/mock-api-in-parcel-project/</id>
    <published>2023-01-09T06:53:40.000Z</published>
    <updated>2023-01-09T06:53:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>When developing a frontend application, usually we create mocks for backend API, so that after the API contract is settled down, front and backend engineers can work independently. There are several ways to accomplish this task, such as start a dedicated server and let the build tool serve as a proxy, or we can add middleware directly into the build tool‚Äôs dev server, if applicable. Some tools can monkey patch the network calls to replace the response with mock data, and various unit testing tools provide their own way of mocking. In this article, I will focus on how to add middleware into <a href="https://parceljs.org/">Parcel</a>‚Äòs dev server to respond with mock data for API calls.</p><p><img src="/images/parcel.png" alt="Parcel"></p><h2 id="API-Proxy-in-Parcel‚Äôs-development-server"><a href="#API-Proxy-in-Parcel‚Äôs-development-server" class="headerlink" title="API Proxy in Parcel‚Äôs development server"></a>API Proxy in Parcel‚Äôs development server</h2><p>Parcel provides a dev server and supports <a href="https://parceljs.org/features/development/#api-proxy">API proxy</a> out of the box. Under the hood, it uses <a href="https://github.com/senchalabs/connect">connect</a> and <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> to redirect API calls to a different server. It also provides the ability to customize the proxy behavior. For instance, by creating a file named <code>.proxyrc.js</code> in project‚Äôs root, we can manually redirect all API calls to a mock server listening on <code>localhost:8080</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  app.<span class="title function_">use</span>(proxy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to serve API calls directly in Parcel‚Äôs dev server, we just need to write our own middleware and wire it into the <code>connect</code> instance. Let‚Äôs name it <code>mock-middleware</code>, and it has the following functions:</p><ul><li>Read source files from the <code>/mock</code> folder, and serve API calls with mock data.</li><li>When the files are updated, refresh the APIs as well.</li></ul><span id="more"></span><h3 id="Define-mock-files"><a href="#Define-mock-files" class="headerlink" title="Define mock files"></a>Define mock files</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock/user.js</span></span><br><span class="line"><span class="keyword">const</span> sendJson = <span class="built_in">require</span>(<span class="string">&#x27;send-data/json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span></span><br><span class="line">  <span class="title function_">sendJson</span>(req, res, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;Jerry&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;POST /api/login&#x27;</span>: login,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mock API are simple functions that accept standard Node.js request&#x2F;response objects as parameters and receive and send data via them. The function is associated with a route string that will be used to match the incoming requests. To ease the processing of request and response data, we use <a href="https://github.com/expressjs/body-parser">body-parser</a> to parse incoming JSON string into <code>req.body</code> object, and use <a href="https://github.com/Raynos/send-data">send-data</a> utility to send out JSON response, that helps setup the <code>Content-Type</code> header for us. Since <code>body-parser</code> is a middleware, we need to wire it into the <code>connect</code> app, before the <code>mock-middleware</code> we are about to implement.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /.proxyrc.js</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; createMockMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mock-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title function_">createMockMiddleware</span>(<span class="string">&#x27;./mock&#x27;</span>)) <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Create-router"><a href="#Create-router" class="headerlink" title="Create router"></a>Create router</h3><p>To match the requests into different route functions, we use <a href="https://github.com/aaronblohowiak/routes.js">route.js</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create router and add rules.</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line">router.<span class="title function_">addRoute</span>(<span class="string">&#x27;POST /api/login&#x27;</span>, login)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use it in a connect app middleware.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line">  <span class="keyword">const</span> m = router.<span class="title function_">match</span>(req.<span class="property">method</span> + <span class="string">&#x27; &#x27;</span> + pathname)</span><br><span class="line">  <span class="keyword">if</span> (m) m.<span class="title function_">fn</span>(req, res, m.<span class="property">param</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(middleware)</span><br></pre></td></tr></table></figure><p><code>route.js</code> supports parameters in URL path, but for query string we need to parse them on our own.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// Access /user/get?id=1</span></span><br><span class="line">  <span class="string">&#x27;GET /:controller/:action&#x27;</span>: <span class="function">(<span class="params">req, res, params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; query &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line">    <span class="comment">// Prints &#123; controller: &#x27;user&#x27;, action: &#x27;get&#x27; &#125; &#123; id: &#x27;1&#x27; &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params, qs.<span class="title function_">parse</span>(query))</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Combined with <a href="https://github.com/isaacs/node-glob">glob</a>, we scan files under <code>/mock</code> folder and add all of them to the router.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glob.<span class="title function_">sync</span>(<span class="string">&#x27;./mock/**/*.js&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> routes = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(file))</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(routes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">path</span>) =&gt;</span> &#123;</span><br><span class="line">    router.<span class="title function_">addRoute</span>(path, routes[path])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Watch-and-reload"><a href="#Watch-and-reload" class="headerlink" title="Watch and reload"></a>Watch and reload</h3><p>The next feature we need to implement is watch file changes under <code>/mock</code> folder and reload them. The popular <a href="https://github.com/paulmillr/chokidar">chokidar</a> package does the watch for us, and to tell Node.js reload these files, we simply clear the <code>require</code> cache.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = chokidar.<span class="title function_">watch</span>(<span class="string">&#x27;./mock&#x27;</span>, &#123; <span class="attr">ignoreInitial</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> ptrn = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[/\\\\]mock[/\\\\]&#x27;</span>)</span><br><span class="line">watcher.<span class="title function_">on</span>(<span class="string">&#x27;all&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">require</span>.<span class="property">cache</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> ptrn.<span class="title function_">test</span>(id))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[id]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Rebuild the router.</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now that we have all the pieces we need to create the <code>mock-middleware</code>, we wrap them into a class and provide a <code>createMockMiddleware</code> function for it. The structure is borrowed from <a href="https://github.com/chimurai/http-proxy-middleware/blob/v2.0.6/src/http-proxy-middleware.ts#L11">HttpProxyMiddleware</a>. Full code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/parcel-mock">GitHub</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock-middleware/index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">mockPath</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mockPath</span> = mockPath</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createRouter</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupWatcher</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span> = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupWatcher</span>(<span class="params"></span>) &#123;</span><br><span class="line">    watcher.<span class="title function_">on</span>(<span class="string">&#x27;all&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">createRouter</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  middleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMockMiddleware</span>(<span class="params">mockPath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; middleware &#125; = <span class="keyword">new</span> <span class="title class_">MockMiddleware</span>(mockPath)</span><br><span class="line">  <span class="keyword">return</span> middleware</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  createMockMiddleware,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Standalone-mock-server"><a href="#Standalone-mock-server" class="headerlink" title="Standalone mock server"></a>Standalone mock server</h2><p>If you prefer setting up a dedicated server for mock API, either with <a href="https://github.com/expressjs/express">Express.js</a> or <a href="https://github.com/typicode/json-server">JSON Server</a>, it is easy to integrate with Parcel. Let‚Äôs create a simple Express.js application first.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /mock-server/index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;Jerry&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mock server listening on port &#x27;</span> + server.<span class="title function_">address</span>().<span class="property">port</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To start the server while watching the file changes, use <a href="https://github.com/remy/nodemon">nodemon</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D nodemon</span><br><span class="line">yarn nodemon --watch mock-server mock-server/index.js</span><br></pre></td></tr></table></figure><p>Now configure Parcel to redirect API calls to the mock server.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /.proxyrc.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Use <a href="https://github.com/open-cli-tools/concurrently">concurrently</a> to start up Parcel <em>and</em> mock server at the same time. In fact, it is more convenient to create a npm script for that. Add the following to <code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;concurrently yarn:dev yarn:mock&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parcel&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --watch mock-server mock-server/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://codeburst.io/dont-use-nodemon-there-are-better-ways-fc016b50b45e">https://codeburst.io/dont-use-nodemon-there-are-better-ways-fc016b50b45e</a></li><li><a href="https://github.com/Raynos/http-framework/wiki/Modules">https://github.com/Raynos/http-framework/wiki/Modules</a></li><li><a href="https://github.com/aaronblohowiak/routes.js#http-method-example">https://github.com/aaronblohowiak/routes.js#http-method-example</a></li><li><a href="https://mswjs.io/docs/comparison">https://mswjs.io/docs/comparison</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;When developing a frontend application, usually we create mocks for backend API, so that after the API contract is settled down, front and backend engineers can work independently. There are several ways to accomplish this task, such as start a dedicated server and let the build tool serve as a proxy, or we can add middleware directly into the build tool‚Äôs dev server, if applicable. Some tools can monkey patch the network calls to replace the response with mock data, and various unit testing tools provide their own way of mocking. In this article, I will focus on how to add middleware into &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;‚Äòs dev server to respond with mock data for API calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/parcel.png&quot; alt=&quot;Parcel&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-Proxy-in-Parcel‚Äôs-development-server&quot;&gt;&lt;a href=&quot;#API-Proxy-in-Parcel‚Äôs-development-server&quot; class=&quot;headerlink&quot; title=&quot;API Proxy in Parcel‚Äôs development server&quot;&gt;&lt;/a&gt;API Proxy in Parcel‚Äôs development server&lt;/h2&gt;&lt;p&gt;Parcel provides a dev server and supports &lt;a href=&quot;https://parceljs.org/features/development/#api-proxy&quot;&gt;API proxy&lt;/a&gt; out of the box. Under the hood, it uses &lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;connect&lt;/a&gt; and &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; to redirect API calls to a different server. It also provides the ability to customize the proxy behavior. For instance, by creating a file named &lt;code&gt;.proxyrc.js&lt;/code&gt; in project‚Äôs root, we can manually redirect all API calls to a mock server listening on &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; createProxyMiddleware &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http-proxy-middleware&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;app&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; proxy = &lt;span class=&quot;title function_&quot;&gt;createProxyMiddleware&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:8080/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  app.&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(proxy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In order to serve API calls directly in Parcel‚Äôs dev server, we just need to write our own middleware and wire it into the &lt;code&gt;connect&lt;/code&gt; instance. Let‚Äôs name it &lt;code&gt;mock-middleware&lt;/code&gt;, and it has the following functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read source files from the &lt;code&gt;/mock&lt;/code&gt; folder, and serve API calls with mock data.&lt;/li&gt;
&lt;li&gt;When the files are updated, refresh the APIs as well.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="parcel" scheme="https://shzhangji.com/tags/parcel/"/>
    
    <category term="connect" scheme="https://shzhangji.com/tags/connect/"/>
    
  </entry>
  
  <entry>
    <title>Configure Git Line Endings Across OSes</title>
    <link href="https://shzhangji.com/blog/2022/08/31/configure-git-line-endings-across-oses/"/>
    <id>https://shzhangji.com/blog/2022/08/31/configure-git-line-endings-across-oses/</id>
    <published>2022-08-31T07:23:43.000Z</published>
    <updated>2022-08-31T07:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Linux, lines end with LF (Line Feed, <code>\n</code>), while in Windows, CRLF (Carriage Return + Line Feed, <code>\r\n</code>). When developers using different operating systems contribute to the same Git project, line endings must be handled correctly, or <code>diff</code> and <code>merge</code> may break unexpectedly. Git provides several solutions to this problem, including configuration options and file attributes.</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><p>Set <code>core.autocrlf</code> to <code>input</code> in <strong>Windows</strong>. Leave Linux&#x2F;macOS unchanged.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h3 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach 2"></a>Approach 2</h3><p>Create <code>.gitattributes</code> under the project root, and add the following line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* text=auto eol=lf</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Use-consistent-line-endings"><a href="#Use-consistent-line-endings" class="headerlink" title="Use consistent line endings"></a>Use consistent line endings</h2><p>I suggest using LF in all OSes. Modern editors are capable of recoganizing and handling line endings across platforms. Even <a href="https://devblogs.microsoft.com/commandline/extended-eol-in-notepad/">Notepad in Windows 10</a> can display text files with LFs correctly. Usually we have an <a href="https://editorconfig.org/"><code>.editorconfig</code></a> file in the project, so that various editors with plugin installed will behave the same when handling line endings, as well as charset and indent.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">max_line_length = 100</span><br></pre></td></tr></table></figure><p>This consistency also lies in Git itself. When you enable Git to handle line endings for you, either by <code>core.autocrlf</code> or <code>.gitattributes</code>, Git always stores LFs in the repository.</p><h2 id="The-classic-core-autocrlf-option"><a href="#The-classic-core-autocrlf-option" class="headerlink" title="The classic core.autocrlf option"></a>The classic <code>core.autocrlf</code> option</h2><p><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreautocrlf"><code>core.autocrlf</code></a> has three options:</p><ul><li><code>false</code> The default value, meaning Git will not touch the files when checking in or out of the repository. Check-in means committing files to the repository; check-out means writing to the working directory.</li><li><code>true</code> Git will convert LF to CRLF when checking out of the repository, and convert them back to LF when checking in.</li><li><code>input</code> Git checks out the files <em>as-is</em>, and converts CRLF to LF when checking in.</li></ul><p>When <code>core.autocrlf</code> is set to <code>input</code>, Git will give you a warning when adding text files with CRLF endings:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: CRLF will be replaced by LF in test.txt.</span><br></pre></td></tr></table></figure><p>Only text files will be processed by Git, but sometimes Git may mistakenly treat binary files as text files and corrupt the data by replacing CRLF with LF. So Git provides a <code>core.safecrlf</code> option that checks if it can convert LF back to CRLF and produce the exact same file content. If it is not the case, Git rejects this operation with an error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: LF would be replaced by CRLF in test.bin</span><br></pre></td></tr></table></figure><p>This setting also causes problem when you have a mixture of LF and CRLF in one file, because Git will detect that it cannot reproduce the original file when checking out. In this case, line endings need to be fixed manually.</p><h2 id="Configure-end-of-line-in-Git-attributes"><a href="#Configure-end-of-line-in-Git-attributes" class="headerlink" title="Configure end-of-line in Git attributes"></a>Configure end-of-line in Git attributes</h2><p>There are two caveats in the <code>core.autocrlf</code> approach. First, it is a configuration that needs to be set manually by every developer, either globally or locally. Second, it may corrupt binary files. So newer version of Git provides the attribute mechanism, that saves configurations into a file named <code>.gitattributes</code>, and just like <code>.editorconfig</code>, this file should be checked into the repository so that all developers may share the same config. Git attributes also support path wildcards, so users can specify which files should be processed as text files. For instance:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Auto detect file types, if no further configs are given. Set end-of-line to LF.</span><br><span class="line">* text=auto eol=lf</span><br><span class="line"></span><br><span class="line"># Specify the following file types to be text, and do the CRLF/LF conversion.</span><br><span class="line">*.py text eol=lf</span><br><span class="line">*.ts text eol=lf</span><br><span class="line"></span><br><span class="line"># Leave the binary files as-is.</span><br><span class="line">*.png binary</span><br></pre></td></tr></table></figure><p><code>binary</code> is a macro for <code>-text -diff</code>, meaning Git will <em>not</em> process this file as text files or generate diffs in <code>git diff</code>. Git attributes take precedence over the <code>core.autocrlf</code> config, and will fall back to it when file does not match the wildcards.</p><p>Another related config is <code>core.eol</code>, which only takes effect if a file has the <code>text</code> attribute. Consider it as the default value for <code>eol</code> in <code>.gitattributes</code>, but obviouly it should not be used since it is also a config that needs to be set manually.</p><p>More details on Git attributes can be found in the <a href="https://git-scm.com/docs/gitattributes#_text">official document</a>.</p><h2 id="Renormalize-after-setting-up-end-of-line"><a href="#Renormalize-after-setting-up-end-of-line" class="headerlink" title="Renormalize after setting up end-of-line"></a>Renormalize after setting up end-of-line</h2><p>For existing projects, there is a command that normalizes line endings for all files.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add --renormalize .</span><br><span class="line">git commit -m &#x27;Normalize line endings.&#x27;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/a/2354278/1030720">https://stackoverflow.com/a/2354278/1030720</a></li><li><a href="https://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/">https://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/</a></li><li><a href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings">https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Linux, lines end with LF (Line Feed, &lt;code&gt;&#92;n&lt;/code&gt;), while in Windows, CRLF (Carriage Return + Line Feed, &lt;code&gt;&#92;r&#92;n&lt;/code&gt;). When developers using different operating systems contribute to the same Git project, line endings must be handled correctly, or &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt; may break unexpectedly. Git provides several solutions to this problem, including configuration options and file attributes.&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;h3 id=&quot;Approach-1&quot;&gt;&lt;a href=&quot;#Approach-1&quot; class=&quot;headerlink&quot; title=&quot;Approach 1&quot;&gt;&lt;/a&gt;Approach 1&lt;/h3&gt;&lt;p&gt;Set &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;input&lt;/code&gt; in &lt;strong&gt;Windows&lt;/strong&gt;. Leave Linux&amp;#x2F;macOS unchanged.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global core.autocrlf input&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Approach-2&quot;&gt;&lt;a href=&quot;#Approach-2&quot; class=&quot;headerlink&quot; title=&quot;Approach 2&quot;&gt;&lt;/a&gt;Approach 2&lt;/h3&gt;&lt;p&gt;Create &lt;code&gt;.gitattributes&lt;/code&gt; under the project root, and add the following line:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* text=auto eol=lf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="git" scheme="https://shzhangji.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Configure Logging for Flask SQLAlchemy Project</title>
    <link href="https://shzhangji.com/blog/2022/08/10/configure-logging-for-flask-sqlalchemy-project/"/>
    <id>https://shzhangji.com/blog/2022/08/10/configure-logging-for-flask-sqlalchemy-project/</id>
    <published>2022-08-10T02:56:07.000Z</published>
    <updated>2022-08-10T02:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Python, the built-in <a href="https://docs.python.org/3/library/logging.html"><code>logging</code></a> module is the standard way of doing application logs, and most third-party libraries integrate well with it. For instance, <a href="https://flask.palletsprojects.com/en/2.1.x/logging/">Flask</a> creates a default <code>app.logger</code> with a <code>StreamHandler</code> that writes to standard error. <a href="https://docs.sqlalchemy.org/en/14/core/engines.html#configuring-logging">SQLAlchemy</a> uses a logger named <code>sqlalchemy</code> and allow us to further customize its behaviour. This article shows how to configure logging for Flask and SQLAlchemy, both in debug mode and production mode.</p><h2 id="Default-logging-behaviour-of-Flask"><a href="#Default-logging-behaviour-of-Flask" class="headerlink" title="Default logging behaviour of Flask"></a>Default logging behaviour of Flask</h2><p>According to Flask document, when the <code>app.logger</code> property is accessed for the first time, it creates a logger with the name of the application, usually the module name you used in <code>app = Flask(__name__)</code>. The logging level is set to <code>DEBUG</code> if current application is in debug mode, or <code>NOTSET</code> and lets parent loggers decide the level. Then it checks if a log handler has already been added to the logger or any parent loggers, otherwise it adds a default one. The log format is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.Formatter(<span class="string">&quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&quot;</span>)</span><br></pre></td></tr></table></figure><p>In application, we can invoke the logging methods on <code>app.logger</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_logging <span class="keyword">import</span> app  <span class="comment"># flask_logging is the project name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Invoke in flask_logging.views.user module.</span></span><br><span class="line">app.logger.info(<span class="string">&#x27;Get user list&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The output is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-08 18:33:11,451] INFO in user: Get user list</span><br></pre></td></tr></table></figure><p>In production, the root logger is set to <code>WARNING</code> level by default, so only warning, error, and critical messages will be logged.</p><span id="more"></span><h2 id="Customize-application-logging"><a href="#Customize-application-logging" class="headerlink" title="Customize application logging"></a>Customize application logging</h2><p>There are several things we can improve in application logging:</p><ul><li>Use the full module name as the logger name, and print it in logs like <code>INFO in flask_logging.views.user</code>. This also allows us to configure logging for parent modules.</li><li>Change the log level to INFO in production, so that we may print some useful information for debugging.</li><li>Simplify the use of logger when applying the Flask <a href="https://flask.palletsprojects.com/en/2.1.x/patterns/appfactories/">Application Factories</a> pattern.</li></ul><p>In order to give the logger the full module name, we need to create it on our own. Then configuring level will be very easy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>() -&gt; Flask:</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    configure_logging(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_logging</span>(<span class="params">app: Flask</span>):</span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;[%(asctime)s] %(levelname)s %(name)s: %(message)s&#x27;</span>)</span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> app.debug:</span><br><span class="line">        logging.getLogger().setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><p>Here we use the Flask app factory pattern, and configure logging right after we create the app instance. This is necessary because once <code>app.logger</code> is accessed, default behaviour will be set up. The log format is similar to the default, except we use <code>%(name)s</code> instead of <code>%(module)s</code>. Then we set the root logger level to <code>INFO</code>, and if we are in debug mode, <code>DEBUG</code> level is used. Besides, <code>basicConfig</code> adds a default handler that logs into standard error. This is sufficient for applications running in containers.</p><p>To use logger in modules:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app, jsonify, Response</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@current_app.get(<span class="params"><span class="string">&#x27;/api/user/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_list</span>() -&gt; Response:</span><br><span class="line">    logger.info(<span class="string">&#x27;Get user list in view.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(users=[])</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-09 18:12:12,420] INFO flask_logging.views.user: Get user list in view.</span><br></pre></td></tr></table></figure><p>With app factory pattern, we need to replace <code>app.logger</code> with <code>current_app.logger</code>, and it is a little bit verbose. Dedicated logger for each module solves this problem, too.</p><h3 id="Fix-Werkzeug-logging"><a href="#Fix-Werkzeug-logging" class="headerlink" title="Fix Werkzeug logging"></a>Fix Werkzeug logging</h3><p>In debug mode, <a href="https://werkzeug.palletsprojects.com/">Werkzeug</a> will output access logs twice:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-09 18:17:28,530] INFO werkzeug:  * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"></span><br><span class="line">127.0.0.1 - - [09/Aug/2022 18:17:30] &quot;GET /api/user/list HTTP/1.1&quot; 200 -</span><br><span class="line">[2022-08-09 18:17:30,355] INFO werkzeug: 127.0.0.1 - - [09/Aug/2022 18:17:30] &quot;GET /api/user/list HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure><p>To fix it, we remove the extra handler under <code>werkzeug</code> logger:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    <span class="comment"># Fix werkzeug handler in debug mode</span></span><br><span class="line">    logging.getLogger(<span class="string">&#x27;werkzeug&#x27;</span>).handlers = []</span><br></pre></td></tr></table></figure><p>In production mode, the access log is controlled by WSGI server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b 127.0.0.1:5000 --access-logfile - &#x27;flask_logging:create_app()&#x27;</span><br></pre></td></tr></table></figure><h2 id="Log-SQLAlchemy-queries-in-debug-mode"><a href="#Log-SQLAlchemy-queries-in-debug-mode" class="headerlink" title="Log SQLAlchemy queries in debug mode"></a>Log SQLAlchemy queries in debug mode</h2><p>To log queries, SQLAlchemy gives us two options: create engine with <code>echo=True</code>, or configure the logger ourselves. Only use one approach or you will get duplicate logs. For <a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/">Flask-SQLAlchemy</a> users, use the following config:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_ECHO = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>I prefer using the standard logging module. All SQLAlchemy loggers are under the name <code>sqlalchemy</code>, and they are by default in <code>WARNING</code> level. To enable query logs, change the level of <code>sqlalchemy.engine</code> logger to <code>INFO</code>. If you also want to get the query result printed, set to <code>DEBUG</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    <span class="comment"># Make sure engine.echo is set to False</span></span><br><span class="line">    logging.getLogger(<span class="string">&#x27;sqlalchemy.engine&#x27;</span>).setLevel(logging.INFO)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[2022-08-10 10:41:57,089] INFO sqlalchemy.engine.Engine: BEGIN (implicit)</span><br><span class="line">[2022-08-10 10:41:57,090] INFO sqlalchemy.engine.Engine: SELECT user.id AS user_id, user.username AS user_username FROM user</span><br><span class="line">[2022-08-10 10:41:57,090] INFO sqlalchemy.engine.Engine: [generated in 0.00015s] &#123;&#125;</span><br><span class="line">[2022-08-10 10:41:57,091] INFO sqlalchemy.engine.Engine: ROLLBACK</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Flask‚Äôs built-in <code>app.logger</code> is easy to use. But instead, we create our own loggers to fine-tune the configs, with Python standard logging module. It is also true for SQLAlchemy logs. The loggers are well defined in <code>sqlalchemy.engine</code>, <code>sqlalchemy.orm</code>, etc., so that we can change the configs easily. Demo code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/flask-logging">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Python, the built-in &lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module is the standard way of doing application logs, and most third-party libraries integrate well with it. For instance, &lt;a href=&quot;https://flask.palletsprojects.com/en/2.1.x/logging/&quot;&gt;Flask&lt;/a&gt; creates a default &lt;code&gt;app.logger&lt;/code&gt; with a &lt;code&gt;StreamHandler&lt;/code&gt; that writes to standard error. &lt;a href=&quot;https://docs.sqlalchemy.org/en/14/core/engines.html#configuring-logging&quot;&gt;SQLAlchemy&lt;/a&gt; uses a logger named &lt;code&gt;sqlalchemy&lt;/code&gt; and allow us to further customize its behaviour. This article shows how to configure logging for Flask and SQLAlchemy, both in debug mode and production mode.&lt;/p&gt;
&lt;h2 id=&quot;Default-logging-behaviour-of-Flask&quot;&gt;&lt;a href=&quot;#Default-logging-behaviour-of-Flask&quot; class=&quot;headerlink&quot; title=&quot;Default logging behaviour of Flask&quot;&gt;&lt;/a&gt;Default logging behaviour of Flask&lt;/h2&gt;&lt;p&gt;According to Flask document, when the &lt;code&gt;app.logger&lt;/code&gt; property is accessed for the first time, it creates a logger with the name of the application, usually the module name you used in &lt;code&gt;app = Flask(__name__)&lt;/code&gt;. The logging level is set to &lt;code&gt;DEBUG&lt;/code&gt; if current application is in debug mode, or &lt;code&gt;NOTSET&lt;/code&gt; and lets parent loggers decide the level. Then it checks if a log handler has already been added to the logger or any parent loggers, otherwise it adds a default one. The log format is as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logging.Formatter(&lt;span class=&quot;string&quot;&gt;&amp;quot;[%(asctime)s] %(levelname)s in %(module)s: %(message)s&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In application, we can invoke the logging methods on &lt;code&gt;app.logger&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask_logging &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; app  &lt;span class=&quot;comment&quot;&gt;# flask_logging is the project name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Invoke in flask_logging.views.user module.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.logger.info(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Get user list&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The output is:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2022-08-08 18:33:11,451] INFO in user: Get user list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In production, the root logger is set to &lt;code&gt;WARNING&lt;/code&gt; level by default, so only warning, error, and critical messages will be logged.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="sqlalchemy" scheme="https://shzhangji.com/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>Use Composition API and Pinia in Vue 2 Project</title>
    <link href="https://shzhangji.com/blog/2022/07/31/use-composition-api-and-pinia-in-vue-2-project/"/>
    <id>https://shzhangji.com/blog/2022/07/31/use-composition-api-and-pinia-in-vue-2-project/</id>
    <published>2022-07-31T06:07:27.000Z</published>
    <updated>2022-07-31T06:07:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Composition API is one of the major features of Vue 3, and it greatly changes how we organize code. Vue 3 also introduces Pinia as the recommended state management library, superceding Vuex that now enters maintenance mode. It would be nice if we can use these cool features in Vue 2 project, since migration of legacy project could be difficult and costly. Fortunately, the community has tried hard to bring Vue 3 features back to Vue 2, like <a href="https://github.com/vuejs/composition-api"><code>@vue/composition-api</code></a>, <a href="https://github.com/antfu/unplugin-vue2-script-setup"><code>unplugin-vue2-script-setup</code></a> and <a href="https://github.com/vueuse/vue-demi"><code>vue-demi</code></a>. Recently, <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html">Vue 2.7</a> is released and backports features like Composition API, <code>&lt;script setup&gt;</code>, <code>defineComponent</code>, etc. This article will show you how to change your code from Options API to Composition API, from Vuex to Pinia.</p><h2 id="Why-Composition-API"><a href="#Why-Composition-API" class="headerlink" title="Why Composition API"></a>Why Composition API</h2><p>The main advantage of Composition API is that you can organize your code in a more flexible way. Previously with Options API, we can only group codes by <code>data</code>, <code>methods</code>, and hooks, while with Composition API, codes constituting one feature can be put together. There is a nice figure in the official document <em><a href="https://vuejs.org/guide/extras/composition-api-faq.html">Composition API FAQ</a></em> that illustrates how code blocks look differently after applying Composition API.</p><p><img src="/images/typescript/composition-api-after.png" alt="Options API vs. Composition API"></p><span id="more"></span><p>Another important advantage is better type inference. With Vue 2, TypeScript has a difficulty in inferring types from Options API, so we have to use <code>Vue.extend</code> or <a href="https://github.com/vuejs/vue-class-component">class-based components</a>. Though Vue 2.7 backports <code>defineComponent</code> that improves this situation, Composition API still provides a more natural and concise way to define types, for it only consists of plain variables and functions. So in this article, I will use TypeScript as the demo language. If your legacy project hasn‚Äôt adopted TypeScript yet, you can check out my previous post <em><a href="https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/">Add TypeScript Support to Vue 2 Project</a></em>.</p><p>For maintainers of larger projects, Composition API also brings better code reuse through custom composable functions, as well as smaller JS bundle and better performance. And last but not least, you can always use both APIs in one project. The Vue team has no plan to remove Options API.</p><h2 id="From-Options-API-to-Composition-API"><a href="#From-Options-API-to-Composition-API" class="headerlink" title="From Options API to Composition API"></a>From Options API to Composition API</h2><p>The transformation is not difficult, so long as you see the connection between these two APIs. Let‚Äôs start with a simple component:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Count: &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment()&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>There is a state, a lifecycle hook, and one method. The Composition API version is:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="comment">&lt;!-- Not changed --&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; count, increment &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>State becomes a <code>ref</code>; the <code>mounted</code> lifecycle hook becomes an <code>onMounted</code> function call; <code>increment</code> becomes a plain function. All logics go into the <code>setup</code> function of the component definition, and the returned variables can be used in template (<code>count</code>, <code>increment</code>). You may wonder if you can mix the Composition API with Options API in the same component. The answer is yes, but it is not a good practice, so do it judiciously.</p><p>To further simplify the definition, use the syntax sugar <code>&lt;script setup&gt;</code>, also available in Vue 2.7:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="More-on-states"><a href="#More-on-states" class="headerlink" title="More on states"></a>More on states</h2><p><code>ref</code> is used to define a single state variable, and we have to use <code>.value</code> to get and set its value. You can pass an object or array to <code>ref</code>, but it is not convenient to change only one member of the state, like changing a field value in a form. So <code>reactive</code> would be a better choice here.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;login()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123; ...form &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>reactive</code> looks much more like the <code>data</code> section in Options API. The difference is you can define multiple <code>ref</code> and <code>reactive</code>s in one component, place them nearer to where they are used. There are other topics on component state, like <code>computed</code> and <code>watch</code>, please take a look at the official document <a href="https://vuejs.org/api/reactivity-core.html"><em>Reactivity API: Core</em></a>.</p><h2 id="Define-component‚Äôs-props-and-emits"><a href="#Define-component‚Äôs-props-and-emits" class="headerlink" title="Define component‚Äôs props and emits"></a>Define component‚Äôs <code>props</code> and <code>emits</code></h2><p>Let‚Äôs wrap login form into a component, to see how <code>props</code> and <code>emits</code> are defined:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="comment">&lt;!-- Not changed --&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, defineProps, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> interface <span class="title class_">Props</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: string</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">password</span>: string</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = defineProps&lt;<span class="title class_">Props</span>&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;login&#x27;</span>, <span class="attr">form</span>: <span class="title class_">Props</span>): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="title function_">reactive</span>(&#123; ...props &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;login&#x27;</span>, &#123; ...form &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This component takes <code>props</code> as the initial values of form fields, and when the form is submitted, it emits the <code>login</code> event to parent component:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LoginForm</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;admin&quot;</span> @<span class="attr">login</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">LoginForm</span>, &#123; type <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./LoginForm.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">form: Props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(form)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see <code>props</code> and <code>emits</code> are both strongly typed, so TS will highlight any violation of the component interface.</p><p>Template refs are also supported in Composition API with TS. I wrote a post about wrapping Bootstrap 5 modal into a Vue component, with template ref and <code>v-model</code>. Please check out <a href="https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/"><em>Use Bootstrap V5 in Vue 3 Project</em></a>.</p><h2 id="From-Vuex-to-Pinia"><a href="#From-Vuex-to-Pinia" class="headerlink" title="From Vuex to Pinia"></a>From Vuex to Pinia</h2><p>State management library is often used when you want to share states between different components. Rather than <em>lifting the state up</em>, we use a dedicated global state store that results in cleaner code and good separation of concerns. A store is also used to interact with backend APIs, and it gives better integration with DevTools. In fact, using a state store has become a standard approach in frontend development.</p><p>In Vue 2, the default state management library is Vuex, and that is changing in Vue 3, because you can either use Reactivity API (<code>ref</code>, <code>reactive</code>, etc.) or Pinia to replace it with. I am not covering every aspect of Vuex or Pinia, just showing you how to convert a daily used Vuex store into new forms. Like this simple user store in Vuex 3.x:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> service <span class="keyword">from</span> <span class="string">&#x27;@/services/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = &#123;</span><br><span class="line">  <span class="attr">SAVE</span>: <span class="string">&#x27;save&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> service.<span class="title function_">login</span>(payload)</span><br><span class="line">      <span class="title function_">commit</span>(types.<span class="property">SAVE</span>, &#123;</span><br><span class="line">        <span class="attr">username</span>: response.<span class="property">data</span>.<span class="property">payload</span>.<span class="property">username</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    [types.<span class="property">SAVE</span>](state, payload) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(state, payload)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>login</code> method sends username and password to remote API and if login successfully, save the username to its state. Then the state can be shared among components like nav bar, a dropdown of user list, etc. The Pinia version removes the mutation part, thus making the store a little bit simpler:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> service <span class="keyword">from</span> <span class="string">&#x27;@/services/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">data: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> service.<span class="title function_">login</span>(data)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">username</span> = response.<span class="property">data</span>.<span class="property">payload</span>.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Removing mutation may be the biggest improvement. Pinia also has better type inference out of the box, while in Vuex we need to define complex wrappers around store. Both integrates well with Composition API, because Vuex 4.x is built for Vue 3.x. Detailed comparison can be found on Pinia‚Äôs <a href="https://pinia.vuejs.org/introduction.html#comparison-with-vuex-3-x-4-x">official document</a>. To use the store:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Username: &#123;&#123; store.username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/stores/user&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  store.<span class="title function_">login</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Composition API is one of the major features of Vue 3, and it greatly changes how we organize code. Vue 3 also introduces Pinia as the recommended state management library, superceding Vuex that now enters maintenance mode. It would be nice if we can use these cool features in Vue 2 project, since migration of legacy project could be difficult and costly. Fortunately, the community has tried hard to bring Vue 3 features back to Vue 2, like &lt;a href=&quot;https://github.com/vuejs/composition-api&quot;&gt;&lt;code&gt;@vue/composition-api&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/antfu/unplugin-vue2-script-setup&quot;&gt;&lt;code&gt;unplugin-vue2-script-setup&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/vueuse/vue-demi&quot;&gt;&lt;code&gt;vue-demi&lt;/code&gt;&lt;/a&gt;. Recently, &lt;a href=&quot;https://blog.vuejs.org/posts/vue-2-7-naruto.html&quot;&gt;Vue 2.7&lt;/a&gt; is released and backports features like Composition API, &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;, &lt;code&gt;defineComponent&lt;/code&gt;, etc. This article will show you how to change your code from Options API to Composition API, from Vuex to Pinia.&lt;/p&gt;
&lt;h2 id=&quot;Why-Composition-API&quot;&gt;&lt;a href=&quot;#Why-Composition-API&quot; class=&quot;headerlink&quot; title=&quot;Why Composition API&quot;&gt;&lt;/a&gt;Why Composition API&lt;/h2&gt;&lt;p&gt;The main advantage of Composition API is that you can organize your code in a more flexible way. Previously with Options API, we can only group codes by &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and hooks, while with Composition API, codes constituting one feature can be put together. There is a nice figure in the official document &lt;em&gt;&lt;a href=&quot;https://vuejs.org/guide/extras/composition-api-faq.html&quot;&gt;Composition API FAQ&lt;/a&gt;&lt;/em&gt; that illustrates how code blocks look differently after applying Composition API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/typescript/composition-api-after.png&quot; alt=&quot;Options API vs. Composition API&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
    <category term="pinia" scheme="https://shzhangji.com/tags/pinia/"/>
    
  </entry>
  
  <entry>
    <title>Add TypeScript Support to Vue 2 Project</title>
    <link href="https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/"/>
    <id>https://shzhangji.com/blog/2022/07/24/add-typescript-support-to-vue-2-project/</id>
    <published>2022-07-24T09:13:40.000Z</published>
    <updated>2022-07-24T09:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Now that TypeScript has become the de facto standard in frontend development, new projects and third-party libraries are mostly built on its ecosystem. For existing projects, TypeScript can also be applied gradually. Just add the toolchain, and start writing or rewriting part of your application. In this article, I will walk you through the steps of adding TypeScript to a Vue 2 project, since I myself is working on a legacy project, and TypeScript has brought a lot of benefits.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>For those who are new to TypeScript, I recommend you read the guide <em><a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">TypeScript for JavaScript Programmers</a></em>. In short, TypeScript is a superset of JavaScript. It adds type hints to variables, as well as other syntax like class, interface, decorator, and some of them are already merged into ECMAScript. When compiling, TypeScript can do static type check. It will try to infer the variable type as much as possible, or you need to define the type explicitly. Here is the official <a href="https://www.typescriptlang.org/cheatsheets">TypeScript Cheat Sheet</a>.</p><p><img src="/images/typescript/cheat-sheet-interface.png" alt="TypeScript Cheat Sheet - Interface"></p><span id="more"></span><p>You should also be familiar with <a href="https://v2.vuejs.org/v2/guide/typescript.html">Vue</a>, <a href="https://vue-loader.vuejs.org/guide/pre-processors.html#typescript">vue-loader</a>, and <a href="https://webpack.js.org/guides/typescript/">webpack</a>. Vue 2 already has good support for TypeScript, and the recently published <a href="https://blog.vuejs.org/posts/vue-2-7-naruto.html">Vue 2.7</a> backported a lot of useful features from Vue 3, like composition API, <code>&lt;script setup&gt;</code>, and <code>defineComponent</code>, further improving the developer experience of TypeScript in Vue.</p><p>Before you start, upgrade the existing tools to their latest version. <code>vue-loader</code> v15 is the <a href="https://github.com/vuejs/vue-loader/issues/1919">last version</a> that supports Vue 2. Consult the official documents if you encounter migration issues.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue@^2.7.8</span><br><span class="line">yarn add -D vue-template-compiler@^2.7.8 vue-loader@^15.10.0 webpack@^5.73.0</span><br></pre></td></tr></table></figure><h2 id="Install-TypeScript-and-ts-loader"><a href="#Install-TypeScript-and-ts-loader" class="headerlink" title="Install TypeScript and ts-loader"></a>Install TypeScript and <code>ts-loader</code></h2><p>First, add <code>typescript</code> and <code>ts-loader</code> as development dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D typescript ts-loader</span><br></pre></td></tr></table></figure><p>Add <code>ts-loader</code> to webpack config:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">          <span class="attr">transpileOnly</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now <code>.ts</code> files will go through <code>ts-loader</code> to get compiled. <code>vue-loader</code> will extract <code>&lt;script lang=&quot;ts&quot;&gt;</code> blocks from SFC (Single-File Components) and they also get compiled. The <code>resolve</code> and <code>appendTsSuffixTo</code> options allow TypeScript to import <code>.vue</code> files as modules. <code>transpileOnly</code> tells TypeScript compiler <em>not</em> to do type checks during compiling. This is for performance reasons, and we will cover it later.</p><p>A TypeScript project should have a <code>tsconfig.json</code> in the project root. A minimum example would be:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Options like <code>baseUrl</code> and <code>moduleResolution</code> tells TypeScript how to find and import a module. <code>allowJs</code> allows you to import JavaScript modules in <code>.ts</code> files. <code>skipLibCheck</code> tells TypeScript to ignore type errors in <code>node_modules</code> folder. <code>strict</code> turns on extra type checks, such as no implict <code>any</code> or <code>this</code>.</p><h2 id="Write-Vue-component-with-TypeScript"><a href="#Write-Vue-component-with-TypeScript" class="headerlink" title="Write Vue component with TypeScript"></a>Write Vue component with TypeScript</h2><p>In Vue 2.7, we can use <code>defineComponent</code> with Options API to get better type inference. The following example is taken directly from <a href="https://vuejs.org/guide/typescript/overview.html#definecomponent">Vue 3 document</a>. To enable type check in VS Code, install the <a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Volar</a> extension.</p><p><img src="/images/typescript/vue-component-in-vs-code.png" alt="Vue component in VS Code"></p><p>The <code>count</code> variable in template is correctly inferred as number type. We can add more type hints to component properties, emits, and event handlers. Please refer to the <a href="https://vuejs.org/guide/typescript/options-api.html">document</a> for further details.</p><p>Another example would be typing the API request and response data. Take Axios for an instance. This library is currently written in JavaScript, but comes with a <a href="https://github.com/axios/axios/blob/v0.27.2/index.d.ts">type declaration file</a> that adds type hints to the public API. We can combine it with our custom request&#x2F;response types.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LoginRequest</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LoginResponse</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data: LoginRequest</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> api.<span class="property">post</span>&lt;<span class="title class_">LoginResponse</span>&gt;(<span class="string">&#x27;/login&#x27;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke the API in an async function</span></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">login</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;Jerry&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">userId</span>)</span><br></pre></td></tr></table></figure><p>If you are using OpenAPI, you can generate typed clients from the specification file. I have written a blog on this topic: <em><a href="https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/">OpenAPI Workflow with Flask and TypeScript</a></em>.</p><p>We can also add delaration file to our legacy JavaScript modules. Say there is a <code>utils.js</code> module with some function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatBytes</span>(<span class="params">bytes</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (bytes &gt; <span class="number">1024</span>) <span class="keyword">return</span> (bytes / <span class="number">1024</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>) + <span class="string">&#x27;K&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">String</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a <code>utils.d.ts</code> file with the following content:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">formatBytes</span>(<span class="params">bytes: <span class="built_in">number</span></span>): <span class="built_in">string</span></span><br></pre></td></tr></table></figure><p>Now TypeScript will be able to analyze the code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; formatBytes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">formatBytes</span>(<span class="string">&#x27;256&#x27;</span>) <span class="comment">// Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h2 id="Check-types-during-development-and-build"><a href="#Check-types-during-development-and-build" class="headerlink" title="Check types during development and build"></a>Check types during development and build</h2><p>As mentioned above, the <code>transpileOnly</code> option tells <code>ts-loader</code> to skip type check so as to speed up the bundling process, but obviously drops the benifit of static typing. Though IDEs like VS Code + Volar will identify the problems during development, we still need to check types when someone is not using an IDE, or before a pull request is merged. For this purpose, we shall add other two tools:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D fork-ts-checker-webpack-plugin@^7.2.13 vue-tsc@^0.39.0</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/TypeStrong/fork-ts-checker-webpack-plugin">ForkTsCheckerWebpackPlugin</a>, as its name suggests, forks a separate process from webpack and do the heavy lifting type check.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpack 5.73.0 compiled successfully in 4177 ms</span><br><span class="line">Type-checking in progress...</span><br><span class="line">ERROR in ./src/services/user.ts:28:13</span><br><span class="line">TS2345: Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;number&#x27;.</span><br><span class="line">    26 | &#125;</span><br><span class="line">    27 |</span><br><span class="line">  &gt; 28 | formatBytes(&#x27;256&#x27;)</span><br><span class="line">       |             ^^^^^</span><br><span class="line">    29 |</span><br><span class="line"></span><br><span class="line">Found 1 error in 11671 ms.</span><br></pre></td></tr></table></figure><p>After <code>yarn start</code>, local dev server will be available in 4s, and type check takes 11s to finish. The error message will also be displayed on the web page.</p><p><img src="/images/typescript/fork-ts-checker-webpack-plugin.png" alt="ForkTsCheckerWebpackPlugin"></p><p>Add this plugin to webpack config, and turn on its support for Vue SFC.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ForkTsCheckerWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;fork-ts-checker-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ForkTsCheckerWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">typescript</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, this plugin only solves the problem during development, we still need a way to do type check before someone merges his code. The solution is to put <a href="https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc"><code>vue-tsc</code></a> in the lint phase of your project. <code>tsc</code> is the TypeScript Compiler, and <code>vue-tsc</code> is a wrapper of that to support compiling TS code block in SFC. Modify the <code>lint</code> script in your <code>package.json</code> and setup a proper CI pipeline.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .vue,.ts,.js . &amp;&amp; vue-tsc --noEmit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="More-on-code-style-and-linting"><a href="#More-on-code-style-and-linting" class="headerlink" title="More on code style and linting"></a>More on code style and linting</h2><p>We usually use <code>eslint</code> to enforce various rules of coding convention, and <code>prettier</code> for auto formatting. TypeScript also has dedicated lint rules and style guide. Install the necessary eslint plugins:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><p>To make it work with <a href="https://eslint.vuejs.org/user-guide/#how-to-use-a-custom-parser"><code>esling-plugin-vue</code></a>, use the following <code>.eslintrc.js</code> config:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Prettier also has built-in support for TypeScript. The <code>prettier</code> plugin in <code>extends</code> helps disabling some of the formatting rules. Here is an example of <code>.prettierrc.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ignore&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>And do not forget to add <a href="https://typicode.github.io/husky/#/?id=install"><code>husky</code></a> and <a href="https://github.com/okonet/lint-staged"><code>lint-staged</code></a> to your toolchain, that helps auto linting and formatting your code before it is committed.</p><h2 id="Appendix-TypeScript-transpilers"><a href="#Appendix-TypeScript-transpilers" class="headerlink" title="Appendix: TypeScript transpilers"></a>Appendix: TypeScript transpilers</h2><p><code>tsc</code> is the official compiler but it slows down the bundling. So we enable <code>transpileOnly</code> option in <code>ts-loader</code> and add <code>ForkTsCheckerWebpackPlugin</code> to tackle this problem. There are other transpilers that <em>understand</em> TypeScript syntax, like <a href="https://babeljs.io/docs/en/babel-preset-typescript"><code>@babel/preset-typescript</code></a>, <a href="https://esbuild.github.io/content-types/#typescript">esbuild</a>, and <a href="https://swc.rs/blog/swc-1#typescript-support">SWC</a>, but apparently none of them does type check so the checker plugin is still necessary.</p><p>Another note on <a href="https://typescript-eslint.io/docs/linting/typed-linting">TypeScript ESLint</a> project. It does have some <em>type-aware</em> linting rules, but they are rather strict and will cause a lot of warnings. Use it judiciously.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended-requiring-type-checking&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">project</span>: [<span class="string">&#x27;./tsconfig.json&#x27;</span>],</span><br><span class="line">    <span class="attr">extraFileExtensions</span>: [<span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some warnings on an existing project:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/morph-fe/src/App.vue</span><br><span class="line"> 6:7   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br><span class="line">10:9   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br><span class="line">10:18  error  Unsafe member access .get on an `any` value  @typescript-eslint/no-unsafe-member-access</span><br><span class="line">10:18  error  Unsafe call of an `any` typed value          @typescript-eslint/no-unsafe-call</span><br><span class="line">12:5   error  Unsafe assignment of an `any` value          @typescript-eslint/no-unsafe-assignment</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Now that TypeScript has become the de facto standard in frontend development, new projects and third-party libraries are mostly built on its ecosystem. For existing projects, TypeScript can also be applied gradually. Just add the toolchain, and start writing or rewriting part of your application. In this article, I will walk you through the steps of adding TypeScript to a Vue 2 project, since I myself is working on a legacy project, and TypeScript has brought a lot of benefits.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;For those who are new to TypeScript, I recommend you read the guide &lt;em&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html&quot;&gt;TypeScript for JavaScript Programmers&lt;/a&gt;&lt;/em&gt;. In short, TypeScript is a superset of JavaScript. It adds type hints to variables, as well as other syntax like class, interface, decorator, and some of them are already merged into ECMAScript. When compiling, TypeScript can do static type check. It will try to infer the variable type as much as possible, or you need to define the type explicitly. Here is the official &lt;a href=&quot;https://www.typescriptlang.org/cheatsheets&quot;&gt;TypeScript Cheat Sheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/typescript/cheat-sheet-interface.png&quot; alt=&quot;TypeScript Cheat Sheet - Interface&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="frontend" scheme="https://shzhangji.com/tags/frontend/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="eslint" scheme="https://shzhangji.com/tags/eslint/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
    <category term="webpack" scheme="https://shzhangji.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Manage Multiple CommandLineRunner in Spring Boot</title>
    <link href="https://shzhangji.com/blog/2022/07/16/manage-multiple-command-line-runner-in-spring-boot/"/>
    <id>https://shzhangji.com/blog/2022/07/16/manage-multiple-command-line-runner-in-spring-boot/</id>
    <published>2022-07-16T10:17:30.000Z</published>
    <updated>2022-07-16T10:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Spring Boot, the <a href="https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.spring-application.command-line-runner"><code>CommandLineRunner</code></a> and <code>ApplicationRunner</code> are two utility interfaces that we can use to execute code when application is started. However, all beans that implement these interfaces will be invoked by Spring Boot, and it takes some effort to execute only a portion of them. This is especially important when you are developing a console application with multiple entry points. In this article, we will use several techniques to achieve this goal.</p><h2 id="Put-CommandLineRunner-in-different-packages"><a href="#Put-CommandLineRunner-in-different-packages" class="headerlink" title="Put CommandLineRunner in different packages"></a>Put CommandLineRunner in different packages</h2><p>By default, <code>@SpringBootApplication</code> will scan components (or beans) in current and descendant packages. When multiple <code>CommandLineRunner</code>s are discovered, Spring will execute them all. So the first approach will be separating those runners into different packages.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shzhangji.package_a;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(JobA.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run package_a.JobA&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there is a <code>JobB</code> in <code>package_b</code>, these two jobs will not affect each other. But one problem is, when executing <code>JobA</code>, only components defined under <code>package_a</code> will be scanned. So if <code>JobA</code> wants to use a service in <code>com.shzhangji.common</code> package, we have to import this class explicitly:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shzhangji.package_a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shzhangji.common.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import(UserService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If there are multiple classes or packages that you want to import, you may as well change the base packages property:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;</span></span><br><span class="line"><span class="meta">    &quot;com.shzhangji.common&quot;,</span></span><br><span class="line"><span class="meta">    &quot;com.shzhangji.package_a&quot;,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobA</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Conditional-scanning-of-components"><a href="#Conditional-scanning-of-components" class="headerlink" title="Conditional scanning of components"></a>Conditional scanning of components</h2><p>So the basic idea is to expose only one <code>CommandLineRunner</code> to Spring‚Äôs component scanning mechanism. Luckily Spring Framework provides the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Conditional.html"><code>@Conditional</code></a> annotation that can be used to filter beans based on system property, profile, or more complex conditions. As a matter of fact, Spring Boot‚Äôs auto configuration feature is largely based on <code>@Conditional</code>. For instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="meta">@ConditionalOnClass(&#123; Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TomcatWebServerFactoryCustomizerConfiguration</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ConditionalOnClass(&#123; Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JettyWebServerFactoryCustomizerConfiguration</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When initializing the embedded web server, Spring will check if Tomcat or Jetty is on the classpath (<code>@ConditionalOnClass</code>), and create the corresponding beans. The configuration class itself is also conditionally processed in a web environment (<code>@ConditionalOnWebApplication</code>).</p><p>In our situation, we shall use the <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.html"><code>@ConditionalOnProperty</code></a> annotation, that filters beans based on system properties. Say we accept a property named <code>job</code>, and only create the <code>CommandLineRunner</code> bean when their values match.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;job&quot;, havingValue = &quot;JobConditionalProperty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConditionalProperty</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobConditionalProperty&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To run this example in IDEA, use the following configuration:</p><p><img src="/images/command-line/conditional-on-property.png" alt="IDEA Config - ConditionalOnProperty"></p><p>The <code>-Djob</code> in VM options and <code>--job</code> in program arguments are equivalent, so you only need to specify once. This property can also be set in a configuration file.</p><p>Similar to <code>@Conditional</code>, <a href="https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.profiles">Spring Profiles</a> can also be used to filter beans.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Profile(&quot;JobByProfile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobByProfile</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobByProfile&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can either activate the profile in command line arguments or environment variables.</p><p><img src="/images/command-line/profile.png" alt="IDEA Config - Profile"></p><h2 id="Write-a-JobDispatcher"><a href="#Write-a-JobDispatcher" class="headerlink" title="Write a JobDispatcher"></a>Write a JobDispatcher</h2><p>Lastly, we can always add a middle layer to solve the problem, i.e. a <code>JobDispatcher</code> that decides which <code>Runnable</code> to run. Only this time, we use the <code>ApplicationRunner</code> instead, because it will help us parsing the command line arguments.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobDispatcher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AutowireCapableBeanFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">jobArgs</span> <span class="operator">=</span> args.getOptionValues(<span class="string">&quot;job&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (jobArgs == <span class="literal">null</span> || jobArgs.size() != <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid argument --job&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">jobClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.shzhangji.demo.commandline.dispatcher.&quot;</span> + jobArgs.get(<span class="number">0</span>));</span><br><span class="line">    <span class="type">var</span> <span class="variable">job</span> <span class="operator">=</span> (Runnable) factory.createBean(jobClass);</span><br><span class="line">    job.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we pass <code>--job=JobDispatcherA</code> on the command line, the dispatcher will try to locate the job class, and initialize it with beans defined in context.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobDispatcherA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Run JobDispatcherA in application context &#123;&#125;&quot;</span>, context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/command-line">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In Spring Boot, the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.x/reference/htmlsingle/#features.spring-application.command-line-runner&quot;&gt;&lt;code&gt;CommandLineRunner&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;ApplicationRunner&lt;/code&gt; are two utility interfaces that we can use to execute code when application is started. However, all beans that implement these interfaces will be invoked by Spring Boot, and it takes some effort to execute only a portion of them. This is especially important when you are developing a console application with multiple entry points. In this article, we will use several techniques to achieve this goal.&lt;/p&gt;
&lt;h2 id=&quot;Put-CommandLineRunner-in-different-packages&quot;&gt;&lt;a href=&quot;#Put-CommandLineRunner-in-different-packages&quot; class=&quot;headerlink&quot; title=&quot;Put CommandLineRunner in different packages&quot;&gt;&lt;/a&gt;Put CommandLineRunner in different packages&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;@SpringBootApplication&lt;/code&gt; will scan components (or beans) in current and descendant packages. When multiple &lt;code&gt;CommandLineRunner&lt;/code&gt;s are discovered, Spring will execute them all. So the first approach will be separating those runners into different packages.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.shzhangji.package_a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SpringApplication.run(JobA.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.info(&lt;span class=&quot;string&quot;&gt;&amp;quot;Run package_a.JobA&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If there is a &lt;code&gt;JobB&lt;/code&gt; in &lt;code&gt;package_b&lt;/code&gt;, these two jobs will not affect each other. But one problem is, when executing &lt;code&gt;JobA&lt;/code&gt;, only components defined under &lt;code&gt;package_a&lt;/code&gt; will be scanned. So if &lt;code&gt;JobA&lt;/code&gt; wants to use a service in &lt;code&gt;com.shzhangji.common&lt;/code&gt; package, we have to import this class explicitly:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.shzhangji.package_a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.shzhangji.common.UserService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Import(UserService.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If there are multiple classes or packages that you want to import, you may as well change the base packages property:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication(scanBasePackages = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;quot;com.shzhangji.common&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;quot;com.shzhangji.package_a&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JobA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;CommandLineRunner&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="spring" scheme="https://shzhangji.com/tags/spring/"/>
    
    <category term="spring boot" scheme="https://shzhangji.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Store Custom Data in Spring MVC Request Context</title>
    <link href="https://shzhangji.com/blog/2022/07/05/store-custom-data-in-spring-mvc-request-context/"/>
    <id>https://shzhangji.com/blog/2022/07/05/store-custom-data-in-spring-mvc-request-context/</id>
    <published>2022-07-05T00:04:41.000Z</published>
    <updated>2022-07-05T00:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>When developing a web application with Spring MVC, you want to make some data available throughout the current request, like authentication information, request identifier, etc. These data are injected into a request-scoped context, and destroyed after the request ends. There are several ways to achieve that, and this article will demonstrate how.</p><h2 id="Use-HttpServletRequest-or-WebRequest"><a href="#Use-HttpServletRequest-or-WebRequest" class="headerlink" title="Use HttpServletRequest or WebRequest"></a>Use HttpServletRequest or WebRequest</h2><p>Controller methods can delare an <code>HttpServletRequest</code> typed argument. When it is invoked, Spring will pass in an instance that contains information specific to the current request, like path and headers. It also provides a pair of methods that gets and sets custom attributes. For instance, Spring itself uses it to store application context, locale and theme resolver.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ctx</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ctx);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can certainly use it to store our own data, like in a <code>Filter</code> that sets the user information.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Spring also provides the <code>WebRequest</code> interface that abstracts away Java servlet class. Under the hood, they store data in the same place.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/current-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentUser</span><span class="params">(WebRequest request)</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>, WebRequest.SCOPE_REQUEST);</span><br><span class="line">  <span class="keyword">return</span> user.getUsername();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpServletRequest</code> can also be injected as a dependency. For example in a service class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">getFromRequest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;Get from HttpServletRequest: &#123;&#125;&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may need some knowledge of <a href="https://projectlombok.org/">Project Lombok</a> to understand the code. In short, when Spring initializes this service bean, it passes in a <strong>proxy</strong> object of <code>HttpServletRequest</code>. When <code>getFromRequest</code> is invoked, the <code>request</code> variable within will point to the current servlet request instance.</p><p>As we can see, using <code>HttpServletRequest</code> is straightforward, but it has two disadvantages. First, it is not type safe, we need to cast the return value. Second, the service layer should not know of the HTTP request. The context information we pass to lower layers should be decoupled. These two problems can be solved by the next approach.</p><h2 id="Annotate-context-bean-with-RequestScope"><a href="#Annotate-context-bean-with-RequestScope" class="headerlink" title="Annotate context bean with @RequestScope"></a>Annotate context bean with @RequestScope</h2><p>The default Spring <a href="https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#beans-factory-scopes">bean scope</a> is <code>singleton</code>, and there are other scopes like <code>prototype</code>, <code>request</code>, and <code>session</code>. When marked with <code>@RequestScope</code>, a new instance will be created for every HTTP request, and get destroyed accordingly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequestScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomContext</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When injected as a dependency, Spring also wraps it with a proxy object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CustomContext context;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">getFromScoped</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Get from request-scoped context: &#123;&#125;&quot;</span>, context.getUser());</span><br><span class="line">    <span class="keyword">return</span> context.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the service has a typed context object, and it is not coupled with the HTTP layer.</p><h2 id="RequestContextHolder-static-method"><a href="#RequestContextHolder-static-method" class="headerlink" title="RequestContextHolder static method"></a>RequestContextHolder static method</h2><p>There is a utility class <code>RequestContextHolder</code> from which we can get the <code>currentRequestAttributes</code>, latter is an implementation of <code>RequestAttributes</code> interface with <code>getAttribute</code> and <code>setAttribute</code> methods. The difference is this interface can be used to extract request-scoped attributes (stored in <code>HttpServletRequest</code>) <em>and</em> session-scoped attributes (in <code>HttpSession</code>). The <code>WebRequest</code> instance is actually backed by <code>RequestAttributes</code>, so is the <code>@RequestScope</code> annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">getFromRequestContextHolder</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) RequestContextHolder.currentRequestAttributes()</span><br><span class="line">      .getAttribute(<span class="string">&quot;user&quot;</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">  log.info(<span class="string">&quot;Get from RequestContextHolder: &#123;&#125;&quot;</span>, user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since <code>RequestContextHolder</code> is used via static methods, it is necessary to tackle the multithreading problems. The answer is obvious: <code>ThreadLocal</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RequestContextHolder</span>  &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder =</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>&lt;&gt;(<span class="string">&quot;Request attributes&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> RequestAttributes <span class="title function_">getRequestAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> requestAttributesHolder.get();</span><br><span class="line">    <span class="keyword">return</span> attributes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This gives us an idea of implementing the fourth approach, i.e. write our own thread-local request context.</p><h2 id="Thread-local-request-context"><a href="#Thread-local-request-context" class="headerlink" title="Thread-local request context"></a>Thread-local request context</h2><p>Each servlet request is handled in a separate thread, so we can use a thread-local object to hold the request-scoped context.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomContextHolder</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;CustomContext&gt; holder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(CustomContext context)</span> &#123;</span><br><span class="line">    holder.set(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> CustomContext <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> holder.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    holder.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beware the thread that processes your request is borrowed from a thread pool, and you don‚Äôt want your previous request info leaking into the next, so let‚Äôs clean it up in the <code>Filter</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CustomContextHolder holder;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">threadLocalContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomContext</span>();</span><br><span class="line">    threadLocalContext.setUser(user);</span><br><span class="line">    holder.set(threadLocalContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      filterChain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      holder.remove();</span><br><span class="line">      log.info(<span class="string">&quot;Remove custom context from thread local.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Example code can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/request-context">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;When developing a web application with Spring MVC, you want to make some data available throughout the current request, like authentication information, request identifier, etc. These data are injected into a request-scoped context, and destroyed after the request ends. There are several ways to achieve that, and this article will demonstrate how.&lt;/p&gt;
&lt;h2 id=&quot;Use-HttpServletRequest-or-WebRequest&quot;&gt;&lt;a href=&quot;#Use-HttpServletRequest-or-WebRequest&quot; class=&quot;headerlink&quot; title=&quot;Use HttpServletRequest or WebRequest&quot;&gt;&lt;/a&gt;Use HttpServletRequest or WebRequest&lt;/h2&gt;&lt;p&gt;Controller methods can delare an &lt;code&gt;HttpServletRequest&lt;/code&gt; typed argument. When it is invoked, Spring will pass in an instance that contains information specific to the current request, like path and headers. It also provides a pair of methods that gets and sets custom attributes. For instance, Spring itself uses it to store application context, locale and theme resolver.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@GetMapping(&amp;quot;/info&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpServletRequest request)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; request.getAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String.valueOf(ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can certainly use it to store our own data, like in a &lt;code&gt;Filter&lt;/code&gt; that sets the user information.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;UserFilter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;OncePerRequestFilter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;doFilterInternal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; ServletException, IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.setAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Jerry&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filterChain.doFilter(request, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="spring" scheme="https://shzhangji.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Monitor Kubernetes Volume Storage</title>
    <link href="https://shzhangji.com/blog/2022/07/01/monitor-kubernetes-volume-storage/"/>
    <id>https://shzhangji.com/blog/2022/07/01/monitor-kubernetes-volume-storage/</id>
    <published>2022-07-01T00:21:39.000Z</published>
    <updated>2022-07-01T00:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pods running on Kubernetes may claim a Persistent Volume to store data that last between pod restarts. This volume is usually of limited size, so we need to monitor its storage and alert for low free space. For stateless pods, it is also necessary to monitor its disk usage, since the application within may write logs or other contents directly onto the Docker writable layer. In Kubernetes terms, this space is called ephemeral storage. Another way to prevent ephemeral storge from filling up is to monitor the nodes‚Äô disk space directly. This article will demonstrate how to monitor volume storage with Prometheus.</p><h2 id="Monitor-Persistent-Volume"><a href="#Monitor-Persistent-Volume" class="headerlink" title="Monitor Persistent Volume"></a>Monitor Persistent Volume</h2><p><code>kubelet</code> exposes the following metrics for Persistent Volumes:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://10.0.0.1:10255/metrics</span><br><span class="line"># HELP kubelet_volume_stats_capacity_bytes [ALPHA] Capacity in bytes of the volume</span><br><span class="line"># TYPE kubelet_volume_stats_capacity_bytes gauge</span><br><span class="line">kubelet_volume_stats_capacity_bytes&#123;namespace=&quot;airflow&quot;,persistentvolumeclaim=&quot;data-airflow2-postgresql-0&quot;&#125; 4.214145024e+10</span><br><span class="line">kubelet_volume_stats_capacity_bytes&#123;namespace=&quot;default&quot;,persistentvolumeclaim=&quot;grafana&quot;&#125; 2.1003583488e+10</span><br><span class="line"></span><br><span class="line"># HELP kubelet_volume_stats_used_bytes [ALPHA] Number of used bytes in the volume</span><br><span class="line"># TYPE kubelet_volume_stats_used_bytes gauge</span><br><span class="line">kubelet_volume_stats_used_bytes&#123;namespace=&quot;airflow&quot;,persistentvolumeclaim=&quot;data-airflow2-postgresql-0&quot;&#125; 4.086779904e+09</span><br><span class="line">kubelet_volume_stats_used_bytes&#123;namespace=&quot;default&quot;,persistentvolumeclaim=&quot;grafana&quot;&#125; 4.9381376e+07</span><br></pre></td></tr></table></figure><p>After you setup the <a href="https://github.com/prometheus-operator/kube-prometheus">Prometheus Stack</a> with <a href="https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack">Helm chart</a>, you will get a Service and ServiceMonitor that help scraping these metrics. Then they can be queried in Prometheus UI:</p><p><img src="/images/k8s-volume/prometheus-ui.png" alt="Prometheus UI"></p><span id="more"></span><p>And visualized with Grafana:</p><p><img src="/images/k8s-volume/grafana.png" alt="Grafana"></p><p>Here is a simple alert rule that warns on disk usage:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alert:</span> <span class="string">PrometheusPV</span></span><br><span class="line">  <span class="attr">expr:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    sum(kubelet_volume_stats_used_bytes&#123;persistentvolumeclaim=&quot;prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0&quot;&#125;)</span></span><br><span class="line"><span class="string">    / sum(kubelet_volume_stats_capacity_bytes&#123;persistentvolumeclaim=&quot;prometheus-prometheus-kube-prometheus-prometheus-db-prometheus-prometheus-kube-prometheus-prometheus-0&quot;&#125;)</span></span><br><span class="line"><span class="string">    &gt; 0.8</span></span><br><span class="line"><span class="string"></span>  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">severity:</span> <span class="string">critical</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Prometheus</span> <span class="string">PV</span> <span class="string">disk</span> <span class="string">usage</span> <span class="string">is</span> <span class="string">greater</span> <span class="string">than</span> <span class="number">80</span><span class="string">%.</span></span><br></pre></td></tr></table></figure><h2 id="Monitor-Ephemeral-Storage"><a href="#Monitor-Ephemeral-Storage" class="headerlink" title="Monitor Ephemeral Storage"></a>Monitor Ephemeral Storage</h2><p>According to <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-emphemeralstorage-consumption">Kubernetes documentation</a>, ephemeral storage consists of <code>emptyDir</code>, logs, and the above-mentioned <a href="https://docs.docker.com/storage/storagedriver/">writable container layer</a>. One can limit the use of ephemeral storage by configuring <code>resources</code> in container spec:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;4Gi&quot;</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ephemeral</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ephemeral</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>kubelet</code> integrates the <a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md">cAdvisor</a> (Container Advisor) utility, which exposes a series of container metrics:</p><table><thead><tr><th>Metric name</th><th>Type</th><th>Description</th><th>Unit</th></tr></thead><tbody><tr><td><strong>container_fs_usage_bytes</strong></td><td>Gauge</td><td>Number of bytes that are consumed by the container on this filesystem</td><td>bytes</td></tr><tr><td>container_memory_working_set_bytes</td><td>Gauge</td><td>Current working set</td><td>bytes</td></tr><tr><td>container_cpu_usage_seconds_total</td><td>Counter</td><td>Cumulative cpu time consumed</td><td>seconds</td></tr><tr><td>container_network_transmit_bytes_total</td><td>Counter</td><td>Cumulative count of bytes transmitted</td><td>bytes</td></tr></tbody></table><p>To get the <code>limits</code> we specified in pod spec, we need the help of <a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs"><code>kube-state-metrics</code></a> that exposes a metric named <code>kube_pod_container_resource_limits</code>:</p><table><thead><tr><th>Metric name</th><th>Value</th></tr></thead><tbody><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;‚Äùnginx-57bf55c5b5-n7vzp‚Äù, resource&#x3D;‚Äùmemory‚Äù, unit&#x3D;‚Äùbyte‚Äù}</td><td>67108864</td></tr><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;‚Äùnginx-57bf55c5b5-n7vzp‚Äù, resource&#x3D;‚Äùcpu‚Äù, unit&#x3D;‚Äùcore‚Äù}</td><td>0.1</td></tr><tr><td>kube_pod_container_resource_limits{exported_pod&#x3D;‚Äùnginx-57bf55c5b5-n7vzp‚Äù, resource&#x3D;‚Äùephemeral_storage‚Äù, unit&#x3D;‚Äùbyte‚Äù}</td><td>1073741824</td></tr></tbody></table><p>If a pod is using more disk space than expected, it is usually because of application logs. One can adjust the log level, mount a dedicated PV for logging, or clear log files periodically. To temporarily solve the alert, just restart the Deployment or StatefulSet.</p><h2 id="Monitor-Node-Disk-Space"><a href="#Monitor-Node-Disk-Space" class="headerlink" title="Monitor Node Disk Space"></a>Monitor Node Disk Space</h2><p>Though all cloud infrastructure providers have out-of-the-box warnings for virtual machines‚Äô disk space, we can still setup our own graphs and alerts. Prometheus has built-in <a href="https://github.com/prometheus/node_exporter"><code>node-exporter</code></a> metrics:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum(</span><br><span class="line">    max by (device) (</span><br><span class="line">        node_filesystem_size_bytes&#123;job=&quot;node-exporter&quot;, instance=&quot;10.0.0.1:9100&quot;, fstype!=&quot;&quot;&#125;</span><br><span class="line">    -</span><br><span class="line">        node_filesystem_avail_bytes&#123;job=&quot;node-exporter&quot;, instance=&quot;10.0.0.1:9100&quot;, fstype!=&quot;&quot;&#125;</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/k8s-volume/node-filesystem-size.png" alt="Node filesystem size"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pods running on Kubernetes may claim a Persistent Volume to store data that last between pod restarts. This volume is usually of limited size, so we need to monitor its storage and alert for low free space. For stateless pods, it is also necessary to monitor its disk usage, since the application within may write logs or other contents directly onto the Docker writable layer. In Kubernetes terms, this space is called ephemeral storage. Another way to prevent ephemeral storge from filling up is to monitor the nodes‚Äô disk space directly. This article will demonstrate how to monitor volume storage with Prometheus.&lt;/p&gt;
&lt;h2 id=&quot;Monitor-Persistent-Volume&quot;&gt;&lt;a href=&quot;#Monitor-Persistent-Volume&quot; class=&quot;headerlink&quot; title=&quot;Monitor Persistent Volume&quot;&gt;&lt;/a&gt;Monitor Persistent Volume&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kubelet&lt;/code&gt; exposes the following metrics for Persistent Volumes:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl http://10.0.0.1:10255/metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# HELP kubelet_volume_stats_capacity_bytes [ALPHA] Capacity in bytes of the volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# TYPE kubelet_volume_stats_capacity_bytes gauge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_capacity_bytes&amp;#123;namespace=&amp;quot;airflow&amp;quot;,persistentvolumeclaim=&amp;quot;data-airflow2-postgresql-0&amp;quot;&amp;#125; 4.214145024e+10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_capacity_bytes&amp;#123;namespace=&amp;quot;default&amp;quot;,persistentvolumeclaim=&amp;quot;grafana&amp;quot;&amp;#125; 2.1003583488e+10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# HELP kubelet_volume_stats_used_bytes [ALPHA] Number of used bytes in the volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# TYPE kubelet_volume_stats_used_bytes gauge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_used_bytes&amp;#123;namespace=&amp;quot;airflow&amp;quot;,persistentvolumeclaim=&amp;quot;data-airflow2-postgresql-0&amp;quot;&amp;#125; 4.086779904e+09&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubelet_volume_stats_used_bytes&amp;#123;namespace=&amp;quot;default&amp;quot;,persistentvolumeclaim=&amp;quot;grafana&amp;quot;&amp;#125; 4.9381376e+07&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;After you setup the &lt;a href=&quot;https://github.com/prometheus-operator/kube-prometheus&quot;&gt;Prometheus Stack&lt;/a&gt; with &lt;a href=&quot;https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack&quot;&gt;Helm chart&lt;/a&gt;, you will get a Service and ServiceMonitor that help scraping these metrics. Then they can be queried in Prometheus UI:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s-volume/prometheus-ui.png&quot; alt=&quot;Prometheus UI&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="kubernetes" scheme="https://shzhangji.com/tags/kubernetes/"/>
    
    <category term="prometheus" scheme="https://shzhangji.com/tags/prometheus/"/>
    
    <category term="devops" scheme="https://shzhangji.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Write Your Own Flask SQLAlchemy Extension</title>
    <link href="https://shzhangji.com/blog/2022/06/26/write-your-own-flask-sqlalchemy-extension/"/>
    <id>https://shzhangji.com/blog/2022/06/26/write-your-own-flask-sqlalchemy-extension/</id>
    <published>2022-06-26T04:53:16.000Z</published>
    <updated>2022-06-26T04:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to connecting to database in Flask project, we tend to use the <a href="https://flask-sqlalchemy.palletsprojects.com/">Flask-SQLAlchemy</a> extension that handles the lifecycle of database connection, add a certain of utilities for defining models and executing queries, and integrate well with the Flask framework. However, if you are developing a rather simple project with Flask and SQLAlchemy, and do not want to depend on another third-party library, or you prefer using SQLAlchemy directly, making the model layer agnostic of web frameworks, you can write your own extension. Besides, you will gain better type hints for SQLAlchemy model, and possibly easier migration to SQLAlchemy 2.x. This article will show you how to integrate SQLAlchemy 1.4 with Flask 2.1.</p><h2 id="The-alpha-version"><a href="#The-alpha-version" class="headerlink" title="The alpha version"></a>The alpha version</h2><p>In the official document <a href="https://flask.palletsprojects.com/en/2.1.x/extensiondev/">Flask Extension Development</a>, it shows us writing a sqlite3 extension that plays well with Flask application context. So our first try is to replace sqlite3 with SQLAlchemy:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</span><br><span class="line"><span class="keyword">from</span> flask.<span class="built_in">globals</span> <span class="keyword">import</span> _app_ctx_stack, _app_ctx_err_msg</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine <span class="keyword">import</span> Engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLAlchemyAlpha</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, app: <span class="type">Optional</span>[Flask] = <span class="literal">None</span></span>):</span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> app <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">        app.config.setdefault(<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>, <span class="string">&#x27;sqlite://&#x27;</span>)</span><br><span class="line">        app.teardown_appcontext(self.teardown)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>) -&gt; Engine:</span><br><span class="line">        <span class="keyword">return</span> create_engine(current_app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy&#x27;</span>):</span><br><span class="line">            ctx.sqlalchemy.dispose()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">engine</span>(<span class="params">self</span>) -&gt; Engine:</span><br><span class="line">        ctx = _app_ctx_stack.top</span><br><span class="line">        <span class="keyword">if</span> ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy&#x27;</span>):</span><br><span class="line">                ctx.sqlalchemy = self.connect()</span><br><span class="line">            <span class="keyword">return</span> ctx.sqlalchemy</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br></pre></td></tr></table></figure><span id="more"></span><p>Several notes on our alpha version. First, it plays well with the <a href="https://flask.palletsprojects.com/en/2.1.x/patterns/appfactories/">Application Factories</a>, that means the extension can be used to initialize multiple application instances, with different configurations for web server, testing, etc. The key point is to provide an <code>init_app</code> method for different apps, and use the <code>current_app</code> proxy during work. To initialize the app:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemyAlpha(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">db = SQLAlchemyAlpha()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>() -&gt; Flask:</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>Second, it plays well with <a href="https://flask.palletsprojects.com/en/2.1.x/appcontext/">The Application Context</a>, by storing data on current app context‚Äôs stack, instead of on the extension instance, i.e. <code>self.some_attr</code>. When the <code>engine</code> attribute is first accessed, the extension creates a SQLAlchemy engine with the current app‚Äôs config, and stores it on the current app context. When this context is popped, the engine object is also disposed, releasing the connection pool. Flask will automatically push and pop application context during request and command line interface. Here is an example of CLI:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_alpha</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test alpha extension.&quot;&quot;&quot;</span></span><br><span class="line">    user_count = db_alpha.engine.execute(<span class="string">&#x27;SELECT COUNT(*) FROM `user`&#x27;</span>).scalar_one()</span><br><span class="line">    app.logger.info(<span class="string">f&#x27;User count: <span class="subst">&#123;user_count&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Keep-engine-around"><a href="#Keep-engine-around" class="headerlink" title="Keep engine around"></a>Keep engine around</h2><p>The major problem of the alpha version is constantly creating and disposing SQLAlchemy engine objects. And we known <a href="https://docs.sqlalchemy.org/en/14/core/connections.html">Engine</a> is rather a heavy object to construct, and should be kept around throughout the lifespan of the application. There is an extension point of the Flask app instance, where we can store data for the entire app.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">    url = app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>]</span><br><span class="line">    app.extensions[<span class="string">&#x27;sqlalchemy&#x27;</span>] = create_engine(url)</span><br><span class="line">    app.teardown_appcontext(self.teardown)</span><br></pre></td></tr></table></figure><p>For working with SQLAlchemy, we often prefer using sessions, so in the extension we need to create a session for each request, and properly close it after the context is popped.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>) -&gt; Session:</span><br><span class="line">    <span class="keyword">return</span> Session(current_app.extensions[<span class="string">&#x27;sqlalchemy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy_session&#x27;</span>):</span><br><span class="line">        ctx.sqlalchemy_session.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">session</span>(<span class="params">self</span>) -&gt; Session:</span><br><span class="line">    ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> ctx <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(ctx, <span class="string">&#x27;sqlalchemy_session&#x27;</span>):</span><br><span class="line">        ctx.sqlalchemy_session = self.connect()</span><br><span class="line">    <span class="keyword">return</span> ctx.sqlalchemy_session</span><br></pre></td></tr></table></figure><p>You may wonder why we don‚Äôt use <a href="https://docs.sqlalchemy.org/en/14/orm/contextual.html"><code>scoped_session</code></a>, which is the recommended way to use sessions in a multi-thread environment. The answer is simple: an application context will not be shared by different workers, so it is safe to use the same session throughout the request. And, since session is a light-weight object, it is OK to create it on every request. Check Werkzeug <a href="https://werkzeug.palletsprojects.com/en/2.1.x/local/">Context Locals</a> for more information.</p><h2 id="Define-models-in-a-native-way"><a href="#Define-models-in-a-native-way" class="headerlink" title="Define models in a native way"></a>Define models in a native way</h2><p>Now that we have a simple but fully functional flask-sqlalchemy extension, we can start writing models in a native way.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String)</span><br></pre></td></tr></table></figure><p>There is no <code>db.Model</code> or <code>db.Integer</code>. The model base class need to be declared explicitly, as well as the table name of each model. Add a CLI that creates the tables:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_db</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Initialize database.&quot;&quot;&quot;</span></span><br><span class="line">    Base.metadata.create_all(db.session.get_bind())</span><br></pre></td></tr></table></figure><p>And execute query in a view:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/user/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_list</span>() -&gt; Response:</span><br><span class="line">    users: <span class="type">List</span>[User] = db.session.query(User).<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> jsonify(users=users)</span><br></pre></td></tr></table></figure><p>To enable type hints for SQLAlchemy models, install <code>sqlalchemy2-stubs</code> and enable the plugin in <code>mypy.ini</code>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mypy]</span></span><br><span class="line"><span class="attr">warn_unused_configs</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">plugins</span> = sqlalchemy.ext.mypy.plugin</span><br></pre></td></tr></table></figure><p>Now <code>user.id</code> will have the type <code>Column[Integer]</code>. This will continue to work in SQLAlchemy 2.x, except no extra dependency is needed. You may want to read the document <a href="https://docs.sqlalchemy.org/en/14/orm/extensions/mypy.html">Mypy Support for ORM Mappings</a>.</p><p>Source code in this article can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/native-sqlalchemy">GitHub</a>.</p><h2 id="Appendix-I-Serialize-SQLAlchemy-models-to-JSON"><a href="#Appendix-I-Serialize-SQLAlchemy-models-to-JSON" class="headerlink" title="Appendix I: Serialize SQLAlchemy models to JSON"></a>Appendix I: Serialize SQLAlchemy models to JSON</h2><p>Flask‚Äôs built-in JSON serializer does not recoganize SQLAlchemy models, neither the frequently used <code>Decimal</code> and <code>datetime</code> objects. But we can easily enhance it with a custom encoder:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.json <span class="keyword">import</span> JSONEncoder</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.row <span class="keyword">import</span> Row</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm.decl_api <span class="keyword">import</span> DeclarativeMeta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomEncoder</span>(<span class="title class_ inherited__">JSONEncoder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Decimal):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Row):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">dict</span>(obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj.__class__, DeclarativeMeta):</span><br><span class="line">            <span class="keyword">return</span> &#123;c.name: <span class="built_in">getattr</span>(obj, c.name) <span class="keyword">for</span> c <span class="keyword">in</span> obj.__table__.columns&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().default(obj)</span><br></pre></td></tr></table></figure><p><code>Row</code> is for core engine use case, and <code>DeclarativeMeta</code> for ORM. Add a line when creating the app:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.json_encoder = CustomEncoder</span><br></pre></td></tr></table></figure><h2 id="Appendix-II-Support-multiple-database-binds"><a href="#Appendix-II-Support-multiple-database-binds" class="headerlink" title="Appendix II: Support multiple database binds"></a>Appendix II: Support multiple database binds</h2><p>If you are interested in supporting multiple binds like Flask-SQLAlchemy does, here is a proof of concept. But for such complex scenario, I suggest use the opensource extension instead, for it is more mature, feature-complete, and fully tested.</p><p>This time we do not create engine on app startup. We create scoped sessions on demand.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; scoped_session:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;default&#x27;</span>:</span><br><span class="line">        url = current_app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = current_app.config[<span class="string">&#x27;SQLALCHEMY_BINDS&#x27;</span>][name]</span><br><span class="line"></span><br><span class="line">    engine = create_engine(url, echo=echo)</span><br><span class="line">    session_factory = sessionmaker(bind=engine)</span><br><span class="line">    <span class="keyword">return</span> scoped_session(session_factory)</span><br></pre></td></tr></table></figure><p>The configuration style mimics Flask-SQLAlchemy. This version of <code>connect</code> will return a properly configured <code>scoped_session</code> object, and it will be shared among different workers, so we store it in the app‚Äôs <code>extensions</code> dict.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Holder</span>:</span><br><span class="line">    sessions: <span class="type">Dict</span>[<span class="built_in">str</span>, scoped_session]</span><br><span class="line">    lock: Lock</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sessions = &#123;&#125;</span><br><span class="line">        self.lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SQLAlchemyMulti</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_app</span>(<span class="params">self, app: Flask</span>):</span><br><span class="line">        app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>] = Holder()</span><br><span class="line">        app.teardown_appcontext(self.teardown)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_session</span>(<span class="params">self, name: <span class="built_in">str</span> = <span class="string">&#x27;default&#x27;</span></span>) -&gt; Session:</span><br><span class="line">        holder: Holder = current_app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>]</span><br><span class="line">        <span class="keyword">with</span> holder.lock:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> holder.sessions:</span><br><span class="line">                holder.sessions[name] = self.connect(name)</span><br><span class="line">            <span class="keyword">return</span> holder.sessions[name]()</span><br></pre></td></tr></table></figure><p>Note the creation of the <code>scoped_session</code> object is not thread-safe, so we guard it with a lock. Again, this lock should not be stored as extension instance‚Äôs attribute, we create a <code>Holder</code> class to hold both the lock and scoped sessions.</p><p>Do not forget to do the cleanup work:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self, exception</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    holder: Holder = current_app.extensions[<span class="string">&#x27;sqlalchemy_multi&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> session <span class="keyword">in</span> holder.sessions.values():</span><br><span class="line">        session.remove()</span><br></pre></td></tr></table></figure><p><code>scoped_session.remove</code> will invoke <code>close</code> on the session and remove it from its registry. Next request will get a brand new session object.</p><p>We can verify if it uses the desired connection:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_db</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Access product database.&quot;&quot;&quot;</span></span><br><span class="line">    db_file = db_multi.get_session(<span class="string">&#x27;product_db&#x27;</span>).execute(</span><br><span class="line">        text(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT `file` FROM pragma_database_list</span></span><br><span class="line"><span class="string">        WHERE `name` = :name</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>),</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ).scalar()</span><br><span class="line">    app.logger.info(<span class="string">f&#x27;Database file: <span class="subst">&#123;db_file&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;When it comes to connecting to database in Flask project, we tend to use the &lt;a href=&quot;https://flask-sqlalchemy.palletsprojects.com/&quot;&gt;Flask-SQLAlchemy&lt;/a&gt; extension that handles the lifecycle of database connection, add a certain of utilities for defining models and executing queries, and integrate well with the Flask framework. However, if you are developing a rather simple project with Flask and SQLAlchemy, and do not want to depend on another third-party library, or you prefer using SQLAlchemy directly, making the model layer agnostic of web frameworks, you can write your own extension. Besides, you will gain better type hints for SQLAlchemy model, and possibly easier migration to SQLAlchemy 2.x. This article will show you how to integrate SQLAlchemy 1.4 with Flask 2.1.&lt;/p&gt;
&lt;h2 id=&quot;The-alpha-version&quot;&gt;&lt;a href=&quot;#The-alpha-version&quot; class=&quot;headerlink&quot; title=&quot;The alpha version&quot;&gt;&lt;/a&gt;The alpha version&lt;/h2&gt;&lt;p&gt;In the official document &lt;a href=&quot;https://flask.palletsprojects.com/en/2.1.x/extensiondev/&quot;&gt;Flask Extension Development&lt;/a&gt;, it shows us writing a sqlite3 extension that plays well with Flask application context. So our first try is to replace sqlite3 with SQLAlchemy:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask, current_app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask.&lt;span class=&quot;built_in&quot;&gt;globals&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; _app_ctx_stack, _app_ctx_err_msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; create_engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy.engine &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SQLAlchemyAlpha&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, app: &lt;span class=&quot;type&quot;&gt;Optional&lt;/span&gt;[Flask] = &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.app = app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; app &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.init_app(app)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;init_app&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, app: Flask&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app.config.setdefault(&lt;span class=&quot;string&quot;&gt;&amp;#x27;SQLALCHEMY_DATABASE_URI&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlite://&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app.teardown_appcontext(self.teardown)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;connect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;) -&amp;gt; Engine:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; create_engine(current_app.config[&lt;span class=&quot;string&quot;&gt;&amp;#x27;SQLALCHEMY_DATABASE_URI&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;teardown&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, exception&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx = _app_ctx_stack.top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(ctx, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlalchemy&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.sqlalchemy.dispose()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;engine&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;) -&amp;gt; Engine:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx = _app_ctx_stack.top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ctx &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(ctx, &lt;span class=&quot;string&quot;&gt;&amp;#x27;sqlalchemy&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ctx.sqlalchemy = self.connect()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctx.sqlalchemy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; RuntimeError(_app_ctx_err_msg)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="sqlalchemy" scheme="https://shzhangji.com/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPI Workflow with Flask and TypeScript</title>
    <link href="https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/"/>
    <id>https://shzhangji.com/blog/2022/06/19/openapi-workflow-with-flask-and-typescript/</id>
    <published>2022-06-19T06:48:27.000Z</published>
    <updated>2022-06-19T06:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.openapis.org/">OpenAPI</a> has become the de facto standard of designing web APIs, and there are numerous tools developed around its ecosystem. In this article, I will demonstrate the workflow of using OpenAPI in both backend and frontend projects.</p><p><img src="/images/openapi-workflow/openapi-3.0.png" alt="OpenAPI 3.0"></p><h2 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h2><p>There are <a href="https://swagger.io/blog/api-design/design-first-or-code-first-api-development/">code first and design first</a> approaches when using OpenAPI, and here we go with code first approach, i.e. writing the API server first, add specification to the method docs, then generate the final OpenAPI specification. The API server will be developed with Python <a href="https://flask.palletsprojects.com/">Flask</a> framework and <a href="https://apispec.readthedocs.io/">apispec</a> library with <a href="https://marshmallow.readthedocs.io/">marshmallow</a> extension. Let‚Äôs first install the dependencies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flask==2.1.2</span><br><span class="line">Flask-Cors==3.0.10</span><br><span class="line">Flask-SQLAlchemy==2.5.1</span><br><span class="line">SQLAlchemy==1.4.36</span><br><span class="line">python-dotenv==0.20.0</span><br><span class="line">apispec[marshmallow]==5.2.2</span><br><span class="line">apispec-webframeworks==0.5.2</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Get-post-list"><a href="#Get-post-list" class="headerlink" title="Get post list"></a>Get post list</h3><p>We will develop a simple blog post list page like this:</p><p><img src="/images/openapi-workflow/blog-post-list.png" alt="Blog post list"></p><p>The first API we implement is <code>get_post_list</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/post/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post_list</span>() -&gt; Response:</span><br><span class="line">    page = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">    sort = request.args.get(<span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    query = db.session.query(Post)</span><br><span class="line">    <span class="keyword">if</span> sort == <span class="string">&#x27;asc&#x27;</span>:</span><br><span class="line">        query = query.order_by(Post.updated_at.asc())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        query = query.order_by(Post.updated_at.desc())</span><br><span class="line"></span><br><span class="line">    query = query.offset((page - <span class="number">1</span>) * PAGE_SIZE).limit(PAGE_SIZE)</span><br><span class="line">    posts = query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> jsonify(posts=post_schema.dump(posts, many=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>It is a regular web API, that parses the GET parameters, construct a SQLAlchemy query with pagination, and return the post list. The only thing special here is <code>post_schema</code>, which uses the marshmallow library to serialize post items. The schema is defined as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span> = fields.Integer()</span><br><span class="line">    title = fields.String(required=<span class="literal">True</span>, validate=validate.Length(<span class="built_in">min</span>=<span class="number">1</span>))</span><br><span class="line">    content = fields.String(required=<span class="literal">True</span>, validate=validate.Length(<span class="built_in">min</span>=<span class="number">1</span>))</span><br><span class="line">    updated_at = fields.DateTime(<span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, dump_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">post_schema = PostSchema()</span><br></pre></td></tr></table></figure><p>The schema is not that different from the SQLAlchemy model, but with extra information about validation, format, and whether some field should be dumped to the output. We will see how to use the schema to deserialize and validate the form data, later in <code>save_post</code> API.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String)</span><br><span class="line">    content = db.Column(db.String)</span><br><span class="line">    updated_at = db.Column(db.DateTime)</span><br></pre></td></tr></table></figure><h3 id="Add-spec-to-docstring"><a href="#Add-spec-to-docstring" class="headerlink" title="Add spec to docstring"></a>Add spec to docstring</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/post/list&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post_list</span>() -&gt; Response:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">      summary: Get post list.</span></span><br><span class="line"><span class="string">      tags: [post]</span></span><br><span class="line"><span class="string">      x-swagger-router-controller: oasis.views</span></span><br><span class="line"><span class="string">      operationId: get_post_list</span></span><br><span class="line"><span class="string">      parameters:</span></span><br><span class="line"><span class="string">        - in: query</span></span><br><span class="line"><span class="string">          name: page</span></span><br><span class="line"><span class="string">          schema:</span></span><br><span class="line"><span class="string">            type: integer</span></span><br><span class="line"><span class="string">            minimum: 1</span></span><br><span class="line"><span class="string">        - in: query</span></span><br><span class="line"><span class="string">          name: sort</span></span><br><span class="line"><span class="string">          schema:</span></span><br><span class="line"><span class="string">            type: string</span></span><br><span class="line"><span class="string">            enum: [asc, desc]</span></span><br><span class="line"><span class="string">      responses:</span></span><br><span class="line"><span class="string">        &#x27;200&#x27;:</span></span><br><span class="line"><span class="string">          description: OK</span></span><br><span class="line"><span class="string">          content:</span></span><br><span class="line"><span class="string">            application/json:</span></span><br><span class="line"><span class="string">              schema:</span></span><br><span class="line"><span class="string">                type: object</span></span><br><span class="line"><span class="string">                properties:</span></span><br><span class="line"><span class="string">                  posts:</span></span><br><span class="line"><span class="string">                    type: array</span></span><br><span class="line"><span class="string">                    items:</span></span><br><span class="line"><span class="string">                      $ref: &#x27;#/components/schemas/Post&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>The YAML is exactly the same as OpenAPI specification states, except the apispec library will use the route and schema to generate the complete spec file.</p><h3 id="Generate-specification-file"><a href="#Generate-specification-file" class="headerlink" title="Generate specification file"></a>Generate specification file</h3><p>To wire these routes and schemas, we create an <code>openapi.py</code> file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apispec <span class="keyword">import</span> APISpec</span><br><span class="line"><span class="keyword">from</span> apispec.ext.marshmallow <span class="keyword">import</span> MarshmallowPlugin</span><br><span class="line"><span class="keyword">from</span> apispec_webframeworks.flask <span class="keyword">import</span> FlaskPlugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> oasis <span class="keyword">import</span> app, views, schemas</span><br><span class="line"></span><br><span class="line">spec = APISpec(</span><br><span class="line">    title=<span class="string">&#x27;Oasis&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.1.0&#x27;</span>,</span><br><span class="line">    openapi_version=<span class="string">&#x27;3.0.2&#x27;</span>,</span><br><span class="line">    info=&#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Demo project for OpenAPI workflow.&#x27;</span>&#125;,</span><br><span class="line">    plugins=[FlaskPlugin(), MarshmallowPlugin()],</span><br><span class="line">    servers=[&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span>&#125;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">spec.components.schema(<span class="string">&#x27;Post&#x27;</span>, schema=schemas.PostSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.test_request_context():</span><br><span class="line">    spec.path(view=views.get_post_list)</span><br></pre></td></tr></table></figure><p>And then a CLI command tool to generate the specification:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> oasis <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> oasis.openapi <span class="keyword">import</span> spec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate OpenAPI specification.&quot;&quot;&quot;</span></span><br><span class="line">    spec_path = Path(__file__).parent.joinpath(<span class="string">&#x27;../openapi.yaml&#x27;</span>).resolve()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(spec_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;# DO NOT EDIT\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;# Auto generated by &quot;flask gen&quot;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(spec.to_yaml())</span><br><span class="line"></span><br><span class="line">    app.logger.info(<span class="string">f&#x27;Generated <span class="subst">&#123;spec_path&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The output file <code>openapi.yaml</code> looks like this:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Demo</span> <span class="string">project</span> <span class="string">for</span> <span class="string">OpenAPI</span> <span class="string">workflow.</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Oasis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://127.0.0.1:5000</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/api/post/list:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">Get</span> <span class="string">post</span> <span class="string">list.</span></span><br><span class="line">      <span class="attr">x-swagger-router-controller:</span> <span class="string">oasis.views</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">get_post_list</span></span><br><span class="line">      <span class="attr">parameters:</span> [<span class="string">...</span>]</span><br><span class="line">      <span class="attr">responses:</span> &#123;<span class="string">...</span>&#125;</span><br><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">Post:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">id:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">        <span class="attr">title:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">updated_at:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">date-time</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">content</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">title</span></span><br></pre></td></tr></table></figure><h3 id="More-on-post-API"><a href="#More-on-post-API" class="headerlink" title="More on post API"></a>More on post API</h3><p>Let‚Äôs create another API that accepts form data, validate them, and save to database.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/api/post/save&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_post</span>() -&gt; Response:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">      summary: Save post.</span></span><br><span class="line"><span class="string">      tags: [post]</span></span><br><span class="line"><span class="string">      x-swagger-router-controller: oasis.views</span></span><br><span class="line"><span class="string">      operationId: save_post</span></span><br><span class="line"><span class="string">      requestBody:</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string">        content:</span></span><br><span class="line"><span class="string">          application/x-www-form-urlencoded:</span></span><br><span class="line"><span class="string">            schema:</span></span><br><span class="line"><span class="string">              $ref: &#x27;#/components/schemas/Post&#x27;</span></span><br><span class="line"><span class="string">      responses:</span></span><br><span class="line"><span class="string">        &#x27;200&#x27;:</span></span><br><span class="line"><span class="string">          description: OK</span></span><br><span class="line"><span class="string">          content:</span></span><br><span class="line"><span class="string">            application/json:</span></span><br><span class="line"><span class="string">              schema:</span></span><br><span class="line"><span class="string">                type: object</span></span><br><span class="line"><span class="string">                properties:</span></span><br><span class="line"><span class="string">                  id:</span></span><br><span class="line"><span class="string">                    type: integer</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post_form = post_schema.load(request.form)</span><br><span class="line">    <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> AppError(e.messages)</span><br><span class="line"></span><br><span class="line">    post = Post(**post_form)</span><br><span class="line">    post = db.session.merge(post)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure><p>We can write custom validation in the schema file. It is also a good way to separate concerns.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validates(<span class="params"><span class="string">&#x27;id&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_id</span>(<span class="params">self, value: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        post = db.session.query(Post).get(value)</span><br><span class="line">        <span class="keyword">if</span> post <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Post ID not found.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Preview-API-docs"><a href="#Preview-API-docs" class="headerlink" title="Preview API docs"></a>Preview API docs</h3><p>OpenAPI enjoys a nice documentation UI that you can preview in VS Code. Install the OpenAPI (Swagger) Editor extension, and turn on the preview alongside <code>openapi.yaml</code>:</p><p><img src="/images/openapi-workflow/vscode-openapi.png" alt="VS Code OpenAPI"></p><p>If you want to run <em>Try it out</em>, make sure you enable the CORS of the API server. For Flask, there is an extension for this task:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> app.debug:</span><br><span class="line">    CORS(app)</span><br></pre></td></tr></table></figure><h2 id="API-Client"><a href="#API-Client" class="headerlink" title="API Client"></a>API Client</h2><p>Now we have a complete OpenAPI specification file, we can generate all forms of clients and stubs from it. Here we use the <a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI Generator</a> to create a TypeScript-Fetch client, and use it in a Vue project.</p><h3 id="Generate-client-codes"><a href="#Generate-client-codes" class="headerlink" title="Generate client codes"></a>Generate client codes</h3><p>First add the development tool via package manager like <code>yarn</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @openapitools/openapi-generator-cli</span><br></pre></td></tr></table></figure><p>And create a configuration file <code>openapitools.json</code> for OpenAPI generator:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/@openapitools/openapi-generator-cli/config.schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spaces&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;generator-cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;downloadUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://maven.aliyun.com/nexus/content/groups/public/$&#123;groupId&#125;/$&#123;artifactId&#125;/$&#123;versionName&#125;/$&#123;artifactId&#125;-$&#123;versionName&#125;.jar&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;generators&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;v1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;inputSpec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../openapi-server/openapi.yaml&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;generatorName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typescript-fetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/openapi&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>downloadUrl</code> can be used when you have trouble reaching the Maven central. <code>generators</code> section indicates the path of <code>openapi.yaml</code>, which generator we use, and the output path. For convenience, we create a script in <code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openapi-generator-cli generate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>After running <code>yarn gen</code>, we get a fully functional client in <code>src/openapi</code> folder.</p><h3 id="Use-the-generated-client"><a href="#Use-the-generated-client" class="headerlink" title="Use the generated client"></a>Use the generated client</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PostApi</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postApi = <span class="keyword">new</span> <span class="title class_">PostApi</span>()</span><br><span class="line">postApi.<span class="title function_">getPostList</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">posts</span>) &#125;)</span><br></pre></td></tr></table></figure><p>Note the base path of the API request is <code>http://127.0.0.1:5000</code>, as we defined in <code>openapi.py</code>, which should be overridden in production. Since typically the frontend code and API server are deployed under the same domain, we can set the base path to an empty string. Create an <code>api.ts</code> file:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Configuration</span>, <span class="title class_">PostApi</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> conf = <span class="keyword">new</span> <span class="title class_">Configuration</span>(&#123;</span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postApi = <span class="keyword">new</span> <span class="title class_">PostApi</span>(conf)</span><br></pre></td></tr></table></figure><p>And use it in your web application:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; postApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"></span><br><span class="line">postApi.<span class="title function_">getPostList</span>()</span><br></pre></td></tr></table></figure><h3 id="Display-post-list"><a href="#Display-post-list" class="headerlink" title="Display post list"></a>Display post list</h3><p>Let‚Äôs request for the posts when page is loaded, and display them via Vue and Bootstrap:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; postApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> type &#123; <span class="title class_">Post</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./openapi&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> posts = ref&lt;<span class="title class_">Post</span>[]&gt;([])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  postApi.<span class="title function_">getPostList</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (response.<span class="property">posts</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      posts.<span class="property">value</span> = response.<span class="property">posts</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-grid gap-3 my-3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>&#123;&#123;post.title&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;&#123;post.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>Updated at &#123;&#123;post.updatedAt&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The full source code can be found on GitHub: <a href="https://github.com/jizhang/blog-demo/tree/master/openapi-server">openapi-server</a>, <a href="https://github.com/jizhang/blog-demo/tree/master/openapi-fe">openapi-fe</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI&lt;/a&gt; has become the de facto standard of designing web APIs, and there are numerous tools developed around its ecosystem. In this article, I will demonstrate the workflow of using OpenAPI in both backend and frontend projects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/openapi-workflow/openapi-3.0.png&quot; alt=&quot;OpenAPI 3.0&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-Server&quot;&gt;&lt;a href=&quot;#API-Server&quot; class=&quot;headerlink&quot; title=&quot;API Server&quot;&gt;&lt;/a&gt;API Server&lt;/h2&gt;&lt;p&gt;There are &lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;code first and design first&lt;/a&gt; approaches when using OpenAPI, and here we go with code first approach, i.e. writing the API server first, add specification to the method docs, then generate the final OpenAPI specification. The API server will be developed with Python &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;Flask&lt;/a&gt; framework and &lt;a href=&quot;https://apispec.readthedocs.io/&quot;&gt;apispec&lt;/a&gt; library with &lt;a href=&quot;https://marshmallow.readthedocs.io/&quot;&gt;marshmallow&lt;/a&gt; extension. Let‚Äôs first install the dependencies:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Flask==2.1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-Cors==3.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flask-SQLAlchemy==2.5.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQLAlchemy==1.4.36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python-dotenv==0.20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apispec[marshmallow]==5.2.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apispec-webframeworks==0.5.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="python" scheme="https://shzhangji.com/tags/python/"/>
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="openapi" scheme="https://shzhangji.com/tags/openapi/"/>
    
    <category term="flask" scheme="https://shzhangji.com/tags/flask/"/>
    
    <category term="typescript" scheme="https://shzhangji.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Use Bootstrap V5 in Vue 3 Project</title>
    <link href="https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/"/>
    <id>https://shzhangji.com/blog/2022/06/11/use-bootstrap-v5-in-vue3-project/</id>
    <published>2022-06-11T12:06:26.000Z</published>
    <updated>2022-06-11T12:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap V5 and Vue 3.x have been released for a while, but the widely used BootstrapVue library is still based on Bootstrap V4 and Vue 2.x. A <a href="https://github.com/bootstrap-vue/bootstrap-vue/issues/5196">new version</a> of BootstrapVue is under development, and there is an alternative project <a href="https://cdmoro.github.io/bootstrap-vue-3/">BootstrapVue 3</a> in alpha version. However, since Bootstrap is mainly a CSS framework, and it has dropped jQuery dependency in V5, it is not that difficult to integrate into a Vue 3.x project on your own. In this article, we will go through the steps of creating such a project.</p><h2 id="Create-Vite-project"><a href="#Create-Vite-project" class="headerlink" title="Create Vite project"></a>Create Vite project</h2><p>The recommended way of using Vue 3.x is with Vite. Install <code>yarn</code> and create from the <code>vue-ts</code> template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite bootstrap-vue3 --template vue-ts</span><br><span class="line">cd bootstrap-vue3</span><br><span class="line">yarn install</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h2 id="Add-Bootstrap-dependencies"><a href="#Add-Bootstrap-dependencies" class="headerlink" title="Add Bootstrap dependencies"></a>Add Bootstrap dependencies</h2><p>Bootstrap is published on npm, and it has an extra dependency Popper, so let‚Äôs install them both:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap @popperjs/core</span><br></pre></td></tr></table></figure><p>You may also need the type definitions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/bootstrap</span><br></pre></td></tr></table></figure><h2 id="Use-Bootstrap-CSS"><a href="#Use-Bootstrap-CSS" class="headerlink" title="Use Bootstrap CSS"></a>Use Bootstrap CSS</h2><p>Just add a line to your <code>App.vue</code> file and you are free to use Bootstrap CSS:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can also use Sass for further <a href="https://getbootstrap.com/docs/5.2/customize/sass/">customization</a>.</p><span id="more"></span><h2 id="Use-JavaScript-plugins"><a href="#Use-JavaScript-plugins" class="headerlink" title="Use JavaScript plugins"></a>Use JavaScript plugins</h2><p>Bootstrap provides JS plugins to enable interactive components, such as Modal, Toast, etc. There are two ways of using these plugins: through <code>data</code> attributes, or create instances programatically. Let‚Äôs take <a href="https://getbootstrap.com/docs/5.2/components/modal/">Modal</a> for an example.</p><h3 id="Through-data-attributes"><a href="#Through-data-attributes" class="headerlink" title="Through data attributes"></a>Through <code>data</code> attributes</h3><p>First, you need to import the Bootstrap JS. In the following example, we import the individual Modal plugin. You can also import the full Bootstrap JS using <code>import &#39;bootstrap&#39;</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/js/dist/modal&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-bs-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-bs-target</span>=<span class="string">&quot;#exampleModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;exampleModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModalLabel&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>When the <em>Launch</em> button is clicked, <code>data-bs-toggle</code> tells Bootstrap to show or hide a modal dialog with the element ID indicated by <code>data-bs-target</code>. When the <em>Close</em> button is clicked, <code>data-bs-dismiss</code> indicates hiding the dialog that contains this button. <code>data</code> attribute is simple, but not flexible. In practice, we tend to use JS instance instead.</p><h3 id="Through-JS-instances"><a href="#Through-JS-instances" class="headerlink" title="Through JS instances"></a>Through JS instances</h3><p>From the Bootstrap document, we see the following instruction:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myModalAlternative = <span class="keyword">new</span> bootstrap.<span class="title class_">Modal</span>(<span class="string">&#x27;#myModal&#x27;</span>, options)</span><br></pre></td></tr></table></figure><p>It creates a <code>Modal</code> instance on a DOM element with the ID <code>myModal</code>, and then we can call the <code>show</code> or <code>hide</code> methods on it. In Vue, we need to replace the element ID with a <a href="https://vuejs.org/guide/essentials/template-refs.html">Template Ref</a>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modalRef = ref&lt;<span class="title class_">HTMLElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">modal</span>: <span class="title class_">Modal</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modalRef.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal = <span class="keyword">new</span> <span class="title class_">Modal</span>(modalRef.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">launchDemoModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  modal.<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;launchDemoModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;modalRef&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>modalRef</code> will be set by Vue when component is mounted, at that time we create the Modal instance with the passed-in DOM element. Note <code>data-bs-dimiss</code> still works in this example.</p><h3 id="Write-a-custom-component"><a href="#Write-a-custom-component" class="headerlink" title="Write a custom component"></a>Write a custom component</h3><p>If you need to use Modal in different places, it is better to wrap it in a component. Create a <code>components/Modal.vue</code> file and put the following code in it:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">modelValue</span>: boolean</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">title</span>: string</span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;update:modelValue&#x27;</span>, <span class="attr">modelValue</span>: boolean): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modalRef = ref&lt;<span class="title class_">HTMLElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="attr">modal</span>: <span class="title class_">Modal</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modalRef.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal = <span class="keyword">new</span> <span class="title class_">Modal</span>(modalRef.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> props.<span class="property">modelValue</span>, <span class="function">(<span class="params">modelValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modelValue) &#123;</span></span><br><span class="line"><span class="language-javascript">    modal.<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    modal.<span class="title function_">hide</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;modalRef&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We use <code>v-model</code> to control the visibility of the modal dialog. By watching the value of <code>modelValue</code> property, we call corresponding methods on the Modal instance. Also we have replaced the <code>data-bs-dismiss</code> with a function that changes the value of <code>modelValue</code>, because that should be the single source of truth of the modal state.</p><p>Use this component in a demo view:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Modal.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">launchDemoModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">closeModal</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">saveChanges</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">closeModal</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;Changes saved.&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;launchDemoModal&quot;</span>&gt;</span></span><br><span class="line">    Launch demo modal 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Modal title&quot;</span>&gt;</span></span><br><span class="line">    Woo-hoo, you&#x27;re reading this text in a modal!</span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeModal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveChanges&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Check out the <a href="https://vuejs.org/guide/essentials/component-basics.html">Vue document</a> to learn about component, slot, v-model, etc. Code examples can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/bootstrap-vue3">GitHub</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bootstrap V5 and Vue 3.x have been released for a while, but the widely used BootstrapVue library is still based on Bootstrap V4 and Vue 2.x. A &lt;a href=&quot;https://github.com/bootstrap-vue/bootstrap-vue/issues/5196&quot;&gt;new version&lt;/a&gt; of BootstrapVue is under development, and there is an alternative project &lt;a href=&quot;https://cdmoro.github.io/bootstrap-vue-3/&quot;&gt;BootstrapVue 3&lt;/a&gt; in alpha version. However, since Bootstrap is mainly a CSS framework, and it has dropped jQuery dependency in V5, it is not that difficult to integrate into a Vue 3.x project on your own. In this article, we will go through the steps of creating such a project.&lt;/p&gt;
&lt;h2 id=&quot;Create-Vite-project&quot;&gt;&lt;a href=&quot;#Create-Vite-project&quot; class=&quot;headerlink&quot; title=&quot;Create Vite project&quot;&gt;&lt;/a&gt;Create Vite project&lt;/h2&gt;&lt;p&gt;The recommended way of using Vue 3.x is with Vite. Install &lt;code&gt;yarn&lt;/code&gt; and create from the &lt;code&gt;vue-ts&lt;/code&gt; template:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn create vite bootstrap-vue3 --template vue-ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd bootstrap-vue3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Add-Bootstrap-dependencies&quot;&gt;&lt;a href=&quot;#Add-Bootstrap-dependencies&quot; class=&quot;headerlink&quot; title=&quot;Add Bootstrap dependencies&quot;&gt;&lt;/a&gt;Add Bootstrap dependencies&lt;/h2&gt;&lt;p&gt;Bootstrap is published on npm, and it has an extra dependency Popper, so let‚Äôs install them both:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add bootstrap @popperjs/core&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may also need the type definitions:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add -D @types/bootstrap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Use-Bootstrap-CSS&quot;&gt;&lt;a href=&quot;#Use-Bootstrap-CSS&quot; class=&quot;headerlink&quot; title=&quot;Use Bootstrap CSS&quot;&gt;&lt;/a&gt;Use Bootstrap CSS&lt;/h2&gt;&lt;p&gt;Just add a line to your &lt;code&gt;App.vue&lt;/code&gt; file and you are free to use Bootstrap CSS:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bootstrap/dist/css/bootstrap.min.css&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Primary&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can also use Sass for further &lt;a href=&quot;https://getbootstrap.com/docs/5.2/customize/sass/&quot;&gt;customization&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="vue" scheme="https://shzhangji.com/tags/vue/"/>
    
    <category term="bootstrap" scheme="https://shzhangji.com/tags/bootstrap/"/>
    
    <category term="vite" scheme="https://shzhangji.com/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>Migrate from hexo-deployer-git to GitHub Actions</title>
    <link href="https://shzhangji.com/blog/2022/06/03/migrate-from-hexo-deployer-git-to-github-actions/"/>
    <id>https://shzhangji.com/blog/2022/06/03/migrate-from-hexo-deployer-git-to-github-actions/</id>
    <published>2022-06-03T06:34:18.000Z</published>
    <updated>2022-06-03T06:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Create <code>.github/workflows/pages.yml</code> in your <code>master</code> branch:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.22&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">yarn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>Go to GitHub repo‚Äôs Settings &gt; Pages, change source branch to <code>gh-pages</code>.</p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><span id="more"></span><p>Previously with <a href="https://github.com/hexojs/hexo-deployer-git"><code>hexo-deployer-git</code></a> plugin, we generate the static site locally and push those files to github‚Äôs master branch, which will be deployed to GitHub Pages server. The config in <code>_config.yml</code> is as simple as:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:jizhang/jizhang.github.com</span></span><br></pre></td></tr></table></figure><p>Now with GitHub Actions, a CI&#x2F;CD platform available to public repositories, the build process can be triggered on remote servers whenever master branch is updated. Hexo provides an <a href="https://hexo.io/docs/github-pages">official document</a> on how to setup the workflow, but it turns out the configuration can be a little bit simpler, thanks to the new versions of <code>actions</code> (we‚Äôll cover it later).</p><p>A workflow is a sequence of jobs to build, test, and deploy our code. Here we only need one job named <code>deploy</code> to generate the static files and push to a branch.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span> []</span><br></pre></td></tr></table></figure><p>A job consists of steps that either run a shell command or invoke an <code>action</code> to execute a common task. For instance, we have defined two steps to install node dependencies and build the static site:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>Make sure you have the following scripts in <code>package.json</code>. Newer version of hexo already has them.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server --draft&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>But where does the node environment come from? First, the job <code>runs-on</code> a specified platform, which is <code>ubuntu-latest</code> here, and <code>uses</code> the <a href="https://github.com/actions/setup-node"><code>setup-node</code></a> action to prepare the node environment, <code>yarn</code> command, as well as the cache facility.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">node-version:</span> <span class="string">&quot;12.22&quot;</span></span><br><span class="line">      <span class="attr">cache:</span> <span class="string">yarn</span></span><br></pre></td></tr></table></figure><p>Under the hood, it searches for a local cache of the specific node version, where github provides last three LTS versions, or it falls back to downloading from the official site. The <code>yarn</code> package manager is pre-bundled by github, or you need a separate step to install it.</p><p>When it comes to caching the downloaded packages, <code>setup-node</code> action utilizes <a href="https://github.com/actions/cache"><code>actions/cache</code></a>. It caches the global package data, i.e. <code>~/.cache/yarn/v6</code> folder, instead of <code>node_modules</code>, so that cache can be shared between different node versions. <code>setup-node</code> generates a cache key in the form of <code>node-cache-Linux-yarn-$&#123;hash(yarn.lock)&#125;</code>. See more about caching on <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">GitHub Docs</a>.</p><p>The static site is generated in <code>public</code> folder, and we need to push them into the <code>gh-pages</code> branch. There is an action <a href="https://github.com/peaceiris/actions-gh-pages"><code>peaceiris/actions-gh-pages</code></a> that already covers this.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><p>It first clones the <code>gh-pages</code> branch into work directory, overwrites it with the files in <code>public</code> folder, commits and pushes to the remote branch. The <code>GITHUB_TOKEN</code> is provided by GitHub Actions, with adequate permissions.</p><p>Last but not least, this workflow needs to be triggered on the <code>push</code> event of the <code>master</code> branch:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>Here is a screenshot of this workflow:</p><p><img src="/images/use-github-actions.png" alt="Use GitHub Actions"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Create &lt;code&gt;.github/workflows/pages.yml&lt;/code&gt; in your &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;gh-pages&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;push:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;branches:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/checkout@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/setup-node@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;node-version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;12.22&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;cache:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;run:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;github_token:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;$&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;secrets.GITHUB_TOKEN&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;publish_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./public&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go to GitHub repo‚Äôs Settings &amp;gt; Pages, change source branch to &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;How-it-works&quot;&gt;&lt;a href=&quot;#How-it-works&quot; class=&quot;headerlink&quot; title=&quot;How it works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="hexo" scheme="https://shzhangji.com/tags/hexo/"/>
    
    <category term="github" scheme="https://shzhangji.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Deploy Flink Job Cluster on Kubernetes</title>
    <link href="https://shzhangji.com/blog/2019/08/24/deploy-flink-job-cluster-on-kubernetes/"/>
    <id>https://shzhangji.com/blog/2019/08/24/deploy-flink-job-cluster-on-kubernetes/</id>
    <published>2019-08-24T11:33:22.000Z</published>
    <updated>2019-08-24T11:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/">Kubernetes</a> is the trending container orchestration system that can be used to host various applications from web services to data processing jobs. Applications are packaged in self-contained, yet light-weight containers, and we declare how they should be deployed, how they scale, and how they expose as services. <a href="https://flink.apache.org/">Flink</a> is also a trending distributed computing framework that can run on a variety of platforms, including Kubernetes. Combining them will bring us robust and scalable deployments of data processing jobs, and more safely Flink can share a Kubernetes cluster with other services.</p><p><img src="/images/flink-on-kubernetes.png" alt="Flink on Kubernetes"></p><p>When deploying Flink on Kubernetes, there are two options, session cluster and job cluster. Session cluster is like running a standalone Flink cluster on k8s that can accept multiple jobs and is suitable for short running tasks or ad-hoc queries. Job cluster, on the other hand, deploys a full set of Flink cluster for each individual job. We build container image for each job, and provide it with dedicated resources, so that jobs have less chance interfering with other, and can scale out independently. So this article will illustrate how to run a Flink job cluster on Kubernetes, the steps are:</p><ul><li>Compile and package the Flink job jar.</li><li>Build a Docker image containing the Flink runtime and the job jar.</li><li>Create a Kubernetes Job for Flink JobManager.</li><li>Create a Kubernetes Service for this Job.</li><li>Create a Kubernetes Deployment for Flink TaskManagers.</li><li>Enable Flink JobManager HA with ZooKeeper.</li><li>Correctly stop and resume Flink job with SavePoint facility.</li></ul><span id="more"></span><h2 id="Kubernetes-Playground"><a href="#Kubernetes-Playground" class="headerlink" title="Kubernetes Playground"></a>Kubernetes Playground</h2><p>In case you do not already have a Kubernetes environment, one can easily setup a local playground with <a href="https://github.com/kubernetes/minikube">minikube</a>. Take MacOS for an example:</p><ul><li>Install <a href="https://www.virtualbox.org/">VirtualBox</a>, since minikube will setup a k8s cluster inside a virtual machine.</li><li>Download the <a href="https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64">minikube binary</a>, making it executable and accessible from PATH.</li><li>Execute <code>minikube start</code>, it will download the virtual machine image, kubelet and kubeadm facilities, install and verify the k8s cluster. If you have trouble accessing the internet, setup a proxy and <a href="https://minikube.sigs.k8s.io/docs/reference/networking/proxy/">tell minikube to use it</a>.</li><li>Download and install the <a href="https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/darwin/amd64/kubectl">kubectl binary</a>. Minikube has configured kubectl to point to the installed k8s cluster, so one can execute <code>kubectl get pods -A</code> to see the running system pods.</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   kube-apiserver-minikube            1/1     Running   0          16m</span><br><span class="line">kube-system   etcd-minikube                      1/1     Running   0          15m</span><br><span class="line">kube-system   coredns-5c98db65d4-d4t2h           1/1     Running   0          17m</span><br></pre></td></tr></table></figure><h2 id="Flink-Streaming-Job"><a href="#Flink-Streaming-Job" class="headerlink" title="Flink Streaming Job"></a>Flink Streaming Job</h2><p>Let us create a simple streaming job, that reads data from socket, and prints the count of words every 5 seconds. The following code is taken from <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/dev/datastream_api.html#example-program">Flink doc</a>, and a full Maven project can be found on <a href="https://github.com/jizhang/blog-demo/tree/master/flink-on-kubernetes">GitHub</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = env</span><br><span class="line">    .socketTextStream(<span class="string">&quot;192.168.99.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> <span class="title class_">Splitter</span>())</span><br><span class="line">    .keyBy(<span class="number">0</span>)</span><br><span class="line">    .timeWindow(Time.seconds(<span class="number">5</span>))</span><br><span class="line">    .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">dataStream.print();</span><br></pre></td></tr></table></figure><p>IP <code>192.168.99.1</code> allows container to access services running on minikube host. For this example to work, you need to run <code>nc -lk 9999</code> on your host before creating the JobManager pod.</p><p>Run <code>mvn clean package</code>, and the compiled job jar can be found in <code>target/flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar</code>.</p><h2 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h2><p>Flink provides an official docker image on <a href="https://hub.docker.com/_/flink">DockerHub</a>. We can use it as the base image and add job jar into it. Besides, in recent Flink distribution, the Hadoop binary is not included anymore, so we need to add Hadoop jar as well. Take a quick look at the base image‚Äôs <a href="https://github.com/docker-flink/docker-flink/blob/master/1.8/scala_2.12-debian/Dockerfile">Dockerfile</a>, it does the following tasks:</p><ul><li>Create from OpenJDK 1.8 base image.</li><li>Install Flink into <code>/opt/flink</code>.</li><li>Add <code>flink</code> user and group.</li><li>Configure the entry point, which we will override in k8s deployments.</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre</span><br><span class="line"><span class="keyword">ENV</span> FLINK_HOME=/opt/flink</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$FLINK_HOME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd flink &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  wget -O flink.tgz <span class="string">&quot;<span class="variable">$FLINK_TGZ_URL</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  tar -xf flink.tgz</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>Based on it, we create a new Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> flink:<span class="number">1.8</span>.<span class="number">1</span>-scala_2.<span class="number">12</span></span><br><span class="line"><span class="keyword">ARG</span> hadoop_jar</span><br><span class="line"><span class="keyword">ARG</span> job_jar</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=flink:flink <span class="variable">$hadoop_jar</span> <span class="variable">$job_jar</span> <span class="variable">$FLINK_HOME</span>/lib/</span></span><br><span class="line"><span class="keyword">USER</span> flink</span><br></pre></td></tr></table></figure><p>Before building the image, you need to install Docker CLI and point it to the docker service inside minikube:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install docker</span><br><span class="line">$ <span class="built_in">eval</span> $(minikube docker-env)</span><br></pre></td></tr></table></figure><p>Then, download the <a href="https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.8.3-7.0/flink-shaded-hadoop-2-uber-2.8.3-7.0.jar">Hadoop uber jar</a>, and execute the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/Dockerfile</span><br><span class="line">$ <span class="built_in">cp</span> /path/to/flink-shaded-hadoop-2-uber-2.8.3-7.0.jar hadoop.jar</span><br><span class="line">$ <span class="built_in">cp</span> /path/to/flink-on-kubernetes-0.0.1-SNAPSHOT-jar-with-dependencies.jar job.jar</span><br><span class="line">$ docker build --build-arg hadoop_jar=hadoop.jar --build-arg job_jar=job.jar --tag flink-on-kubernetes:0.0.1 .</span><br></pre></td></tr></table></figure><p>Now we have a local docker image that is ready to be deployed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY           TAG    IMAGE ID      CREATED         SIZE</span><br><span class="line">flink-on-kubernetes  0.0.1  505d2f11cc57  10 seconds ago  618MB</span><br></pre></td></tr></table></figure><h2 id="Deploy-JobManager"><a href="#Deploy-JobManager" class="headerlink" title="Deploy JobManager"></a>Deploy JobManager</h2><p>First, we create a k8s Job for Flink JobManager. Job and Deployment both create and manage Pods to do some work. The difference is Job will quit if the Pod finishes successfully, based on the exit code, while Deployment only quits when asked to. This feature enables us to cancel the Flink job manually, without worrying Deployment restarts the JobManager by mistake.</p><p>Here‚Äôs the <a href="https://github.com/jizhang/blog-demo/blob/master/flink-on-kubernetes/docker/jobmanager.yml"><code>jobmanager.yml</code></a>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jobmanager</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">flink-on-kubernetes:0.0.1</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dparallelism.default=1&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dblob.server.port=6124&quot;</span>,</span><br><span class="line">               <span class="string">&quot;-Dqueryable-state.server.ports=6125&quot;</span>]</span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6123</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6124</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">blob</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6125</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ui</span></span><br></pre></td></tr></table></figure><ul><li><code>$&#123;JOB&#125;</code> can be replaced by <code>envsubst</code>, so that config files can be reused by different jobs.</li><li>Container‚Äôs entry point is changed to <code>standalone-job.sh</code>. It will start the JobManager in foreground, scan the class path for a <code>Main-Class</code> as the job entry point, or you can specify the full class name via <code>-j</code> option. Then, this job is automatically submitted to the cluster.</li><li>JobManager‚Äôs RPC address is the k8s <a href="https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies">Service</a>‚Äòs name, which we will create later. Other containers can access JobManager via this host name.</li><li>Blob server and queryable state server‚Äôs ports are by default random. We change them to fixed ports for easy exposure.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> JOB=flink-on-kubernetes</span><br><span class="line">$ envsubst &lt;jobmanager.yml | kubectl create -f -</span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager-kc4kq   1/1     Running   0          2m26s</span><br></pre></td></tr></table></figure><p>Next, we expose this JobManager as k8s Service, so that TaskManagers can register to it.</p><p><code>service.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">    <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-jobmanager</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rpc</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6123</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">blob</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6124</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">query</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6125</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ui</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p><code>type: NodePort</code> is necessary because we also want to interact with this JobManager outside the k8s cluster.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ envsubst &lt;service.yml | kubectl create -f -</span><br><span class="line">$ kubectl get service</span><br><span class="line">NAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                                      AGE</span><br><span class="line">flink-on-kubernetes-jobmanager   NodePort    10.109.78.143   &lt;none&gt;        6123:31476/TCP,6124:32268/TCP,6125:31602/TCP,8081:31254/TCP  15m</span><br></pre></td></tr></table></figure><p>We can see Flink dashboard is exposed on port 31254 on the virtual machine. Minikube provides a command to retrieve the full url of a service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ minikube service <span class="variable">$JOB</span>-jobmanager --url</span><br><span class="line">http://192.168.99.108:31476</span><br><span class="line">http://192.168.99.108:32268</span><br><span class="line">http://192.168.99.108:31602</span><br><span class="line">http://192.168.99.108:31254</span><br></pre></td></tr></table></figure><h2 id="Deploy-TaskManager"><a href="#Deploy-TaskManager" class="headerlink" title="Deploy TaskManager"></a>Deploy TaskManager</h2><p><code>taskmanager.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">      <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flink</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">$&#123;JOB&#125;-taskmanager</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">taskmanager</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">flink-on-kubernetes:0.0.1</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/taskmanager.sh&quot;</span>]</span><br><span class="line">        <span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>, <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>]</span><br></pre></td></tr></table></figure><p>Change the number of <code>replicas</code> to add more TaskManagers. The <code>taskmanager.numberOfTaskSlots</code> is set to <code>1</code> in this image, which is recommended because we should let k8s handle the scaling.</p><p>Now the job cluster is running, try typing something into the <code>nc</code> console:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc -lk 9999</span><br><span class="line">hello world</span><br><span class="line">hello flink</span><br></pre></td></tr></table></figure><p>Open another terminal and tail the TaskManager‚Äôs standard output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f -l instance=<span class="variable">$JOB</span>-taskmanager</span><br><span class="line">(hello,2)</span><br><span class="line">(flink,1)</span><br><span class="line">(world,1)</span><br></pre></td></tr></table></figure><h2 id="Configure-JobManager-HA"><a href="#Configure-JobManager-HA" class="headerlink" title="Configure JobManager HA"></a>Configure JobManager HA</h2><p>While TaskManager can achieve high availability by increasing the replicas of the Deployment, JobManager is still a single point of failure. Flink comes with an <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/jobmanager_high_availability.html">HA solution</a> with the help of ZooKeeper and a distributed file system like HDFS. In a standalone cluster, multiple JobManagers are started and one of them is elected as leader. In YARN or Kubernetes deployment, only one JobManager instance is required. The cluster‚Äôs meta info is stored in ZooKeeper, and checkpoint data are stored in HDFS. When JobManager is down, Kubernetes will restart the container, and the new JobManager will restore the last checkpoint and resume the job.</p><p>To enable JobManager HA, change the start command of both JobManager and TaskManager:</p><p><code>jobmanager-ha.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Djobmanager.rpc.address=$&#123;JOB&#125;-jobmanager&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dparallelism.default=1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dblob.server.port=6124&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dqueryable-state.server.ports=6125&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability=zookeeper&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.quorum=192.168.99.1:2181&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.path.root=/flink&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.cluster-id=/$&#123;JOB&#125;&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.storageDir=hdfs://192.168.99.1:9000/flink/recovery&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.jobmanager.port=6123&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p><code>taskmanager-ha.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/taskmanager.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability=zookeeper&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.quorum=192.168.99.1:2181&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.zookeeper.path.root=/flink&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.cluster-id=/$&#123;JOB&#125;&quot;</span>,</span><br><span class="line">       <span class="string">&quot;-Dhigh-availability.storageDir=hdfs://192.168.99.1:9000/flink/recovery&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><ul><li>Prepare a ZooKeeper and HDFS environment on minikube host, so that Flink containers can access them via <code>192.168.99.1:2181</code> and <code>192.168.99.1:9000</code>.</li><li>Cluster meta data will be stored under <code>/flink/$&#123;JOB&#125;</code> in ZooKeeper.</li><li>Checkpoint data is stored under <code>/flink/recovery</code> in HDFS. Make sure you create the <code>/flink</code> directory with proper permission.</li><li>The <code>jobmanager.rpc.address</code> property is removed from TaskManager‚Äôs arguments because the RPC host and port of JobManager will be fetched from ZooKeeper. The RPC port is by default random, so we changed to a fixed port via <code>high-availability.jobmanager.port</code>, which is exposed in k8s Service.</li></ul><h2 id="Manage-Flink-Job"><a href="#Manage-Flink-Job" class="headerlink" title="Manage Flink Job"></a>Manage Flink Job</h2><p>We can interact with Flink cluster via RESTful API. It is the same port as Flink Dashboard. Install Flink binaries on your host machine, and pass <code>-m</code> argument to point to the JobManager in k8s:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink list -m 192.168.99.108:30206</span><br><span class="line">------------------ Running/Restarting Jobs -------------------</span><br><span class="line">24.08.2019 12:50:28 : 00000000000000000000000000000000 : Window WordCount (RUNNING)</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>In HA mode, Flink job ID is by default <code>00000000000000000000000000000000</code>. We can use this ID to cancel Flink job with <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html">SavePoint</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink cancel -m 192.168.99.108:30206 -s hdfs://192.168.99.1:9000/flink/savepoints/ 00000000000000000000000000000000</span><br><span class="line">Cancelled job 00000000000000000000000000000000. Savepoint stored <span class="keyword">in</span> hdfs://192.168.99.1:9000/flink/savepoints/savepoint-000000-f776c8e50a0c.</span><br></pre></td></tr></table></figure><p>And the k8s Job is now in completed status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get job</span><br><span class="line">NAME                             COMPLETIONS   DURATION   AGE</span><br><span class="line">flink-on-kubernetes-jobmanager   1/1           4m40s      7m14s</span><br></pre></td></tr></table></figure><p>To re-submit the job, we need to delete them first:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete job <span class="variable">$JOB</span>-jobmanager</span><br><span class="line">$ kubectl delete deployment <span class="variable">$JOB</span>-taskmanager</span><br></pre></td></tr></table></figure><p>Then add a command argument to <code>jobmanager-savepoint.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">...</span></span><br><span class="line">       <span class="string">&quot;--fromSavepoint&quot;</span>, <span class="string">&quot;$&#123;SAVEPOINT&#125;&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>Start this job from the SavePoint:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> SAVEPOINT=hdfs://192.168.99.1:9000/flink/savepoints/savepoint-000000-f776c8e50a0c</span><br><span class="line">$ envsubst &lt;jobmanager-savepoint.yml | kubectl create -f -</span><br></pre></td></tr></table></figure><p>One note on SavePoint, it has to be used with HA mode, because the <code>--fromSavepoint</code> argument will be passed to <code>standalone-job.sh</code> every time Kubernetes tries to restart a failed JobManager. With HA mode enabled, the new JobManager will first restore from the CheckPoint, ignoring the SavePoint.</p><h3 id="Scale-Flink-Job"><a href="#Scale-Flink-Job" class="headerlink" title="Scale Flink Job"></a>Scale Flink Job</h3><p>There are two ways to scale a Flink job. One is manually restarting it with a different <code>parallelism.default</code> config, which can be found in <code>jobmanager.yml</code>. Another way is using the <code>bin/flink modify</code> command. Under the hood, this command cancels the job with a SavePoint, and restarts it with the new parallelism. So for this to work, you need to first set the default SavePoint directory, like:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;/opt/flink/bin/standalone-job.sh&quot;</span>]</span><br><span class="line"><span class="attr">args:</span> [<span class="string">&quot;start-foreground&quot;</span>,</span><br><span class="line">       <span class="string">...</span></span><br><span class="line">       <span class="string">&quot;-Dstate.savepoints.dir=hdfs://192.168.99.1:9000/flink/savepoints/&quot;</span>,</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure><p>Then, add more TaskManagers with <code>kubectl scale</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale --replicas=2 deployment/<span class="variable">$JOB</span>-taskmanager</span><br><span class="line">deployment.extensions/flink-on-kubernetes-taskmanager scaled</span><br></pre></td></tr></table></figure><p>And modify the parallelism of the running job:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink modify 755877434b676ce9dae5cfb533ed7f33 -m 192.168.99.108:30206 -p 2</span><br><span class="line">Modify job 755877434b676ce9dae5cfb533ed7f33.</span><br><span class="line">Rescaled job 755877434b676ce9dae5cfb533ed7f33. Its new parallelism is 2.</span><br></pre></td></tr></table></figure><p>However, due to an <a href="https://issues.apache.org/jira/browse/FLINK-11997">unresolved issue</a>, we cannot use <code>flink modify</code> to scale an HA job cluster in Kubernetes mode. Use the manual method instead.</p><h2 id="Flink-Native-Support-on-Kubernetes"><a href="#Flink-Native-Support-on-Kubernetes" class="headerlink" title="Flink Native Support on Kubernetes"></a>Flink Native Support on Kubernetes</h2><p>Flink enjoys a very active community that constantly improves its own design (<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077">FLIP-6</a>) to adopt current cloud-native environment. They‚Äôve also noticed the rapid development of Kubernetes, and the native support of Flink on K8s is under development as well. It‚Äôs known that Flink can run natively on resource management systems like YARN&#x2F;Mesos. Take YARN for an instance, Flink will first start an ApplicationMaster as the JobManager, analyze how much resource this job needs, and request YARN ResourceManager for containers to run TaskManager. When the parallelism changes, JobManager will acquire or release containers correspondingly. This kind of active resource management for Kubernetes is under development (<a href="https://issues.apache.org/jira/browse/FLINK-9953">FLINK-9953</a>). In future, we can deploy Flink cluster on K8s with a simple command.</p><p>Besides, another kind of resource management is also on its way. It‚Äôs called reactive container mode (<a href="https://issues.apache.org/jira/browse/FLINK-10407">FLINK-10407</a>). In short, when the JobManager realizes there are idle TaskManagers, it will automatically scale the job to its maximum parallelism. Thus, we only need to use <code>kubectl scale</code> changing <code>replicas</code>, without executing <code>flink modify</code> later. Such convenient features will be available soon, I believe.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/deployment/kubernetes.html">https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/deployment/kubernetes.html</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/">https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</a></li><li><a href="https://jobs.zalando.com/tech/blog/running-apache-flink-on-kubernetes/">https://jobs.zalando.com/tech/blog/running-apache-flink-on-kubernetes/</a></li><li><a href="https://www.slideshare.net/tillrohrmann/redesigning-apache-flinks-distributed-architecture-flink-forward-2017">https://www.slideshare.net/tillrohrmann/redesigning-apache-flinks-distributed-architecture-flink-forward-2017</a></li><li><a href="https://www.slideshare.net/tillrohrmann/future-of-apache-flink-deployments-containers-kubernetes-and-more-flink-forward-2019-sf">https://www.slideshare.net/tillrohrmann/future-of-apache-flink-deployments-containers-kubernetes-and-more-flink-forward-2019-sf</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; is the trending container orchestration system that can be used to host various applications from web services to data processing jobs. Applications are packaged in self-contained, yet light-weight containers, and we declare how they should be deployed, how they scale, and how they expose as services. &lt;a href=&quot;https://flink.apache.org/&quot;&gt;Flink&lt;/a&gt; is also a trending distributed computing framework that can run on a variety of platforms, including Kubernetes. Combining them will bring us robust and scalable deployments of data processing jobs, and more safely Flink can share a Kubernetes cluster with other services.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flink-on-kubernetes.png&quot; alt=&quot;Flink on Kubernetes&quot;&gt;&lt;/p&gt;
&lt;p&gt;When deploying Flink on Kubernetes, there are two options, session cluster and job cluster. Session cluster is like running a standalone Flink cluster on k8s that can accept multiple jobs and is suitable for short running tasks or ad-hoc queries. Job cluster, on the other hand, deploys a full set of Flink cluster for each individual job. We build container image for each job, and provide it with dedicated resources, so that jobs have less chance interfering with other, and can scale out independently. So this article will illustrate how to run a Flink job cluster on Kubernetes, the steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile and package the Flink job jar.&lt;/li&gt;
&lt;li&gt;Build a Docker image containing the Flink runtime and the job jar.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Job for Flink JobManager.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Service for this Job.&lt;/li&gt;
&lt;li&gt;Create a Kubernetes Deployment for Flink TaskManagers.&lt;/li&gt;
&lt;li&gt;Enable Flink JobManager HA with ZooKeeper.&lt;/li&gt;
&lt;li&gt;Correctly stop and resume Flink job with SavePoint facility.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="flink" scheme="https://shzhangji.com/tags/flink/"/>
    
    <category term="kubernetes" scheme="https://shzhangji.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Hive ACID Transactional Table</title>
    <link href="https://shzhangji.com/blog/2019/06/10/understanding-hive-acid-transactional-table/"/>
    <id>https://shzhangji.com/blog/2019/06/10/understanding-hive-acid-transactional-table/</id>
    <published>2019-06-10T12:40:55.000Z</published>
    <updated>2019-06-10T12:40:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hive.apache.org/">Apache Hive</a> introduced transactions since version 0.13 to fully support ACID semantics on Hive table, including INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;MERGE statements, streaming data ingestion, etc. In Hive 3.0, this feature is further improved by optimizing the underlying data file structure, reducing constraints on table scheme, and supporting predicate push down and vectorized query. Examples and setup can be found on <a href="https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions">Hive wiki</a> and other <a href="https://hortonworks.com/tutorial/using-hive-acid-transactions-to-insert-update-and-delete-data/">tutorials</a>, while this article will focus on how transactional table is saved on HDFS, and take a closer look at the read-write process.</p><h2 id="File-Structure"><a href="#File-Structure" class="headerlink" title="File Structure"></a>File Structure</h2><h3 id="Insert-Data"><a href="#Insert-Data" class="headerlink" title="Insert Data"></a>Insert Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (id <span class="type">int</span>, name string, salary <span class="type">int</span>)</span><br><span class="line">STORED <span class="keyword">AS</span> ORC TBLPROPERTIES (<span class="string">&#x27;transactional&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jerry&#x27;</span>, <span class="number">5000</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Tom&#x27;</span>,   <span class="number">8000</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Kate&#x27;</span>,  <span class="number">6000</span>);</span><br></pre></td></tr></table></figure><p>An INSERT statement is executed in a single transaction. It will create a <code>delta</code> directory containing information about this transaction and its data.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/_orc_acid_version</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000</span><br></pre></td></tr></table></figure><p>The schema of this folder‚Äôs name is <code>delta_minWID_maxWID_stmtID</code>, i.e. ‚Äúdelta‚Äù prefix, transactional writes‚Äô range (minimum and maximum write ID), and statement ID. In detail:</p><ul><li>All INSERT statements will create a <code>delta</code> directory. UPDATE statement will also create <code>delta</code> directory right after a <code>delete</code> directory. <code>delete</code> directory is prefixed with ‚Äúdelete_delta‚Äù.</li><li>Hive will assign a globally unique ID for every transaction, both read and write. For transactional writes like INSERT and DELETE, it will also assign a table-wise unique ID, a.k.a. a write ID. The write ID range will be encoded in the <code>delta</code> and <code>delete</code> directory names.</li><li>Statement ID is used when multiple writes into the same table happen in one transaction.</li></ul><span id="more"></span><p>For its content, <code>_orc_acid_version</code> always contains ‚Äú2‚Äù, indicating this directory is in ACID version 2 format. Compared with previous version, the main difference is that UPDATE now uses split-update technique to support predicate push down and other features (<a href="https://jira.apache.org/jira/browse/HIVE-14035">HIVE-14035</a>). <code>bucket_00000</code> is the inserted records. Since this table is not bucketed, there is only one file, and it is in <a href="https://orc.apache.org/">ORC</a> format. We can take a look at its content with <a href="https://orc.apache.org/docs/java-tools.html">orc-tools</a>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ orc-tools data bucket_00000</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:0,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Jerry&quot;,&quot;salary&quot;:5000&#125;&#125;</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:1,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Tom&quot;,&quot;salary&quot;:8000&#125;&#125;</span><br><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:2,&quot;currentTransaction&quot;:1,&quot;row&quot;:&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Kate&quot;,&quot;salary&quot;:6000&#125;&#125;</span><br></pre></td></tr></table></figure><p>The file content is displayed in JSON, row-wise. We can see the actual data is in <code>row</code>, while other keys work for transaction mechanism:</p><ul><li><code>operation</code> 0 means INSERT, 1 UPDATE, and 2 DELETE. UPDATE will not appear because of the split-update technique mentioned above.</li><li><code>originalTransaction</code> is the previous write ID. For INSERT, it is the same as <code>currentTransaction</code>. For DELETE, it is the write ID when this record is first created.</li><li><code>bucket</code> is a 32-bit integer defined by <code>BucketCodec</code> class. Their meanings are:<ul><li>bit 1-3: bucket codec version, currently <code>001</code>.</li><li>bit 4: reserved for future.</li><li>bit 5-16: the bucket ID, 0-based. This ID is determined by CLUSTERED BY columns and number of buckets. It matches the <code>bucket_N</code> prefixed files.</li><li>bit 17-20: reserved for future.</li><li>bit 21-32: statement ID.</li><li>For instance, the binary form of <code>536936448</code> is <code>00100000000000010000000000000000</code>, showing it is a version 1 codec, and bucket ID is 1.</li></ul></li><li><code>rowId</code> is the auto-generated unique ID within the transaction and bucket.</li><li><code>currentTransaction</code> is the current write ID.</li><li><code>row</code> contains the actual data. For DELETE, <code>row</code> will be null.</li></ul><p>We can note that the data rows are ordered by (<code>originalTransaction</code>, <code>bucket</code>, <code>rowId</code>), which is essential for the reading process.</p><p>These information can also be viewed by the <code>row__id</code> virtual column:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> row__id, id, name, salary <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:0&#125;    1       Jerry   5000</span><br><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:1&#125;    2       Tom     8000</span><br><span class="line">&#123;&quot;writeid&quot;:1,&quot;bucketid&quot;:536870912,&quot;rowid&quot;:2&#125;    3       Kate    6000</span><br></pre></td></tr></table></figure><h4 id="Streaming-Data-Ingest-V2"><a href="#Streaming-Data-Ingest-V2" class="headerlink" title="Streaming Data Ingest V2"></a>Streaming Data Ingest V2</h4><p>Hive 3.0 also upgrades the former <a href="https://cwiki.apache.org/confluence/display/Hive/Streaming+Data+Ingest+V2">Streaming API</a>. Now users or third-party tools like Flume can use the ACID feature writing data continuously into Hive table. These operations will also create <code>delta</code> directories. But mutation is no longer supported.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StreamingConnection</span> <span class="variable">connection</span> <span class="operator">=</span> HiveStreamingConnection.newBuilder().connect();</span><br><span class="line">connection.beginTransaction();</span><br><span class="line">connection.write(<span class="string">&quot;11,val11,Asia,China&quot;</span>.getBytes());</span><br><span class="line">connection.write(<span class="string">&quot;12,val12,Asia,India&quot;</span>.getBytes());</span><br><span class="line">connection.commitTransaction();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h3 id="Update-Data"><a href="#Update-Data" class="headerlink" title="Update Data"></a>Update Data</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">7000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>This statement will first run a query to find out the <code>row__id</code> of the updating records, and then create a <code>delete</code> directory a long with a <code>delta</code> directory:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000</span><br><span class="line">/user/hive/warehouse/employee/delete_delta_0000002_0000002_0000/bucket_00000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0000/bucket_00000</span><br></pre></td></tr></table></figure><p>Content of <code>delete_delta_0000002_0000002_0000/bucket_00000</code>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;operation&quot;:2,&quot;originalTransaction&quot;:1,&quot;bucket&quot;:536870912,&quot;rowId&quot;:1,&quot;currentTransaction&quot;:2,&quot;row&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>Content of <code>delta_0000002_0000002_0000/bucket_00000</code>:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;operation&quot;:0,&quot;originalTransaction&quot;:2,&quot;bucket&quot;:536870912,&quot;rowId&quot;:0,&quot;currentTransaction&quot;:2,&quot;row&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Tom&quot;,&quot;salary&quot;:7000&#125;&#125;</span><br></pre></td></tr></table></figure><p>DELETE statement works similarly to UPDATE, i.e. find the record but generate only <code>delete</code> directory.</p><h3 id="Merge-Statement"><a href="#Merge-Statement" class="headerlink" title="Merge Statement"></a>Merge Statement</h3><p>MERGE is like MySQL‚Äôs INSERT ON UPDATE. It can update target table with a source table. For instance:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_update (id <span class="type">int</span>, name string, salary <span class="type">int</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_update <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Tom&#x27;</span>,  <span class="number">7000</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> employee <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">USING</span> employee_update <span class="keyword">AS</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> salary <span class="operator">=</span> b.salary</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span> <span class="keyword">INSERT</span> <span class="keyword">VALUES</span> (b.id, b.name, b.salary);</span><br></pre></td></tr></table></figure><p>This statement will update the salary of Tom, and insert a new row of Mary. WHENs are considered different statements. The INSERT clause generates <code>delta_0000002_0000002_0000</code>, containing the row of Mary, while UPDATE generates <code>delete_delta_0000002_0000002_0001</code> and <code>delta_0000002_0000002_0001</code>, deleting and inserting the row of Tom.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delta_0000001_0000001_0000</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0000</span><br><span class="line">/user/hive/warehouse/employee/delete_delta_0000002_0000002_0001</span><br><span class="line">/user/hive/warehouse/employee/delta_0000002_0000002_0001</span><br></pre></td></tr></table></figure><h3 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h3><p>As time goes, there will be more and more <code>delta</code> and <code>delete</code> directories in the table, which will affect the read performance, since reading is a process of merging the results of valid transactions. Small files are neither friendly to file systems like HDFS. So Hive uses two kinds of compactors, namely minor and major, to merge these directories while preserving the transaction information.</p><p>Minor compaction will merge multiple <code>delta</code> and <code>delete</code> files into one <code>delta</code> and <code>delete</code> file, respectively. The transaction ID will be preserved in folder name as write ID range, as mentioned above, while omitting the statement ID. Compactions will be automatically initiated in Hive metastore process based on some configured thresholds. We can also trigger it manually with the following SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee COMPACT <span class="string">&#x27;minor&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Take the result of MERGE statement for an instance. After minor compaction, the folder structure will become:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/delete_delta_0000001_0000002</span><br><span class="line">/user/hive/warehouse/employee/delta_0000001_0000002</span><br></pre></td></tr></table></figure><p>In <code>delta_0000001_0000002/bucket_00000</code>, rows are simply ordered and concatenated, i.e. two rows of Tom will be both included. Minor compact does not delete any data.</p><p>Major compaction, on the other hand, will merge and write the current table into a single directory, with the name <code>base_N</code>, where N is the latest write ID. Deleted data will be removed in major compaction. <code>row_id</code> remains untouched.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user/hive/warehouse/employee/base_0000002</span><br></pre></td></tr></table></figure><p>Note that after minor or major compaction, the original files will not be deleted immediately. Deletion is carried out by a cleaner thread, so there will be multiple files containing the same transaction data simultaneously. Take this into account when understanding the reading process.</p><h2 id="Reading-Process"><a href="#Reading-Process" class="headerlink" title="Reading Process"></a>Reading Process</h2><p>Now we see three kinds of files in an ACID table, <code>base</code>, <code>delta</code>, and <code>delete</code>. Each contains data rows that can be identified by <code>row__id</code> and sorted by it, too. Reading data from an ACID table is a process of merging these files, and reflecting the result of the last transaction. This process is written in <code>OrcInputFormat</code> and <code>OrcRawRecordMerger</code> class, and it is basically a merge-sort algorithm.</p><p>Take the following files for an instance. This structure can be generated by: insert three rows, do a major compaction, then update two rows. <code>1-0-0-1</code> is short for <code>originalTransaction</code> - <code>bucketId</code> (not encoded) - <code>rowId</code> - <code>currentTransaction</code>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------+    +----------+    +----------+</span><br><span class="line">| base_1   |    | delete_2 |    | delta_2  |</span><br><span class="line">+----------+    +----------+    +----------+</span><br><span class="line">| 1-0-0-1  |    | 1-0-1-2  |    | 2-0-0-2  |</span><br><span class="line">| 1-0-1-1  |    | 1-0-2-2  |    | 2-0-1-2  |</span><br><span class="line">| 1-0-2-1  |    +----------+    +----------+</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>Merging process:</p><ul><li>Sort rows from all files by (<code>originalTransaction</code>, <code>bucketId</code>, <code>rowId</code>) ascendingly, (<code>currentTransaction</code>) descendingly. i.e.<ul><li><code>1-0-0-1</code></li><li><code>1-0-1-2</code></li><li><code>1-0-1-1</code></li><li>‚Ä¶</li><li><code>2-0-1-2</code></li></ul></li><li>Fetch the first record.</li><li>If the <code>row__id</code> is the same as previous, skip.</li><li>If the operation is DELETE, skip.<ul><li>As a result, for <code>1-0-1-2</code> and <code>1-0-1-1</code>, this row will be skipped.</li></ul></li><li>Otherwise, emit the row.</li><li>Repeat.</li></ul><p>The merging is done in a streaming way. Hive will open all the files, read the first record, and construct a <code>ReaderKey</code> class, storing <code>originalTransaction</code>, <code>bucketId</code>, <code>rowId</code>, and <code>currentTransaction</code>. <code>ReaderKey</code> class implements the <code>Comparable</code> interface, so they can be sorted in an customized order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordIdentifier</span> <span class="keyword">implements</span> <span class="title class_">WritableComparable</span>&lt;RecordIdentifier&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> writeId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> bucketId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> rowId;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">compareToInternal</span><span class="params">(RecordIdentifier other)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (other == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (writeId != other.writeId) &#123;</span><br><span class="line">      <span class="keyword">return</span> writeId &lt; other.writeId ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bucketId != other.bucketId) &#123;</span><br><span class="line">      <span class="keyword">return</span> bucketId &lt; other.bucketId ? - <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rowId != other.rowId) &#123;</span><br><span class="line">      <span class="keyword">return</span> rowId &lt; other.rowId ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderKey</span> <span class="keyword">extends</span> <span class="title class_">RecordIdentifier</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> currentWriteId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isDeleteEvent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(RecordIdentifier other)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sup</span> <span class="operator">=</span> compareToInternal(other);</span><br><span class="line">    <span class="keyword">if</span> (sup == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (other.getClass() == ReaderKey.class) &#123;</span><br><span class="line">        <span class="type">ReaderKey</span> <span class="variable">oth</span> <span class="operator">=</span> (ReaderKey) other;</span><br><span class="line">        <span class="keyword">if</span> (currentWriteId != oth.currentWriteId) &#123;</span><br><span class="line">          <span class="keyword">return</span> currentWriteId &lt; oth.currentWriteId ? +<span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isDeleteEvent != oth.isDeleteEvent) &#123;</span><br><span class="line">          <span class="keyword">return</span> isDeleteEvent ? -<span class="number">1</span> : +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sup;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, the <code>ReaderKey</code> and the file handler will be put into a <code>TreeMap</code>, so every time we poll for the first entry, we can get the desired file handler and read data.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrcRawRecordMerger</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;ReaderKey, ReaderPair&gt; readers = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">next</span><span class="params">(RecordIdentifier recordIdentifier, OrcStruct prev)</span> &#123;</span><br><span class="line">    Map.Entry&lt;ReaderKey, ReaderPair&gt; entry = readers.pollFirstEntry();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Select-Files"><a href="#Select-Files" class="headerlink" title="Select Files"></a>Select Files</h3><p>Previously we pointed out that different transaction files may co-exist at the same time, so Hive needs to first select the files that are valid for the latest transaction. For instance, the following directory structure is the result of these operations: two inserts, one minor compact, one major compact, and one delete.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delta_0000001_0000001_0000</span><br><span class="line">delta_0000002_0000002_0000</span><br><span class="line">delta_0000001_0000002</span><br><span class="line">base_0000002</span><br><span class="line">delete_delta_0000003_0000003_0000</span><br></pre></td></tr></table></figure><p>Filtering process:</p><ul><li>Consult the Hive Metastore to find out the valid write ID list.</li><li>Extract transaction information from files names, including file type, write ID range, and statement ID.</li><li>Select the <code>base</code> file with the maximum valid write ID.</li><li>Sort <code>delta</code> and <code>delete</code> files by write ID range:<ul><li>Smaller <code>minWID</code> orders first;</li><li>If <code>minWID</code> is the same, larger <code>maxWID</code> orders first;</li><li>Otherwise, sort by <code>stmtID</code>; files w&#x2F;o <code>stmtID</code> orders first.</li></ul></li><li>Use the <code>base</code> file‚Äôs write ID as the current write ID, then iterate and filter <code>delta</code> files:<ul><li>If <code>maxWID</code> is larger than the current write ID, keep it, and update the current write ID;</li><li>If write ID range is the same as previous, keep the file, too.</li></ul></li></ul><p>There are some special cases in this process, e.g. no <code>base</code> file, multiple statements, contains original data files, even ACID version 1 files. More details can be found in <code>AcidUtils#getAcidState</code>.</p><h3 id="Parallel-Execution"><a href="#Parallel-Execution" class="headerlink" title="Parallel Execution"></a>Parallel Execution</h3><p>When executing in parallel environment, such as multiple Hadoop mappers, <code>delta</code> files need to be re-organized. In short, <code>base</code> and <code>delta</code> files can be divided into different splits, while all <code>delete</code> files have to be available to all splits. This ensures deleted records will not be emitted.</p><p><img src="/images/hive-acid/parallel-execution.png" alt="Parallel Execution"></p><h3 id="Vectorized-Query"><a href="#Vectorized-Query" class="headerlink" title="Vectorized Query"></a>Vectorized Query</h3><p>For <a href="https://cwiki.apache.org/confluence/display/Hive/Vectorized+Query+Execution">vectoried query</a>, Hive will first try to load all <code>delete</code> files into memory and construct an optimized data structure that can be used to filter out deleted rows when processing row batches. If the <code>delete</code> files are too large, it falls back to sort-merge algorithm.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VectorizedOrcAcidRowBatchReader</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DeleteEventRegistry deleteEventRegistry;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">DeleteEventRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findDeletedRecords</span><span class="params">(ColumnVector[] cols, <span class="type">int</span> size, BitSet selectedBitSet)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ColumnizedDeleteEventRegistry</span> <span class="keyword">implements</span> <span class="title class_">DeleteEventRegistry</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SortMergedDeleteEventRegistry</span> <span class="keyword">implements</span> <span class="title class_">DeleteEventRegistry</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">next</span><span class="params">(NullWritable key, VectorizedRowBatch value)</span> &#123;</span><br><span class="line">    <span class="type">BitSet</span> <span class="variable">selectedBitSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitSet</span>(vectorizedRowBatchBase.size);</span><br><span class="line">    <span class="built_in">this</span>.deleteEventRegistry.findDeletedRecords(innerRecordIdColumnVector,</span><br><span class="line">        vectorizedRowBatchBase.size, selectedBitSet);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">setBitIndex</span> <span class="operator">=</span> selectedBitSet.nextSetBit(<span class="number">0</span>), selectedItr = <span class="number">0</span>;</span><br><span class="line">        setBitIndex &gt;= <span class="number">0</span>;</span><br><span class="line">        setBitIndex = selectedBitSet.nextSetBit(setBitIndex+<span class="number">1</span>), ++selectedItr) &#123;</span><br><span class="line">      value.selected[selectedItr] = setBitIndex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transaction-Management"><a href="#Transaction-Management" class="headerlink" title="Transaction Management"></a>Transaction Management</h2><p>Hive introduced a new lock manager to support transactional tables. <code>DbTxnManager</code> will detect the ACID operations in query plan and contact the Hive Metastore to open and commit new transactions. It also implements the read-write lock mechanism to support normal locking requirements.</p><p><img src="/images/hive-acid/transaction-management.png" alt="Transaction Management"></p><p>The Hive Metastore is responsible for allocating new transaction IDs. This is done in a database transaction so that multiple Metastore instances will not conflict with each other.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TxnHandler</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Long&gt; <span class="title function_">openTxns</span><span class="params">(Connection dbConn, Statement stmt, OpenTxnRequest rqst)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sqlGenerator.addForUpdateClause(<span class="string">&quot;select ntxn_next from NEXT_TXN_ID&quot;</span>);</span><br><span class="line">    s = <span class="string">&quot;update NEXT_TXN_ID set ntxn_next = &quot;</span> + (first + numTxns);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> first; i &lt; first + numTxns; i++) &#123;</span><br><span class="line">      txnIds.add(i);</span><br><span class="line">      rows.add(i + <span class="string">&quot;,&quot;</span> + quoteChar(TXN_OPEN) + <span class="string">&quot;,&quot;</span> + now + <span class="string">&quot;,&quot;</span> + now + <span class="string">&quot;,&quot;</span></span><br><span class="line">          + quoteString(rqst.getUser()) + <span class="string">&quot;,&quot;</span> + quoteString(rqst.getHostname()) + <span class="string">&quot;,&quot;</span> + txnType.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; queries = sqlGenerator.createInsertValuesStmt(</span><br><span class="line">        <span class="string">&quot;TXNS (txn_id, txn_state, txn_started, txn_last_heartbeat, txn_user, txn_host, txn_type)&quot;</span>, rows);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions">Hive Transactions</a></li><li><a href="https://www.slideshare.net/Hadoop_Summit/transactional-operations-in-apache-hive-present-and-future-102803358">Transactional Operations in Apache Hive</a></li><li><a href="https://orc.apache.org/docs/acid.html">ORCFile ACID Support</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://hive.apache.org/&quot;&gt;Apache Hive&lt;/a&gt; introduced transactions since version 0.13 to fully support ACID semantics on Hive table, including INSERT&amp;#x2F;UPDATE&amp;#x2F;DELETE&amp;#x2F;MERGE statements, streaming data ingestion, etc. In Hive 3.0, this feature is further improved by optimizing the underlying data file structure, reducing constraints on table scheme, and supporting predicate push down and vectorized query. Examples and setup can be found on &lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions&quot;&gt;Hive wiki&lt;/a&gt; and other &lt;a href=&quot;https://hortonworks.com/tutorial/using-hive-acid-transactions-to-insert-update-and-delete-data/&quot;&gt;tutorials&lt;/a&gt;, while this article will focus on how transactional table is saved on HDFS, and take a closer look at the read-write process.&lt;/p&gt;
&lt;h2 id=&quot;File-Structure&quot;&gt;&lt;a href=&quot;#File-Structure&quot; class=&quot;headerlink&quot; title=&quot;File Structure&quot;&gt;&lt;/a&gt;File Structure&lt;/h2&gt;&lt;h3 id=&quot;Insert-Data&quot;&gt;&lt;a href=&quot;#Insert-Data&quot; class=&quot;headerlink&quot; title=&quot;Insert Data&quot;&gt;&lt;/a&gt;Insert Data&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; employee (id &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, name string, salary &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STORED &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; ORC TBLPROPERTIES (&lt;span class=&quot;string&quot;&gt;&amp;#x27;transactional&amp;#x27;&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; employee &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Jerry&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Tom&amp;#x27;&lt;/span&gt;,   &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Kate&amp;#x27;&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;6000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;An INSERT statement is executed in a single transaction. It will create a &lt;code&gt;delta&lt;/code&gt; directory containing information about this transaction and its data.&lt;/p&gt;
&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000/_orc_acid_version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/user/hive/warehouse/employee/delta_0000001_0000001_0000/bucket_00000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The schema of this folder‚Äôs name is &lt;code&gt;delta_minWID_maxWID_stmtID&lt;/code&gt;, i.e. ‚Äúdelta‚Äù prefix, transactional writes‚Äô range (minimum and maximum write ID), and statement ID. In detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All INSERT statements will create a &lt;code&gt;delta&lt;/code&gt; directory. UPDATE statement will also create &lt;code&gt;delta&lt;/code&gt; directory right after a &lt;code&gt;delete&lt;/code&gt; directory. &lt;code&gt;delete&lt;/code&gt; directory is prefixed with ‚Äúdelete_delta‚Äù.&lt;/li&gt;
&lt;li&gt;Hive will assign a globally unique ID for every transaction, both read and write. For transactional writes like INSERT and DELETE, it will also assign a table-wise unique ID, a.k.a. a write ID. The write ID range will be encoded in the &lt;code&gt;delta&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; directory names.&lt;/li&gt;
&lt;li&gt;Statement ID is used when multiple writes into the same table happen in one transaction.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="hive" scheme="https://shzhangji.com/tags/hive/"/>
    
    <category term="hadoop" scheme="https://shzhangji.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Real-time Exactly-once ETL with Apache Flink</title>
    <link href="https://shzhangji.com/blog/2018/12/23/real-time-exactly-once-etl-with-apache-flink/"/>
    <id>https://shzhangji.com/blog/2018/12/23/real-time-exactly-once-etl-with-apache-flink/</id>
    <published>2018-12-23T13:42:44.000Z</published>
    <updated>2018-12-23T13:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Flink is another popular big data processing framework, which differs from Apache Spark in that Flink uses stream processing to mimic batch processing and provides sub-second latency along with exactly-once semantics. One of its use cases is to build a real-time data pipeline, move and transform data between different stores. This article will show you how to build such an application, and explain how Flink guarantees its correctness.</p><p><img src="/images/flink/arch.png" alt="Apache Flink"></p><h2 id="Demo-ETL-Application"><a href="#Demo-ETL-Application" class="headerlink" title="Demo ETL Application"></a>Demo ETL Application</h2><p>Let us build a project that extracts data from Kafka and loads them into HDFS. The result files should be stored in bucketed directories according to event time. Source messages are encoded in JSON, and the event time is stored as timestamp. Samples are:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;timestamp&quot;:1545184226.432,&quot;event&quot;:&quot;page_view&quot;,&quot;uuid&quot;:&quot;ac0e50bf-944c-4e2f-bbf5-a34b22718e0c&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:1545184602.640,&quot;event&quot;:&quot;adv_click&quot;,&quot;uuid&quot;:&quot;9b220808-2193-44d1-a0e9-09b9743dec55&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:1545184608.969,&quot;event&quot;:&quot;thumbs_up&quot;,&quot;uuid&quot;:&quot;b44c3137-4c91-4f36-96fb-80f56561c914&quot;&#125;</span><br></pre></td></tr></table></figure><p>The result directory structure should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/flink/event_log/dt=20181219/part-0-1</span><br><span class="line">/user/flink/event_log/dt=20181220/part-1-9</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h3><p>Flink application requires Java 8, and we can create a project from Maven template.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate \</span><br><span class="line">  -DarchetypeGroupId=org.apache.flink \</span><br><span class="line">  -DarchetypeArtifactId=flink-quickstart-java \</span><br><span class="line">  -DarchetypeVersion=1.7.0</span><br></pre></td></tr></table></figure><p>Import it into your favorite IDE, and we can see a class named <code>StreamingJob</code>. We will start from there.</p><h3 id="Kafka-Consumer-Source"><a href="#Kafka-Consumer-Source" class="headerlink" title="Kafka Consumer Source"></a>Kafka Consumer Source</h3><p>Flink provides <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.7/dev/connectors/kafka.html">native support</a> for consuming messages from Kafka. Choose the right version and add to dependencies:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.10_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We need some Kafka server to bootstrap this source. For testing, one can follow the Kafka <a href="https://kafka.apache.org/quickstart">official document</a> to setup a local broker. Create the source and pass the host and topic name.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">FlinkKafkaConsumer010&lt;String&gt; consumer = <span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer010</span>&lt;&gt;(</span><br><span class="line">    <span class="string">&quot;flink_test&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(), props);</span><br><span class="line">DataStream&lt;String&gt; stream = env.addSource(consumer);</span><br></pre></td></tr></table></figure><p>Flink will read data from a local Kafka broker, with topic <code>flink_test</code>, and transform it into simple strings, indicated by <code>SimpleStringSchema</code>. There are other built-in deserialization schema like JSON and Avro, or you can create a custom one.</p><h3 id="Streaming-File-Sink"><a href="#Streaming-File-Sink" class="headerlink" title="Streaming File Sink"></a>Streaming File Sink</h3><p><code>StreamingFileSink</code> is replacing the previous <code>BucketingSink</code> to store data into HDFS in different directories. The key concept here is bucket assigner, which defaults to <code>DateTimeBucketAssigner</code>, that divides messages into timed buckets according to processing time, i.e. the time when messages arrive the operator. But what we want is to divide messages by event time, so we have to write one on our own.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventTimeBucketAssigner</span> <span class="keyword">implements</span> <span class="title class_">BucketAssigner</span>&lt;String, String&gt; &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getBucketId</span><span class="params">(String element, Context context)</span> &#123;</span><br><span class="line">    <span class="type">JsonNode</span> <span class="variable">node</span> <span class="operator">=</span> mapper.readTree(element);</span><br><span class="line">    <span class="type">long</span> <span class="variable">date</span> <span class="operator">=</span> (<span class="type">long</span>) (node.path(<span class="string">&quot;timestamp&quot;</span>).floatValue() * <span class="number">1000</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">partitionValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>(date));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dt=&quot;</span> + partitionValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We create a bucket assigner that ingests a string, decodes with Jackson, extracts the timestamp, and returns the bucket name of this message. Then the sink will know where to put them. Full code can be found on GitHub (<a href="https://github.com/jizhang/java-sandbox/blob/blog-flink-etl/flink/src/main/java/flink/kafka/EventTimeBucketAssigner.java">link</a>).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StreamingFileSink&lt;String&gt; sink = StreamingFileSink</span><br><span class="line">    .forRowFormat(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/tmp/kafka-loader&quot;</span>), <span class="keyword">new</span> <span class="title class_">SimpleStringEncoder</span>&lt;String&gt;())</span><br><span class="line">    .withBucketAssigner(<span class="keyword">new</span> <span class="title class_">EventTimeBucketAssigner</span>())</span><br><span class="line">    .build();</span><br><span class="line">stream.addSink(sink);</span><br></pre></td></tr></table></figure><p>There is also a <code>forBulkFormat</code>, if you prefer storing data in a more compact way like Parquet.</p><p>A note on <code>StreamingFileSink</code> though, it only works with Hadoop 2.7 and above, because it requires the file system supporting <code>truncate</code>, which helps recovering the writing process from the last checkpoint.</p><h3 id="Enable-Checkpointing"><a href="#Enable-Checkpointing" class="headerlink" title="Enable Checkpointing"></a>Enable Checkpointing</h3><p>So far, the application can be put into work by invoking <code>env.execute()</code>, but it only guarantees at-least-once semantics. To achieve exactly-once, we simply turn on Flink‚Äôs checkpointing:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env.enableCheckpointing(<span class="number">60_000</span>);</span><br><span class="line">env.setStateBackend((StateBackend) <span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;/tmp/flink/checkpoints&quot;</span>));</span><br><span class="line">env.getCheckpointConfig().enableExternalizedCheckpoints(</span><br><span class="line">    ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION);</span><br></pre></td></tr></table></figure><p>Checkpoint is Flink‚Äôs solution to fault tolerance, which we will cover later. Here we switch the state backend from default <code>MemoryStateBackend</code> to <code>FsStateBackend</code>, that stores state into filesystem like HDFS, instead of in memory, to help surviving job manager failure. Flink also recommends using <code>RocksDBStateBackend</code>, when job state is very large and requires incremental checkpointing.</p><h3 id="Submit-and-Manage-Jobs"><a href="#Submit-and-Manage-Jobs" class="headerlink" title="Submit and Manage Jobs"></a>Submit and Manage Jobs</h3><p>Flink application can be directly run in IDE, or you can setup a local <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.7/ops/deployment/cluster_setup.html">standalone cluster</a> and submit jobs with Flink CLI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flink run -c flink.kafka.KafkaLoader target/sandbox-flink-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>We can check out the job information in Flink dashboard:</p><p><img src="/images/flink/dashboard.png" alt="Flink Dashboard"></p><h4 id="Cancel-and-Resume-Job-with-Savepoint"><a href="#Cancel-and-Resume-Job-with-Savepoint" class="headerlink" title="Cancel and Resume Job with Savepoint"></a>Cancel and Resume Job with Savepoint</h4><p>To cancel or restart the job, say we want to upgrade the code logic, we need to create a savepoint. A savepoint is like a checkpoint, storing state of the running tasks. But savepoint is usually manually created, for planned backup or upgrade, while checkpoint is managed by Flink to provide fault tolerance. The <code>cancel</code> sub-command accepts <code>-s</code> option to write savepoint into some directory.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bin/flink cancel -s /tmp/flink/savepoints 1253cc85e5c702dbe963dd7d8d279038</span><br><span class="line">Cancelled job 1253cc85e5c702dbe963dd7d8d279038. Savepoint stored in file:/tmp/flink/savepoints/savepoint-1253cc-0df030f4f2ee.</span><br></pre></td></tr></table></figure><p>For our ETL application, savepoint will include current Kafka offsets, in-progress output file names, etc. To resume from a savepoint, pass <code>-s</code> to <code>run</code> sub-command. The application will start from the savepoint, i.e. consume messages right after the saved offsets, without losing or duplicating data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -s /tmp/flink/savepoints/savepoint-1253cc-0df030f4f2ee -c flink.kafka.KafkaLoader target/sandbox-flink-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h4 id="YARN-Support"><a href="#YARN-Support" class="headerlink" title="YARN Support"></a>YARN Support</h4><p>Running Flink jobs on YARN also uses <code>flink run</code>. Replace the file paths with HDFS prefix, re-package and run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ export HADOOP_CONF_DIR=/path/to/hadoop/conf</span><br><span class="line">$ bin/flink run -m yarn-cluster -c flink.kafka.KafkaLoader target/sandbox-flink-0.0.1-SNAPSHOT.jar</span><br><span class="line">Submitted application application_1545534487726_0001</span><br></pre></td></tr></table></figure><p>Flink dashboard will run in YARN application master. The returned application ID can be used to manage the jobs through Flink CLI:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/flink cancel -s hdfs://localhost:9000/tmp/flink/savepoints -yid application_1545534487726_0001 84de00a5e193f26c937f72a9dc97f386</span><br></pre></td></tr></table></figure><h2 id="How-Flink-Guarantees-Exactly-once-Semantics"><a href="#How-Flink-Guarantees-Exactly-once-Semantics" class="headerlink" title="How Flink Guarantees Exactly-once Semantics"></a>How Flink Guarantees Exactly-once Semantics</h2><p>Flink streaming application can be divided into three parts, source, process, and sink. Different sources and sinks, or <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.7/dev/connectors/guarantees.html">connectors</a>, give different guarantees, and the Flink stream processing gives either at-least-once or exactly-once semantics, based on whether checkpointing is enabled.</p><h3 id="Stream-Processing-with-Checkpointing"><a href="#Stream-Processing-with-Checkpointing" class="headerlink" title="Stream Processing with Checkpointing"></a>Stream Processing with Checkpointing</h3><p>Flink‚Äôs checkpointing mechanism is based on Chandy-Lamport algorithm. It periodically inserts light-weight barriers into data stream, dividing the stream into sets of records. After an operator has processed all records in the current set, a checkpoint is made and sent to the coordinator, i.e. job manager. Then the operator will send this barrier to its down-streams. When all sinks finish checkpointing, this checkpoint is marked as completed, which means all data before the checkpoint has been properly processed, all operator states are saved, and the application can recover from this checkpoint when encountering failures.</p><p><img src="/images/flink/stream-barrier.png" alt="Stream Barrier"></p><p>For operators with multiple up-streams, a technique called stream aligning is applied. If one of the up-streams is delayed, the operator will stop processing data from other up-streams, until the slow one catches up. This guarantees exactly-once semantics of the operator state, but will certainly introduce some latency. Apart from this <code>EXACTLY_ONCE</code> mode of checkpointing, Flink also provides <code>AT_LEAST_ONCE</code> mode, to minimize the delay. One can refer to <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.7/internals/stream_checkpointing.html">document</a> for further details.</p><h3 id="Rewindable-Data-Source"><a href="#Rewindable-Data-Source" class="headerlink" title="Rewindable Data Source"></a>Rewindable Data Source</h3><p>When recovering from the last checkpoint, Flink needs to re-fetch some messages, and data source like Kafka supports consuming messages from given offsets. In detail, <code>FlinkKafkaConsumer</code> implements the <code>CheckpointedFunction</code> and stores topic name, partition ID, and offsets in operator state.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FlinkKafkaConsumerBase</span> <span class="keyword">implements</span> <span class="title class_">CheckpointedFunction</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeState</span><span class="params">(FunctionInitializationContext context)</span> &#123;</span><br><span class="line">    <span class="type">OperatorStateStore</span> <span class="variable">stateStore</span> <span class="operator">=</span> context.getOperatorStateStore();</span><br><span class="line">    <span class="built_in">this</span>.unionOffsetStates = stateStore.getUnionListState(<span class="keyword">new</span> <span class="title class_">ListStateDescriptor</span>&lt;&gt;(</span><br><span class="line">        OFFSETS_STATE_NAME,</span><br><span class="line">        TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;Tuple2&lt;KafkaTopicPartition, Long&gt;&gt;() &#123;&#125;)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context.isRestored()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Tuple2&lt;KafkaTopicPartition, Long&gt; kafkaOffset : unionOffsetStates.get()) &#123;</span><br><span class="line">        restoredState.put(kafkaOffset.f0, kafkaOffset.f1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">snapshotState</span><span class="params">(FunctionSnapshotContext context)</span> &#123;</span><br><span class="line">    unionOffsetStates.clear();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;KafkaTopicPartition, Long&gt; kafkaTopicPartitionLongEntry : currentOffsets.entrySet()) &#123;</span><br><span class="line">  unionOffsetStates.add(Tuple2.of(kafkaTopicPartitionLongEntry.getKey(),</span><br><span class="line">          kafkaTopicPartitionLongEntry.getValue()));</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When resuming a job from a savepoint, you can find the following lines in task manager logs, indicating that the source will consume from the offsets that are restored from checkpoint.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-12-23 10:56:47,380 INFO FlinkKafkaConsumerBase</span><br><span class="line">  Consumer subtask 0 will start reading 2 partitions with offsets in restored state:</span><br><span class="line">    &#123;KafkaTopicPartition&#123;topic=&#x27;flink_test&#x27;, partition=1&#125;=725,</span><br><span class="line">     KafkaTopicPartition&#123;topic=&#x27;flink_test&#x27;, partition=0&#125;=721&#125;</span><br></pre></td></tr></table></figure><h3 id="Recover-In-progress-Output-Files"><a href="#Recover-In-progress-Output-Files" class="headerlink" title="Recover In-progress Output Files"></a>Recover In-progress Output Files</h3><p>As the application runs, <code>StreamingFileSink</code> will first write to a temporary file, prefixed with dot and suffixed with <code>in-progress</code>. The in-progress files are renamed to normal files according to some <code>RollingPolicy</code>, which defaults to both time-based (60 seconds) and size-based (128 MB). When task failure happens, or job is canceled, the in-progress files are simply closed. During recovery, the sink can retrieve in-progress file names from checkpointed state, truncate the files to a specific length, so that they do not contain any data after the checkpoint, and then the stream processing can resume.</p><p>Take Hadoop file system for instance, the recovering process happens in <code>HadoopRecoverableFsDataOutputStream</code> class constructor. It is invoked with a <code>HadoopFsRecoverable</code> object that contains the temporary file name, target name, and offset. This object is a member of <code>BucketState</code>, which is stored in operator state.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HadoopRecoverableFsDataOutputStream(FileSystem fs, HadoopFsRecoverable recoverable) &#123;</span><br><span class="line">  <span class="built_in">this</span>.tempFile = checkNotNull(recoverable.tempFile());</span><br><span class="line">  truncate(fs, tempFile, recoverable.offset());</span><br><span class="line">  out = fs.append(tempFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>Apache Flink builds upon stream processing, state management is considered from day one, and it integrates well with Hadoop ecosystem. All of these make it a very competitive product in big data field. It is under active development, and gradually gains more features like table API, stream SQL, machine learning, etc. Big companies like Alibaba are also using and contributing to this project. It supports a wide range of use-cases, and is definitely worth a try.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apache Flink is another popular big data processing framework, which differs from Apache Spark in that Flink uses stream processing to mimic batch processing and provides sub-second latency along with exactly-once semantics. One of its use cases is to build a real-time data pipeline, move and transform data between different stores. This article will show you how to build such an application, and explain how Flink guarantees its correctness.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flink/arch.png&quot; alt=&quot;Apache Flink&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Demo-ETL-Application&quot;&gt;&lt;a href=&quot;#Demo-ETL-Application&quot; class=&quot;headerlink&quot; title=&quot;Demo ETL Application&quot;&gt;&lt;/a&gt;Demo ETL Application&lt;/h2&gt;&lt;p&gt;Let us build a project that extracts data from Kafka and loads them into HDFS. The result files should be stored in bucketed directories according to event time. Source messages are encoded in JSON, and the event time is stored as timestamp. Samples are:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;timestamp&amp;quot;:1545184226.432,&amp;quot;event&amp;quot;:&amp;quot;page_view&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;ac0e50bf-944c-4e2f-bbf5-a34b22718e0c&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;timestamp&amp;quot;:1545184602.640,&amp;quot;event&amp;quot;:&amp;quot;adv_click&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;9b220808-2193-44d1-a0e9-09b9743dec55&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;timestamp&amp;quot;:1545184608.969,&amp;quot;event&amp;quot;:&amp;quot;thumbs_up&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;b44c3137-4c91-4f36-96fb-80f56561c914&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The result directory structure should be:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/user/flink/event_log/dt=20181219/part-0-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/user/flink/event_log/dt=20181220/part-1-9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="kafka" scheme="https://shzhangji.com/tags/kafka/"/>
    
    <category term="etl" scheme="https://shzhangji.com/tags/etl/"/>
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="hdfs" scheme="https://shzhangji.com/tags/hdfs/"/>
    
    <category term="flink" scheme="https://shzhangji.com/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Spark DataSource API V2</title>
    <link href="https://shzhangji.com/blog/2018/12/08/spark-datasource-api-v2/"/>
    <id>https://shzhangji.com/blog/2018/12/08/spark-datasource-api-v2/</id>
    <published>2018-12-08T10:23:11.000Z</published>
    <updated>2018-12-08T10:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>From Spark 1.3, the team introduced a data source API to help quickly integrating various input formats with Spark SQL. But eventually this version of API became insufficient and the team needed to add a lot of internal codes to provide more efficient solutions for Spark SQL data sources. So in Spark 2.3, the second version of data source API is out, which is supposed to overcome the limitations of the previous version. In this article, I will demonstrate how to implement custom data source for Spark SQL in both V1 and V2 API, to help understanding their differences and the new API‚Äôs advantages.</p><h2 id="DataSource-V1-API"><a href="#DataSource-V1-API" class="headerlink" title="DataSource V1 API"></a>DataSource V1 API</h2><p>V1 API provides a set of abstract classes and traits. They are located in <a href="https://github.com/apache/spark/blob/v2.3.2/sql/core/src/main/scala/org/apache/spark/sql/sources/interfaces.scala">spark&#x2F;sql&#x2F;sources&#x2F;interfaces.scala</a>. Some basic APIs are:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">RelationProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span></span>(sqlContext: <span class="type">SQLContext</span>, parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRelation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqlContext</span></span>: <span class="type">SQLContext</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">schema</span></span>: <span class="type">StructType</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TableScan</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(): <span class="type">RDD</span>[<span class="type">Row</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <code>RelationProvider</code> defines a class that can create a relational data source for Spark SQL to manipulate with. It can initialize itself with provided options, such as file path or authentication. <code>BaseRelation</code> is used to define the data schema, which can be loaded from database, Parquet file, or specified by the user. This class also needs to mix-in one of the <code>Scan</code> traits, implements the <code>buildScan</code> method, and returns an RDD.</p><span id="more"></span><h3 id="JdbcSourceV1"><a href="#JdbcSourceV1" class="headerlink" title="JdbcSourceV1"></a>JdbcSourceV1</h3><p>Now we use V1 API to implement a JDBC data source. For simplicity, the table schema is hard coded, and it only supports full table scan. Complete example can be found on GitHub (<a href="https://github.com/jizhang/spark-sandbox/blob/master/src/main/scala/datasource/JdbcExampleV1.scala">link</a>), while the sample data is in <a href="https://github.com/jizhang/spark-sandbox/blob/master/data/employee.sql">here</a>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcSourceV1</span> <span class="keyword">extends</span> <span class="title">RelationProvider</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createRelation</span></span>(parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">BaseRelation</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">JdbcRelationV1</span>(parameters(<span class="string">&quot;url&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcRelationV1</span>(<span class="params">url: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">BaseRelation</span> <span class="keyword">with</span> <span class="title">TableScan</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">schema</span></span>: <span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">Seq</span>(</span><br><span class="line">    <span class="type">StructField</span>(<span class="string">&quot;id&quot;</span>, <span class="type">IntegerType</span>),</span><br><span class="line">    <span class="type">StructField</span>(<span class="string">&quot;emp_name&quot;</span>, <span class="type">StringType</span>)</span><br><span class="line">  ))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(): <span class="type">RDD</span>[<span class="type">Row</span>] = <span class="keyword">new</span> <span class="type">JdbcRDD</span>(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcRDD</span>(<span class="params">url: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">RDD</span>[<span class="type">Row</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>(): <span class="type">Iterator</span>[<span class="type">Row</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> conn = <span class="type">DriverManager</span>.getConnection(url)</span><br><span class="line">    <span class="keyword">val</span> stmt = conn.prepareStatement(<span class="string">&quot;SELECT * FROM employee&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rs = stmt.executeQuery()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Iterator</span>[<span class="type">Row</span>] &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span></span>: <span class="type">Boolean</span> = rs.next()</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>: <span class="type">Row</span> = <span class="type">Row</span>(rs.getInt(<span class="string">&quot;id&quot;</span>), rs.getString(<span class="string">&quot;emp_name&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The actual data reading happens in <code>JdbcRDD#compute</code>. It receives the connection options, possibly with pruned column list and where conditions, executes the query, and returns an iterator of <code>Row</code> objects, correspondent to the defined schema. Now we can create a <code>DataFrame</code> from this custom data source.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> df = spark.read</span><br><span class="line">  .format(<span class="string">&quot;JdbcSourceV2&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost/spark&quot;</span>)</span><br><span class="line">  .load()</span><br><span class="line"></span><br><span class="line">df.printSchema()</span><br><span class="line">df.show()</span><br></pre></td></tr></table></figure><p>The outputs are:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line"> |-- id: integer (nullable = true)</span><br><span class="line"> |-- emp_name: string (nullable = true)</span><br><span class="line"> |-- dep_name: string (nullable = true)</span><br><span class="line"> |-- salary: decimal(7,2) (nullable = true)</span><br><span class="line"> |-- age: decimal(3,0) (nullable = true)</span><br><span class="line"></span><br><span class="line">+---+--------+----------+-------+---+</span><br><span class="line">| id|emp_name|  dep_name| salary|age|</span><br><span class="line">+---+--------+----------+-------+---+</span><br><span class="line">|  1| Matthew|Management|4500.00| 55|</span><br><span class="line">|  2|  Olivia|Management|4400.00| 61|</span><br><span class="line">|  3|   Grace|Management|4000.00| 42|</span><br><span class="line">|  4|     Jim|Production|3700.00| 35|</span><br><span class="line">|  5|   Alice|Production|3500.00| 24|</span><br><span class="line">+---+--------+----------+-------+---+</span><br></pre></td></tr></table></figure><h3 id="Limitations-of-V1-API"><a href="#Limitations-of-V1-API" class="headerlink" title="Limitations of V1 API"></a>Limitations of V1 API</h3><p>As we can see, V1 API is quite straightforward and can meet the initial requirements of Spark SQL use cases. But as Spark moves forward, V1 API starts to show its limitations.</p><h4 id="Coupled-with-Higher-Level-API"><a href="#Coupled-with-Higher-Level-API" class="headerlink" title="Coupled with Higher Level API"></a>Coupled with Higher Level API</h4><p><code>createRelation</code> accepts <code>SQLContext</code> as parameter; <code>buildScan</code> returns <code>RDD</code> of <code>Row</code>; and when implementing writable data source, the <code>insert</code> method accepts <code>DataFrame</code> type.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">InsertableRelation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert</span></span>(data: <span class="type">DataFrame</span>, overwrite: <span class="type">Boolean</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>These classes are of higher level of Spark API, and some of them have already upgraded, like <code>SQLContext</code> is superceded by <code>SparkSession</code>, and <code>DataFrame</code> is now an alias of <code>Dataset[Row]</code>. Data sources should not be required to reflect these changes.</p><h4 id="Hard-to-Add-New-Push-Down-Operators"><a href="#Hard-to-Add-New-Push-Down-Operators" class="headerlink" title="Hard to Add New Push Down Operators"></a>Hard to Add New Push Down Operators</h4><p>Besides <code>TableScan</code>, V1 API provides <code>PrunedScan</code> to eliminate unnecessary columns, and <code>PrunedFilteredScan</code> to push predicates down to data source. In <code>JdbcSourceV1</code>, they are reflected in the SQL statement.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcRelationV1</span> <span class="keyword">extends</span> <span class="title">BaseRelation</span> <span class="keyword">with</span> <span class="title">PrunedFilteredScan</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(requiredColumns: <span class="type">Array</span>[<span class="type">String</span>], filters: <span class="type">Array</span>[<span class="type">Filter</span>]) = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">JdbcRDD</span>(requiredColumns, filters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcRDD</span>(<span class="params">columns: <span class="type">Array</span>[<span class="type">String</span>], filters: <span class="type">Array</span>[<span class="type">Filter</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">val</span> wheres = filters.flatMap &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">EqualTo</span>(attribute, value) =&gt; <span class="type">Some</span>(<span class="string">s&quot;<span class="subst">$attribute</span> = &#x27;<span class="subst">$value</span>&#x27;&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> sql = <span class="string">s&quot;SELECT <span class="subst">$&#123;columns.mkString(&quot;, &quot;)&#125;</span> FROM employee WHERE <span class="subst">$&#123;wheres.mkString(&quot; AND &quot;)&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What if we need to push down a new operator like <code>limit</code>? It will introduce a whole new set of <code>Scan</code> traits.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">LimitedScan</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(limit: <span class="type">Int</span>): <span class="type">RDD</span>[<span class="type">Row</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">PrunedLimitedScan</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(requiredColumns: <span class="type">Array</span>[<span class="type">String</span>], limit: <span class="type">Int</span>): <span class="type">RDD</span>[<span class="type">Row</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">PrunedFilteredLimitedScan</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildScan</span></span>(requiredColumns: <span class="type">Array</span>[<span class="type">String</span>], filters: <span class="type">Array</span>[<span class="type">Filter</span>], limit: <span class="type">Int</span>): <span class="type">RDD</span>[<span class="type">Row</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hard-to-Pass-Partition-Info"><a href="#Hard-to-Pass-Partition-Info" class="headerlink" title="Hard to Pass Partition Info"></a>Hard to Pass Partition Info</h4><p>For data sources that support partitioning like HDFS and Kafka, V1 API does not provide native support for partitioning and data locality. We need to achieve this by extending the RDD class. For instance, some Kafka topic contains several partitions, and we want the data reading task to be run on the servers where leader brokers reside.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaPartition</span>(<span class="params">partitionId: <span class="type">Int</span>, leaderHost: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Partition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span>: <span class="type">Int</span> = partitionId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaRDD</span>(<span class="params">sc: <span class="type">SparkContext</span></span>) <span class="keyword">extends</span> <span class="title">RDD</span>[<span class="type">Row</span>](<span class="params">sc, <span class="type">Nil</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getPartitions</span></span>: <span class="type">Array</span>[<span class="type">Partition</span>] = <span class="type">Array</span>(</span><br><span class="line">    <span class="comment">// populate with Kafka PartitionInfo</span></span><br><span class="line">    <span class="type">KafkaPartition</span>(<span class="number">0</span>, <span class="string">&quot;broker_0&quot;</span>),</span><br><span class="line">    <span class="type">KafkaPartition</span>(<span class="number">1</span>, <span class="string">&quot;broker_1&quot;</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPreferredLocations</span></span>(split: <span class="type">Partition</span>): <span class="type">Seq</span>[<span class="type">String</span>] = <span class="type">Seq</span>(</span><br><span class="line">    split.asInstanceOf[<span class="type">KafkaPartition</span>].leaderHost</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Besides, some database like Cassandra distributes data by primary key. If the query pipeline contains grouping on the columns, this information can be used by the optimizer to avoid shuffling. V2 API supports this with a dedicated trait.</p><h4 id="Lack-of-Transactional-Writing"><a href="#Lack-of-Transactional-Writing" class="headerlink" title="Lack of Transactional Writing"></a>Lack of Transactional Writing</h4><p>Spark tasks may fail, and with V1 API there will be partially written data. For file systems like HDFS, we can put a <code>_SUCCESS</code> file in the output directory to indicate if the job finishes successfully, but this process needs to be implemented by users, while V2 API provides explicit interfaces to support transactional writing.</p><h4 id="Lack-of-Columnar-and-Streaming-Support"><a href="#Lack-of-Columnar-and-Streaming-Support" class="headerlink" title="Lack of Columnar and Streaming Support"></a>Lack of Columnar and Streaming Support</h4><p>Columnar data and stream processing are both added to Spark SQL without using V1 API. Current implementations like <code>ParquetFileFormat</code> and <code>KafkaSource</code> are written in dedicated codes with internal APIs. These features are also addressed by V2 API.</p><h2 id="DataSource-V2-API"><a href="#DataSource-V2-API" class="headerlink" title="DataSource V2 API"></a>DataSource V2 API</h2><p>V2 API starts with a marker interface <code>DataSourceV2</code>. The class needs to be mixed-in with either <code>ReadSupport</code> or <code>WriteSupport</code>. <code>ReadSupport</code> interface, for instance, creates a <code>DataSourceReader</code> with initialization options; <code>DataSourceReader</code> reads schema of the data source, and returns a list of <code>DataReaderFactory</code>; the factory will create the actual <code>DataReader</code>, which works like an iterator. Besides, <code>DataSourceReader</code> can mix-in various <code>Support</code> interfaces, to apply query optimizations like operator push-down and columnar scan. For <code>WriteSupport</code> interfaces, the hierarchy is similar. All of them are written in Java for better interoperability.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSourceV2</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadSupport</span> <span class="keyword">extends</span> <span class="title class_">DataSourceV2</span> &#123;</span><br><span class="line">  DataSourceReader <span class="title function_">createReader</span><span class="params">(DataSourceOptions options)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSourceReader</span> &#123;</span><br><span class="line">  StructType <span class="title function_">readSchema</span><span class="params">()</span>;</span><br><span class="line">  List&lt;DataReaderFactory&lt;Row&gt;&gt; <span class="title function_">createDataReaderFactories</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SupportsPushDownRequiredColumns</span> <span class="keyword">extends</span> <span class="title class_">DataSourceReader</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">pruneColumns</span><span class="params">(StructType requiredSchema)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataReaderFactory</span>&lt;T&gt; &#123;</span><br><span class="line">  DataReader&lt;T&gt; <span class="title function_">createDataReader</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataReader</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">  T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may notice that <code>DataSourceReader#createDataReaderFactories</code> still relies on <code>Row</code> class, because currently only <code>Row</code> is supported, and V2 API is still marked as <code>Evolving</code>.</p><h3 id="JdbcSourceV2"><a href="#JdbcSourceV2" class="headerlink" title="JdbcSourceV2"></a>JdbcSourceV2</h3><p>Let us rewrite the JDBC data source with V2 API. The following is an abridged example of full table scan. Complete code can be found on GitHub (<a href="https://github.com/jizhang/spark-sandbox/blob/master/src/main/scala/datasource/JdbcExampleV2.scala">link</a>).</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcDataSourceReader</span> <span class="keyword">extends</span> <span class="title">DataSourceReader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">readSchema</span> </span>= <span class="type">StructType</span>(<span class="type">Seq</span>(</span><br><span class="line">    <span class="type">StructField</span>(<span class="string">&quot;id&quot;</span>, <span class="type">IntegerType</span>),</span><br><span class="line">    <span class="type">StructField</span>(<span class="string">&quot;emp_name&quot;</span>, <span class="type">StringType</span>)</span><br><span class="line">  ))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createDataReaderFactories</span></span>() = &#123;</span><br><span class="line">    <span class="type">Seq</span>(<span class="keyword">new</span> <span class="type">JdbcDataReaderFactory</span>(url)).asJava</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcDataReader</span>(<span class="params">url: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">DataReader</span>[<span class="type">Row</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> conn: <span class="type">Connection</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> rs: <span class="type">ResultSet</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">if</span> (rs == <span class="literal">null</span>) &#123;</span><br><span class="line">      conn = <span class="type">DriverManager</span>.getConnection(url)</span><br><span class="line">      <span class="keyword">val</span> stmt = conn.prepareStatement(<span class="string">&quot;SELECT * FROM employee&quot;</span>)</span><br><span class="line">      rs = stmt.executeQuery()</span><br><span class="line">    &#125;</span><br><span class="line">    rs.next()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>() = <span class="type">Row</span>(rs.getInt(<span class="string">&quot;id&quot;</span>), rs.getString(<span class="string">&quot;emp_name&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prune-Columns"><a href="#Prune-Columns" class="headerlink" title="Prune Columns"></a>Prune Columns</h4><p><code>DataSourceReader</code> can mix-in the <code>SupportsPushDownRequiredColumns</code> trait. Spark will invoke the <code>pruneColumns</code> method with required <code>StructType</code>, and <code>DataSourceReader</code> can pass it to underlying <code>DataReader</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcDataSourceReader</span> <span class="keyword">with</span> <span class="title">SupportsPushDownRequiredColumns</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> requiredSchema = <span class="type">JdbcSourceV2</span>.schema</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pruneColumns</span></span>(requiredSchema: <span class="type">StructType</span>)  = &#123;</span><br><span class="line">    <span class="keyword">this</span>.requiredSchema = requiredSchema</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createDataReaderFactories</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">val</span> columns = requiredSchema.fields.map(_.name)</span><br><span class="line">    <span class="type">Seq</span>(<span class="keyword">new</span> <span class="type">JdbcDataReaderFactory</span>(columns)).asJava</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can examine the execution plan with <code>df.explain(true)</code>. For instance, the optimized logical plan of query <code>SELECT emp_name, age FROM employee</code> shows column pruning is pushed down to the data source.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">== Analyzed Logical Plan ==</span><br><span class="line">emp_name: string, age: decimal(3,0)</span><br><span class="line">Project [emp_name#1, age#4]</span><br><span class="line">+- SubqueryAlias employee</span><br><span class="line">   +- DataSourceV2Relation [id#0, emp_name#1, dep_name#2, salary#3, age#4], datasource.JdbcDataSourceReader@15ceeb42</span><br><span class="line"></span><br><span class="line">== Optimized Logical Plan ==</span><br><span class="line">Project [emp_name#1, age#4]</span><br><span class="line">+- DataSourceV2Relation [emp_name#1, age#4], datasource.JdbcDataSourceReader@15ceeb42</span><br></pre></td></tr></table></figure><h4 id="Push-Down-Filters"><a href="#Push-Down-Filters" class="headerlink" title="Push Down Filters"></a>Push Down Filters</h4><p>Similarly, with <code>SupportsPushDownFilters</code>, we can add where conditions to the underlying SQL query.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbcDataSourceReader</span> <span class="keyword">with</span> <span class="title">SupportsPushDownFilters</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> filters = <span class="type">Array</span>.empty[<span class="type">Filter</span>]</span><br><span class="line">  <span class="keyword">var</span> wheres = <span class="type">Array</span>.empty[<span class="type">String</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pushFilters</span></span>(filters: <span class="type">Array</span>[<span class="type">Filter</span>]) = &#123;</span><br><span class="line">    <span class="keyword">val</span> supported = <span class="type">ListBuffer</span>.empty[<span class="type">Filter</span>]</span><br><span class="line">    <span class="keyword">val</span> unsupported = <span class="type">ListBuffer</span>.empty[<span class="type">Filter</span>]</span><br><span class="line">    <span class="keyword">val</span> wheres = <span class="type">ListBuffer</span>.empty[<span class="type">String</span>]</span><br><span class="line"></span><br><span class="line">    filters.foreach &#123;</span><br><span class="line">      <span class="keyword">case</span> filter: <span class="type">EqualTo</span> =&gt; &#123;</span><br><span class="line">        supported += filter</span><br><span class="line">        wheres += <span class="string">s&quot;<span class="subst">$&#123;filter.attribute&#125;</span> = &#x27;<span class="subst">$&#123;filter.value&#125;</span>&#x27;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> filter =&gt; unsupported += filter</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.filters = supported.toArray</span><br><span class="line">    <span class="keyword">this</span>.wheres = wheres.toArray</span><br><span class="line">    unsupported.toArray</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pushedFilters</span> </span>= filters</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createDataReaderFactories</span></span>() = &#123;</span><br><span class="line">    <span class="type">Seq</span>(<span class="keyword">new</span> <span class="type">JdbcDataReaderFactory</span>(wheres)).asJava</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Multiple-Partitions"><a href="#Multiple-Partitions" class="headerlink" title="Multiple Partitions"></a>Multiple Partitions</h4><p><code>createDataReaderFactories</code> returns a list. Each reader will output data for an RDD partition. Say we want to parallelize the data reading tasks, we can divide the records into two parts, according to primary key ranges.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataReaderFactories</span></span>() = &#123;</span><br><span class="line">  <span class="type">Seq</span>((<span class="number">1</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">11</span>)).map &#123; <span class="keyword">case</span> (minId, maxId) =&gt;</span><br><span class="line">    <span class="keyword">val</span> partition = <span class="string">s&quot;id BETWEEN <span class="subst">$minId</span> AND <span class="subst">$maxId</span>&quot;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">JdbcDataReaderFactory</span>(partition)</span><br><span class="line">  &#125;.asJava</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Transactional-Write"><a href="#Transactional-Write" class="headerlink" title="Transactional Write"></a>Transactional Write</h3><p>V2 API provides two sets of <code>commit</code> &#x2F; <code>abort</code> methods to implement transactional writes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSourceWriter</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(WriterCommitMessage[] messages)</span>;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">abort</span><span class="params">(WriterCommitMessage[] messages)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataWriter</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T record)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">  WriterCommitMessage <span class="title function_">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">abort</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DataSourceWriter</code> is running on Spark driver, <code>DataWriter</code> on executor. When <code>DataWriter</code> succeeds in writing, it sends commit message to driver, and after <code>DataSourceWriter</code> collects all writers‚Äô commit messages, it will do the final commit. If the writer task fails, <code>abort</code> will be called, and a new task will be retried. When the retries hit the maximum, <code>abort</code> will be called on all tasks.</p><h3 id="Columnar-and-Streaming-Support"><a href="#Columnar-and-Streaming-Support" class="headerlink" title="Columnar and Streaming Support"></a>Columnar and Streaming Support</h3><p>These features are currently still in experimental status and there is no concrete implementation yet. Briefly, <code>DataSourceReader</code> can mix-in <code>SupportsScanColumnarBatch</code> trait and creates <code>DataReaderFactory</code> that handles <code>ColumnarBatch</code>, an interface that Spark uses to represent columnar data. For streaming support, there are <code>MicroBatchReader</code> and <code>ContinuousReader</code> traits. One can refer to the <a href="https://github.com/apache/spark/blob/v2.3.2/sql/core/src/test/scala/org/apache/spark/sql/sources/v2/DataSourceV2Suite.scala">unit tests</a> for more details.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.madhukaraphatak.com/spark-datasource-v2-part-1/">http://blog.madhukaraphatak.com/spark-datasource-v2-part-1/</a></li><li><a href="https://databricks.com/session/apache-spark-data-source-v2">https://databricks.com/session/apache-spark-data-source-v2</a></li><li><a href="https://databricks.com/blog/2015/01/09/spark-sql-data-sources-api-unified-data-access-for-the-spark-platform.html">https://databricks.com/blog/2015/01/09/spark-sql-data-sources-api-unified-data-access-for-the-spark-platform.html</a></li><li><a href="https://developer.ibm.com/code/2018/04/16/introducing-apache-spark-data-sources-api-v2/">https://developer.ibm.com/code/2018/04/16/introducing-apache-spark-data-sources-api-v2/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;From Spark 1.3, the team introduced a data source API to help quickly integrating various input formats with Spark SQL. But eventually this version of API became insufficient and the team needed to add a lot of internal codes to provide more efficient solutions for Spark SQL data sources. So in Spark 2.3, the second version of data source API is out, which is supposed to overcome the limitations of the previous version. In this article, I will demonstrate how to implement custom data source for Spark SQL in both V1 and V2 API, to help understanding their differences and the new API‚Äôs advantages.&lt;/p&gt;
&lt;h2 id=&quot;DataSource-V1-API&quot;&gt;&lt;a href=&quot;#DataSource-V1-API&quot; class=&quot;headerlink&quot; title=&quot;DataSource V1 API&quot;&gt;&lt;/a&gt;DataSource V1 API&lt;/h2&gt;&lt;p&gt;V1 API provides a set of abstract classes and traits. They are located in &lt;a href=&quot;https://github.com/apache/spark/blob/v2.3.2/sql/core/src/main/scala/org/apache/spark/sql/sources/interfaces.scala&quot;&gt;spark&amp;#x2F;sql&amp;#x2F;sources&amp;#x2F;interfaces.scala&lt;/a&gt;. Some basic APIs are:&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RelationProvider&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createRelation&lt;/span&gt;&lt;/span&gt;(sqlContext: &lt;span class=&quot;type&quot;&gt;SQLContext&lt;/span&gt;, parameters: &lt;span class=&quot;type&quot;&gt;Map&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;BaseRelation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseRelation&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sqlContext&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;SQLContext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;schema&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;StructType&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TableScan&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildScan&lt;/span&gt;&lt;/span&gt;(): &lt;span class=&quot;type&quot;&gt;RDD&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Row&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;code&gt;RelationProvider&lt;/code&gt; defines a class that can create a relational data source for Spark SQL to manipulate with. It can initialize itself with provided options, such as file path or authentication. &lt;code&gt;BaseRelation&lt;/code&gt; is used to define the data schema, which can be loaded from database, Parquet file, or specified by the user. This class also needs to mix-in one of the &lt;code&gt;Scan&lt;/code&gt; traits, implements the &lt;code&gt;buildScan&lt;/code&gt; method, and returns an RDD.&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="spark" scheme="https://shzhangji.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Flume Source Code: HDFS Sink</title>
    <link href="https://shzhangji.com/blog/2018/10/03/flume-source-code-hdfs-sink/"/>
    <id>https://shzhangji.com/blog/2018/10/03/flume-source-code-hdfs-sink/</id>
    <published>2018-10-03T11:34:11.000Z</published>
    <updated>2018-10-03T11:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sink is the last component of Apache Flume data flow, and it is used to output data into storages like local files, HDFS, ElasticSearch, etc. In this article, I will illustrate how Flume‚Äôs HDFS sink works, by analyzing its source code with diagrams.</p><h2 id="Sink-Component-Lifecycle"><a href="#Sink-Component-Lifecycle" class="headerlink" title="Sink Component Lifecycle"></a>Sink Component Lifecycle</h2><p>In the <a href="http://shzhangji.com/blog/2017/10/23/flume-source-code-component-lifecycle/">previous article</a>, we learnt that every Flume component implements <code>LifecycleAware</code> interface, and is started and monitored by <code>LifecycleSupervisor</code>. Sink component is not directly invoked by this supervisor, but wrapped in <code>SinkRunner</code> and <code>SinkProcessor</code> classes. Flume supports three different <a href="https://flume.apache.org/FlumeUserGuide.html#flume-sink-processors">sink processors</a>, to connect channel and sinks in different semantics. But here we only consider the <code>DefaultSinkProcessor</code>, that accepts only one sink, and we will skip the concept of sink group as well.</p><p><img src="/images/flume/sink-component-lifecycle.png" alt="Sink Component LifeCycle"></p><span id="more"></span><h2 id="HDFS-Sink-Classes"><a href="#HDFS-Sink-Classes" class="headerlink" title="HDFS Sink Classes"></a>HDFS Sink Classes</h2><p>HDFS sink‚Äôs source code locates in <code>flume-hdfs-sink</code> sub-module, and is composed of the following classes:</p><p><img src="/images/flume/hdfs-sink-classes.png" alt="HDFS Sink Classes"></p><p><code>HDFSEventSink</code> class implements the lifecycle methods, including <code>configure</code>, <code>start</code>, <code>process</code>, and <code>stop</code>. It maintains a list of <code>BucketWriter</code>, according to the output file paths, and delegates received events to them. With different implementations of <code>HDFSWriter</code>, <code>BucketWriter</code> can append data to either text file, compressed file, or sequence file.</p><h2 id="Configure-and-Start"><a href="#Configure-and-Start" class="headerlink" title="Configure and Start"></a>Configure and Start</h2><p>When Flume configuration file is loaded, <code>configure</code> method is called on every sink component. In <code>HDFSEventSink#configure</code>, it reads properties that are prefixed with <code>hdfs.</code> from the context, provides default values, and does some sanity checks. For instance, <code>batchSize</code> must be greater than 0, <code>codeC</code> must be provided when <code>fileType</code> is <code>CompressedStream</code>, etc. It also initializes a <code>SinkCounter</code> to provide various metrics for monitoring.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">  filePath = Preconditions.checkNotNull(</span><br><span class="line">      context.getString(<span class="string">&quot;hdfs.path&quot;</span>), <span class="string">&quot;hdfs.path is required&quot;</span>);</span><br><span class="line">  rollInterval = context.getLong(<span class="string">&quot;hdfs.rollInterval&quot;</span>, defaultRollInterval);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sinkCounter == <span class="literal">null</span>) &#123;</span><br><span class="line">    sinkCounter = <span class="keyword">new</span> <span class="title class_">SinkCounter</span>(getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SinkProcessor</code> will invoke the <code>HDFSEventSink#start</code> method, in which two thread pools are created. <code>callTimeoutPool</code> is used by <code>BucketWriter#callWithTimeout</code> to limit the time that HDFS calls may take, such as <a href="http://hadoop.apache.org/docs/r2.4.1/api/org/apache/hadoop/fs/FileSystem.html"><code>FileSystem#create</code></a>, or <a href="https://hadoop.apache.org/docs/r2.4.1/api/org/apache/hadoop/fs/FSDataOutputStream.html"><code>FSDataOutputStream#hflush</code></a>. <code>timedRollerPool</code> is used to schedule a periodic task to do time-based file rolling, if <code>rollInterval</code> property is provided. More details will be covered in the next section.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">  callTimeoutPool = Executors.newFixedThreadPool(threadsPoolSize,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>().setNameFormat(timeoutName).build());</span><br><span class="line">  timedRollerPool = Executors.newScheduledThreadPool(rollTimerPoolSize,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>().setNameFormat(rollerName).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process-Events"><a href="#Process-Events" class="headerlink" title="Process Events"></a>Process Events</h2><p>The <code>process</code> method contains the main logic, i.e. pull events from upstream channel and send them to HDFS. Here is the flow chart of this method.</p><p><img src="/images/flume/process-method-flow-chart.png" alt="Process Method Flow Chart"></p><h3 id="Channel-Transaction"><a href="#Channel-Transaction" class="headerlink" title="Channel Transaction"></a>Channel Transaction</h3><p>Codes are wrapped in a channel transaction, with some exception handlings. Take Kafka channel for instance, when transaction begins, it takes events without committing the offset. Only after it successfully writes these events into HDFS, the consumed offset will be sent to Kafka. And in the next transaction, it can consume messages from the new offset.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> getChannel();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> channel.getTransaction();</span><br><span class="line">transaction.begin()</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  event = channel.take();</span><br><span class="line">  bucketWriter.append(event);</span><br><span class="line">  transaction.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">  transaction.rollback();</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EventDeliveryException</span>(th);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  transaction.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Find-or-Create-BucketWriter"><a href="#Find-or-Create-BucketWriter" class="headerlink" title="Find or Create BucketWriter"></a>Find or Create BucketWriter</h3><p><code>BucketWriter</code> corresponds to an HDFS file, and the file path is generated from configuration. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1.sinks.access_log.hdfs.path = /user/flume/access_log/dt=%Y%m%d</span><br><span class="line">a1.sinks.access_log.hdfs.filePrefix = events.%[localhost]</span><br><span class="line">a1.sinks.access_log.hdfs.inUsePrefix = .</span><br><span class="line">a1.sinks.access_log.hdfs.inUseSuffix = .tmp</span><br><span class="line">a1.sinks.access_log.hdfs.rollInterval = 300</span><br><span class="line">a1.sinks.access_log.hdfs.fileType = CompressedStream</span><br><span class="line">a1.sinks.access_log.hdfs.codeC = lzop</span><br></pre></td></tr></table></figure><p>The generated file paths, temporary and final, will be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/flume/access_log/dt=20180925/.events.hostname1.1537848761307.lzo.tmp</span><br><span class="line">/user/flume/access_log/dt=20180925/events.hostname1.1537848761307.lzo</span><br></pre></td></tr></table></figure><p>Placeholders are replaced in <a href="https://flume.apache.org/releases/content/1.4.0/apidocs/org/apache/flume/formatter/output/BucketPath.html"><code>BucketPath#escapeString</code></a>. It supports three kinds of placeholders:</p><ul><li><code>%&#123;...&#125;</code>: replace with arbitrary header values;</li><li><code>%[...]</code>: currently only supports <code>%[localhost]</code>, <code>%[ip]</code>, and <code>%[fqdn]</code>;</li><li><code>%x</code>: date time patterns, which requires a <code>timestamp</code> entry in headers, or <code>useLocalTimeStamp</code> is enabled.</li></ul><p>And the prefix and suffix is added in <code>BucketWriter#open</code>. <code>counter</code> is the timestamp when this bucket is opened or re-opened, and <code>lzo</code> is the default extension of the configured compression codec.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fullFileName</span> <span class="operator">=</span> fileName + <span class="string">&quot;.&quot;</span> + counter;</span><br><span class="line">fullFileName += fileSuffix;</span><br><span class="line">fullFileName += codeC.getDefaultExtension();</span><br><span class="line">bucketPath = filePath + <span class="string">&quot;/&quot;</span> + inUsePrefix + fullFileName + inUseSuffix;</span><br><span class="line">targetPath = filePath + <span class="string">&quot;/&quot;</span> + fullFileName;</span><br></pre></td></tr></table></figure><p>If no <code>BucketWriter</code> is associated with the file path, a new one will be created. First, it creates an <code>HDFSWriter</code> corresponding to the <code>fileType</code> config. Flume supports three kinds of writers: <code>HDFSSequenceFile</code>, <code>HDFSDataStream</code>, and <code>HDFSCompressedDataStream</code>. They handle the actual writing to HDFS files, and will be assigned to the new <code>BucketWriter</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bucketWriter = sfWriters.get(lookupPath);</span><br><span class="line"><span class="keyword">if</span> (bucketWriter == <span class="literal">null</span>) &#123;</span><br><span class="line">  hdfsWriter = writerFactory.getWriter(fileType);</span><br><span class="line">  bucketWriter = <span class="keyword">new</span> <span class="title class_">BucketWriter</span>(hdfsWriter);</span><br><span class="line">  sfWriters.put(lookupPath, bucketWriter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Append-Data-and-Flush"><a href="#Append-Data-and-Flush" class="headerlink" title="Append Data and Flush"></a>Append Data and Flush</h3><p>Before appending data, <code>BucketWriter</code> will first self-check whether it is opened. If not, it will call its underlying <code>HDFSWriter</code> to open a new file on HDFS filesystem. Take <code>HDFSCompressedDataStream</code> for instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(String filePath, CompressionCodec codec)</span> &#123;</span><br><span class="line">  <span class="type">FileSystem</span> <span class="variable">hdfs</span> <span class="operator">=</span> dstPath.getFileSystem(conf);</span><br><span class="line">  fsOut = hdfs.append(dstPath)</span><br><span class="line">  compressor = CodedPool.getCompressor(codec, conf);</span><br><span class="line">  cmpOut = codec.createOutputStream(fsOut, compressor);</span><br><span class="line">  serializer = EventSerializerFactory.getInstance(serializerType, cmpOut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">append</span><span class="params">(Event e)</span> <span class="keyword">throws</span> IO Exception &#123;</span><br><span class="line">  serializer.write(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flume‚Äôs default <code>serializerType</code> is <code>TEXT</code>, i.e. <a href="https://flume.apache.org/releases/content/1.4.0/apidocs/org/apache/flume/serialization/BodyTextEventSerializer.html">BodyTextEventSerializer</a> that simply writes the event content to the output stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Event e)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  out.write(e.getBody());</span><br><span class="line">  <span class="keyword">if</span> (appendNewline) &#123;</span><br><span class="line">    out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When <code>BucketWriter</code> is about to close or re-open, it calls <code>sync</code> on <code>HDFSWrtier</code>, which in turn calls <code>flush</code> on serializer and underlying output stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  serializer.flush();</span><br><span class="line">  compOut.finish();</span><br><span class="line">  fsOut.flush();</span><br><span class="line">  hflushOrSync(fsOut);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From Hadoop 0.21.0, the <a href="https://hadoop.apache.org/docs/r2.4.1/api/org/apache/hadoop/fs/Syncable.html"><code>Syncable#sync</code></a> method is divided into <code>hflush</code> and <code>hsync</code> methods. Former just flushes data out of client‚Äôs buffer, while latter guarantees data is synced to disk device. In order to handle both old and new API, Flume will use Java reflection to determine whether <code>hflush</code> exists, or fall back to <code>sync</code>. The <code>flushOrSync</code> method will invoke the right method.</p><h3 id="File-Rotation"><a href="#File-Rotation" class="headerlink" title="File Rotation"></a>File Rotation</h3><p>In HDFS sink, files can be rotated by file size, event count, or time interval. <code>BucketWriter#shouldRotate</code> is called in every <code>append</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldRotate</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">doRotate</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> ((rollCount &gt; <span class="number">0</span>) &amp;&amp; (rollCount &lt;= eventCounter)) &#123;</span><br><span class="line">    doRotate = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((rollSize &gt; <span class="number">0</span>) &amp;&amp; (rollSize &lt;= processSize)) &#123;</span><br><span class="line">    doRotate = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> doRotate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time-based rolling, on the other hand, is scheduled in the previously mentioned <code>timedRollerPool</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">  <span class="keyword">if</span> (rollInterval &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Callable&lt;Void&gt; action = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Void&gt;() &#123;</span><br><span class="line">      <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        close(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    timedRollFuture = timedRollerPool.schedule(action, rollInterval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Close-and-Stop"><a href="#Close-and-Stop" class="headerlink" title="Close and Stop"></a>Close and Stop</h2><p>In <code>HDFSEventSink#close</code>, it iterates every <code>BucketWriter</code> and calls its <code>close</code> method, which in turn calls its underlying <code>HDFSWriter</code>‚Äòs <code>close</code> method. What it does is mostly like <code>flush</code> method, but also closes the output stream and invokes some callback functions, like removing current <code>BucketWriter</code> from the <code>sfWriters</code> hash map.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">boolean</span> callCloseCallback)</span> &#123;</span><br><span class="line">  writer.close();</span><br><span class="line">  timedRollFuture.cancel(<span class="literal">false</span>);</span><br><span class="line">  onCloseCallback.run(onCloseCallbackPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>onCloseCallback</code> is passed from <code>HDFSEventSink</code> when initializing the <code>BucketWriter</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WriterCallback</span> <span class="variable">closeCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriterCallback</span>() &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String bucketPath)</span> &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (sfWritersLock) &#123;</span><br><span class="line">        sfWriters.remove(bucketPath);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketWriter = <span class="keyword">new</span> <span class="title class_">BucketWriter</span>(lookPath, closeCallback);</span><br></pre></td></tr></table></figure><p>After all <code>BucketWriter</code>s are closed, <code>HDFSEventSink</code> then shutdown the <code>callTimeoutPool</code> and <code>timedRollerPool</code> executer services.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService[] toShutdown = &#123; callTimeoutPool, timedRollerPool &#125;;</span><br><span class="line"><span class="keyword">for</span> (ExecutorService execService : toShutdown) &#123;</span><br><span class="line">  execService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://flume.apache.org/FlumeUserGuide.html#hdfs-sink">https://flume.apache.org/FlumeUserGuide.html#hdfs-sink</a></li><li><a href="https://github.com/apache/flume">https://github.com/apache/flume</a></li><li><a href="https://data-flair.training/blogs/flume-sink-processors/">https://data-flair.training/blogs/flume-sink-processors/</a></li><li><a href="http://hadoop-hbase.blogspot.com/2012/05/hbase-hdfs-and-durable-sync.html">http://hadoop-hbase.blogspot.com/2012/05/hbase-hdfs-and-durable-sync.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Sink is the last component of Apache Flume data flow, and it is used to output data into storages like local files, HDFS, ElasticSearch, etc. In this article, I will illustrate how Flume‚Äôs HDFS sink works, by analyzing its source code with diagrams.&lt;/p&gt;
&lt;h2 id=&quot;Sink-Component-Lifecycle&quot;&gt;&lt;a href=&quot;#Sink-Component-Lifecycle&quot; class=&quot;headerlink&quot; title=&quot;Sink Component Lifecycle&quot;&gt;&lt;/a&gt;Sink Component Lifecycle&lt;/h2&gt;&lt;p&gt;In the &lt;a href=&quot;http://shzhangji.com/blog/2017/10/23/flume-source-code-component-lifecycle/&quot;&gt;previous article&lt;/a&gt;, we learnt that every Flume component implements &lt;code&gt;LifecycleAware&lt;/code&gt; interface, and is started and monitored by &lt;code&gt;LifecycleSupervisor&lt;/code&gt;. Sink component is not directly invoked by this supervisor, but wrapped in &lt;code&gt;SinkRunner&lt;/code&gt; and &lt;code&gt;SinkProcessor&lt;/code&gt; classes. Flume supports three different &lt;a href=&quot;https://flume.apache.org/FlumeUserGuide.html#flume-sink-processors&quot;&gt;sink processors&lt;/a&gt;, to connect channel and sinks in different semantics. But here we only consider the &lt;code&gt;DefaultSinkProcessor&lt;/code&gt;, that accepts only one sink, and we will skip the concept of sink group as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/flume/sink-component-lifecycle.png&quot; alt=&quot;Sink Component LifeCycle&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://shzhangji.com/categories/Big-Data/"/>
    
    
    <category term="flume" scheme="https://shzhangji.com/tags/flume/"/>
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="hdfs" scheme="https://shzhangji.com/tags/hdfs/"/>
    
  </entry>
  
  <entry>
    <title>How to Avoid NullPointerException</title>
    <link href="https://shzhangji.com/blog/2018/09/20/how-to-avoid-null-pointer-exception/"/>
    <id>https://shzhangji.com/blog/2018/09/20/how-to-avoid-null-pointer-exception/</id>
    <published>2018-09-20T03:25:16.000Z</published>
    <updated>2018-09-20T03:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>NullPointerException</code> happens when you dereference a possible <code>null</code> object without checking it. It‚Äôs a common exception that every Java programmer may encounter in daily work. There‚Äôre several strategies that can help us avoid this exception, making our codes more robust. In this article, I will list both traditional ways and those with tools and new features introduced by recent version of Java.</p><h2 id="Runtime-Check"><a href="#Runtime-Check" class="headerlink" title="Runtime Check"></a>Runtime Check</h2><p>The most obvious way is to use <code>if (obj == null)</code> to check every variable you need to use, either from function argument, return value, or instance field. When you receive a <code>null</code> object, you can throw a different, more informative exception like <code>IllegalArgumentException</code>. There are some library functions that can make this process easier, like <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html"><code>Objects#requireNonNull</code></a>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObjects</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">checked</span> <span class="operator">=</span> Objects.requireNonNull(arg, <span class="string">&quot;arg must not be null&quot;</span>);</span><br><span class="line">  checked.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or use Guava‚Äôs <a href="https://github.com/google/guava/wiki/PreconditionsExplained"><code>Preconditions</code></a> package, which provides all kinds of arguments checking facilities:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGuava</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">checked</span> <span class="operator">=</span> Preconditions.checkNotNull(arg, <span class="string">&quot;%s must not be null&quot;</span>, <span class="string">&quot;arg&quot;</span>);</span><br><span class="line">  checked.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also let <a href="https://projectlombok.org/features/NonNull">Lombok</a> generate the check for us, which will throw a more meaningful <code>NullPointerException</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLombok</span><span class="params">(<span class="meta">@NonNull</span> Object arg)</span> &#123;</span><br><span class="line">  arg.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The generated code and exception message are as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLombokGenerated</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (arg == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;arg is marked @NonNull but is null&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  arg.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This annotation can also be added to a class field, and Lombok will check nullness for every assignment.</p><span id="more"></span><h2 id="Coding-Convention"><a href="#Coding-Convention" class="headerlink" title="Coding Convention"></a>Coding Convention</h2><p>There are some coding conventions we can use to avoid <code>NullPointerException</code>.</p><ul><li>Use methods that already guard against <code>null</code> values, such as <code>String#equals</code>, <code>String#valueOf</code>, and third party libraries that help us check whether string or collection is empty.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.equals(<span class="string">&quot;text&quot;</span>)) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;text&quot;</span>.equals(str)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123; obj.toString(); &#125;</span><br><span class="line">String.valueOf(obj); <span class="comment">// &quot;null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// from spring-core</span></span><br><span class="line">StringUtils.isEmpty(str);</span><br><span class="line">CollectionUtils.isEmpty(col);</span><br><span class="line"><span class="comment">// from guava</span></span><br><span class="line">Strings.isNullOrEmpty(str);</span><br><span class="line"><span class="comment">// from commons-collections4</span></span><br><span class="line">CollectionUtils.isEmpty(col);</span><br></pre></td></tr></table></figure><ul><li>If a method accepts nullable value, define two methods with different signatures, so as to make every parameter mandatory.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">(Object arg1)</span> &#123;</span><br><span class="line">  methodB(arg1, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">(Object arg1, Object[] arg2)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (Object obj : arg2) &#123;&#125; <span class="comment">// no null check</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>For return values, if the type is <code>Collection</code>, return an empty collection instead of null; if it‚Äôs a single object, consider throwing an exception. This approach is also suggested by <em>Effective Java</em>. Good examples come from Spring‚Äôs JdbcTemplate:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return new ArrayList&lt;&gt;() when result set is empty</span></span><br><span class="line">jdbcTemplate.queryForList(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws EmptyResultDataAccessException when record not found</span></span><br><span class="line">jdbcTemplate.queryForObject(<span class="string">&quot;SELECT 1&quot;</span>, Integer.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// works for generics</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">testReturnCollection</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-Check"><a href="#Static-Check" class="headerlink" title="Static Check"></a>Static Check</h2><p>Java has some static code analysis tools, like Eclipse IDE, SpotBugs, Checker Framework, etc. They can find out program bugs during compilation process. It would be nice to catch <code>NullPointerException</code> as early as possible, and this can be done with annotations like <code>@Nullable</code> and <code>@Nonnull</code>.</p><p>However, nullness check annotations have not been standardized yet. Though there was a <a href="https://jcp.org/en/jsr/detail?id=305">JSR 305</a> proposed back to Sep. 2006, it has been dormant ever since. A lot of third party libraries provide such annotations, and they are supported by different tools. Some popular candidates are:</p><ul><li><code>javax.annotation.Nonnull</code>, proposed by JSR 305, and its reference implementation is <code>com.google.code.findbugs.jsr305</code>.</li><li><code>org.eclipse.jdt.annotation.NonNull</code>, used by Eclipse IDE to do static nullness check.</li><li><code>edu.umd.cs.findbugs.annotations.NonNull</code>, used by SpotBugs, it depends on <code>jsr305</code>.</li><li><code>org.springframework.lang.NonNull</code>, provided by Spring Framework.</li><li><code>org.checkerframework.checker.nullness.qual.NonNull</code>, used by Checker Framework.</li><li><code>android.support.annotation.NonNull</code>, used by Android Development Toolkit.</li></ul><p>I suggest using a cross IDE solution like SpotBugs or Checker Framework, which also plays nicely with Maven.</p><h3 id="NonNull-and-CheckForNull-with-SpotBugs"><a href="#NonNull-and-CheckForNull-with-SpotBugs" class="headerlink" title="@NonNull and @CheckForNull with SpotBugs"></a><code>@NonNull</code> and <code>@CheckForNull</code> with SpotBugs</h3><p>SpotBugs is the successor of FindBugs. We can use <code>@NonNull</code> and <code>@CheckForNull</code> on method arguments or return values, so as to apply nullness check. Notably, SpotBugs does not respect <code>@Nullable</code>, which is only useful when overriding <code>@ParametersAreNullableByDefault</code>. Use <code>@CheckForNull</code> instead.</p><p>To integrate SpotBugs with Maven and Eclipse, one can refer to its <a href="https://spotbugs.readthedocs.io/en/latest/maven.html">official document</a>. Make sure you add the <code>spotbugs-annotations</code> package in Maven dependencies, which includes the nullness check annotations.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.spotbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spotbugs-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here are the examples of different scenarios.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">returnNonNull</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ERROR: returnNonNull() may return null, but is declared @Nonnull</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CheckForNull</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">returnNullable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnNullable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> returnNullable();</span><br><span class="line">  <span class="comment">// ERROR: Possible null pointer dereference due to return value of called method</span></span><br><span class="line">  System.out.println(obj.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">argumentNonNull</span><span class="params">(<span class="meta">@NonNull</span> Object arg)</span> &#123;</span><br><span class="line">  System.out.println(arg.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArgumentNonNull</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ERROR: Null passed for non-null parameter of argumentNonNull(Object)</span></span><br><span class="line">  argumentNonNull(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNullableArgument</span><span class="params">(<span class="meta">@CheckForNull</span> Object arg)</span> &#123;</span><br><span class="line">  <span class="comment">// ERROR: arg must be non-null but is marked as nullable</span></span><br><span class="line">  System.out.println(arg.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For Eclipse users, it is also possible to use its built-in nullness check along with SpotBugs. By default, Eclipse uses annotations under its own package, i.e. <code>org.eclipse.jdt.annotation.Nullable</code>, but we can easily add more annotations.</p><p><img src="/images/java-npe/eclipse.png" alt="Eclipse null analysis"></p><h3 id="NonNull-and-Nullable-with-Checker-Framework"><a href="#NonNull-and-Nullable-with-Checker-Framework" class="headerlink" title="@NonNull and @Nullable with Checker Framework"></a><code>@NonNull</code> and <code>@Nullable</code> with Checker Framework</h3><p>Checker Framework works as a plugin to the <code>javac</code> compiler, to provide type checks, detect and prevent various errors. Follow the <a href="https://checkerframework.org/manual/#maven">official document</a>, integrate Checker Framework with <code>maven-compiler-plugin</code>, and it will start to work when executing <code>mvn compile</code>. The Nullness Checker supports all kinds of annotations, from JSR 305 to Eclipse built-ins, even <code>lombok.NonNull</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.checkerframework.checker.nullness.qual.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">returnNullable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnNullable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> returnNullable();</span><br><span class="line">  <span class="comment">// ERROR: dereference of possibly-null reference obj</span></span><br><span class="line">  System.out.println(obj.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By default, Checker Framework applies <code>@NonNull</code> to all method arguments and return values. The following snippet, without any annotations, cannot pass compilation, either.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">returnNonNull</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ERROR: incompatible types in return.</span></span><br><span class="line">  <span class="comment">// found: null, required: @Initialized @NonNull Object.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">argumentNonNull</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">  System.out.println(arg.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArgumentNonNull</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ERROR: incompatible types in argument.</span></span><br><span class="line">  <span class="comment">// found: null, required: @Initialized @NonNull Object</span></span><br><span class="line">  argumentNonNull(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Checker Framework is especially useful for Spring Framework users, because from version 5.x, Spring provides built-in annotations for nullness check, and they are all over the framework code itself, mainly for Kotlin users, but we Java programmers can benefit from them, too. Take <code>StringUtils</code> class for instance, since the whole package is declared <code>@NonNull</code>, those methods with nullable argument and return values are explicitly annotated with <code>@Nullable</code>, so the following code will cause compilation failure.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defined in spring-core</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> &#123;</span><br><span class="line">  <span class="comment">// str inherits @NonNull from top-level package</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">capitalize</span><span class="params">(String str)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFilename</span><span class="params">(<span class="meta">@Nullable</span> String path)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ERROR: incompatible types in argument. found null, required @NonNull</span></span><br><span class="line">StringUtils.capitalize(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> StringUtils.getFilename(<span class="string">&quot;/path/to/file&quot;</span>);</span><br><span class="line"><span class="comment">// ERROR: dereference of possibly-null reference filename</span></span><br><span class="line">System.out.println(filename.length());</span><br></pre></td></tr></table></figure><h2 id="Optional-Class"><a href="#Optional-Class" class="headerlink" title="Optional Class"></a>Optional Class</h2><p>Java 8 introduces the <code>Optional&lt;T&gt;</code> class that can be used to wrap a nullable return value, instead of returning null or throwing an exception. On the upside, a method that returns <code>Optional</code> explicitly states it may return an empty value, so the invoker must check the presence of the value, and no NPE will be thrown. However, it does introduce more codes, and adds some overhead of object creation. So use it with caution.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; opt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create</span></span><br><span class="line">opt = Optional.empty();</span><br><span class="line">opt = Optional.of(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">opt = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test &amp; get</span></span><br><span class="line"><span class="keyword">if</span> (opt.isPresent()) &#123;</span><br><span class="line">  opt.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fall back</span></span><br><span class="line">opt.orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">opt.orElseGet(() -&gt; <span class="string">&quot;default&quot;</span>);</span><br><span class="line">opt.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">NullPointerException</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// operate</span></span><br><span class="line">opt.ifPresent(value -&gt; &#123;</span><br><span class="line">  System.out.println(value);</span><br><span class="line">&#125;);</span><br><span class="line">opt.filter(value -&gt; value.length() &gt; <span class="number">5</span>);</span><br><span class="line">opt.map(value -&gt; value.trim());</span><br><span class="line">opt.flatMap(value -&gt; &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> value.trim();</span><br><span class="line">  <span class="keyword">return</span> trimmed.isEmpty() ? Optional.empty() : Optional.of(trimmed);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Chaining of methods is a common cause of NPE, but if you have a series of methods that return <code>Optional</code>, you can chain them with <code>flatMap</code>, NPE-freely.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">zipCode</span> <span class="operator">=</span> getUser()</span><br><span class="line">    .flatMap(User::getAddress)</span><br><span class="line">    .flatMap(Address::getZipCode)</span><br><span class="line">    .orElse(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>Java 8 <a href="https://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html">Stream API</a> also uses optionals to return nullable values. For instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stringList.stream().findFirst().orElse(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">stringList.stream()</span><br><span class="line">    .max(Comparator.naturalOrder())</span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>Lastly, there are some special optional classes for primitive types, such as <code>OptionalInt</code>, <code>OptionalDouble</code>, etc. Use them whenever you find applicable.</p><h2 id="NPE-in-Other-JVM-Languages"><a href="#NPE-in-Other-JVM-Languages" class="headerlink" title="NPE in Other JVM Languages"></a>NPE in Other JVM Languages</h2><p>Scala provides an <a href="https://www.scala-lang.org/api/current/scala/Option.html"><code>Option</code></a> class similar to Java 8 <code>Optional</code>. It has two subclasses, <code>Some</code> represents an existing value, and <code>None</code> for empty result.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> opt: <span class="type">Option</span>[<span class="type">String</span>] = <span class="type">Some</span>(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">opt.getOrElse(<span class="string">&quot;default&quot;</span>)</span><br></pre></td></tr></table></figure><p>Instead of invoking <code>Option#isEmpty</code>, we can use Scala‚Äôs pattern match:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opt <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(text) =&gt; println(text)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">None</span> =&gt; println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala‚Äôs collection operations are very powerful, and <code>Option</code> can be treated as collection, so we can apply <code>filter</code>, <code>map</code>, or for-comprehension to it.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">opt.map(_.trim).filter(_.length &gt; <span class="number">0</span>).map(_.toUpperCase).getOrElse(<span class="string">&quot;DEFAULT&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> upper = <span class="keyword">for</span> &#123;</span><br><span class="line">  text &lt;- opt</span><br><span class="line">  trimmed &lt;- <span class="type">Some</span>(text.trim())</span><br><span class="line">  upper &lt;- <span class="type">Some</span>(trimmed) <span class="keyword">if</span> trimmed.length &gt; <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">yield</span> upper</span><br><span class="line">upper.getOrElse(<span class="string">&quot;DEFAULT&quot;</span>)</span><br></pre></td></tr></table></figure><p>Kotlin takes another approach. It distinguishes <a href="https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations">nullable types and non-null types</a>, and programmers are forced to check nullness before using nullable variables.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: String = <span class="string">&quot;text&quot;</span></span><br><span class="line">a = <span class="literal">null</span> <span class="comment">// Error: Null can not be a value of a non-null type String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> b: String? = <span class="string">&quot;text&quot;</span></span><br><span class="line"><span class="comment">// Error: Only safe (?.) or non-null asserted (!!.) calls are allowed</span></span><br><span class="line"><span class="comment">// on a nullable receiver of type String?</span></span><br><span class="line">println(b.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> l: <span class="built_in">Int</span>? = b?.length <span class="comment">// safe call</span></span><br><span class="line">b!!.length <span class="comment">// may throw NPE</span></span><br></pre></td></tr></table></figure><p>When calling Java methods from Kotlin, the compiler does not ensure null-safety, because every object from Java is nullable. But we can use annotations to achieve strict nullness check. Kotlin supports a wide range of <a href="https://kotlinlang.org/docs/reference/java-interop.html#nullability-annotations">annotations</a>, including those used in Spring Framework, which makes Spring API null-safe in Kotlin.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In all these solutions, I prefer the annotation approach, since it‚Äôs effective while less invasive. All public API methods should be annotated <code>@Nullable</code> or <code>@NonNull</code> so that the caller will be forced to do nullness check, making our program NPE free.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://howtodoinjava.com/java/exception-handling/how-to-effectively-handle-nullpointerexception-in-java/">https://howtodoinjava.com/java/exception-handling/how-to-effectively-handle-nullpointerexception-in-java/</a></li><li><a href="http://jmri.sourceforge.net/help/en/html/doc/Technical/SpotBugs.shtml">http://jmri.sourceforge.net/help/en/html/doc/Technical/SpotBugs.shtml</a></li><li><a href="https://dzone.com/articles/features-to-avoid-null-reference-exceptions-java-a">https://dzone.com/articles/features-to-avoid-null-reference-exceptions-java-a</a></li><li><a href="https://medium.com/@fatihcoskun/kotlin-nullable-types-vs-java-optional-988c50853692">https://medium.com/@fatihcoskun/kotlin-nullable-types-vs-java-optional-988c50853692</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;NullPointerException&lt;/code&gt; happens when you dereference a possible &lt;code&gt;null&lt;/code&gt; object without checking it. It‚Äôs a common exception that every Java programmer may encounter in daily work. There‚Äôre several strategies that can help us avoid this exception, making our codes more robust. In this article, I will list both traditional ways and those with tools and new features introduced by recent version of Java.&lt;/p&gt;
&lt;h2 id=&quot;Runtime-Check&quot;&gt;&lt;a href=&quot;#Runtime-Check&quot; class=&quot;headerlink&quot; title=&quot;Runtime Check&quot;&gt;&lt;/a&gt;Runtime Check&lt;/h2&gt;&lt;p&gt;The most obvious way is to use &lt;code&gt;if (obj == null)&lt;/code&gt; to check every variable you need to use, either from function argument, return value, or instance field. When you receive a &lt;code&gt;null&lt;/code&gt; object, you can throw a different, more informative exception like &lt;code&gt;IllegalArgumentException&lt;/code&gt;. There are some library functions that can make this process easier, like &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html&quot;&gt;&lt;code&gt;Objects#requireNonNull&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;testObjects&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Objects.requireNonNull(arg, &lt;span class=&quot;string&quot;&gt;&amp;quot;arg must not be null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  checked.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Or use Guava‚Äôs &lt;a href=&quot;https://github.com/google/guava/wiki/PreconditionsExplained&quot;&gt;&lt;code&gt;Preconditions&lt;/code&gt;&lt;/a&gt; package, which provides all kinds of arguments checking facilities:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;testGuava&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; Preconditions.checkNotNull(arg, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s must not be null&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  checked.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;We can also let &lt;a href=&quot;https://projectlombok.org/features/NonNull&quot;&gt;Lombok&lt;/a&gt; generate the check for us, which will throw a more meaningful &lt;code&gt;NullPointerException&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;testLombok&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@NonNull&lt;/span&gt; Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arg.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The generated code and exception message are as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;testLombokGenerated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;NullPointerException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;arg is marked @NonNull but is null&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arg.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This annotation can also be added to a class field, and Lombok will check nullness for every assignment.&lt;/p&gt;</summary>
    
    
    
    <category term="Programming" scheme="https://shzhangji.com/categories/Programming/"/>
    
    
    <category term="java" scheme="https://shzhangji.com/tags/java/"/>
    
    <category term="spring" scheme="https://shzhangji.com/tags/spring/"/>
    
    <category term="eclipse" scheme="https://shzhangji.com/tags/eclipse/"/>
    
  </entry>
  
</feed>
