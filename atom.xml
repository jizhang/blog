<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ji ZHANG&#39;s Blog</title>
  <subtitle>If I rest, I rust.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shzhangji.com/"/>
  <updated>2017-03-09T05:49:36.000Z</updated>
  <id>http://shzhangji.com/</id>
  
  <author>
    <name>Ji ZHANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Process Python Collections with Functional Programming</title>
    <link href="http://shzhangji.com/blog/2017/03/04/process-python-collections-with-functional-programming/"/>
    <id>http://shzhangji.com/blog/2017/03/04/process-python-collections-with-functional-programming/</id>
    <published>2017-03-04T14:32:17.000Z</published>
    <updated>2017-03-09T05:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I develop Spark applications with Scala, and it has a very powerful <a href="http://docs.scala-lang.org/overviews/collections/introduction" target="_blank" rel="external">collection system</a>, in which functional programming is certainly a key. Java 8 also introduces Lambda Expression and Stream API. In JavaScript, there is a <a href="https://lodash.com/" target="_blank" rel="external">Lodash</a> library that provides powerful tools to process arrays and objects. When my primary work language changes to Python, I am wondering if it’s possible to manipulate collections in a FP way, and fortunately Python already provides syntax and tools for functional programming. Though list comprehension is the pythonic way to deal with collections, but the idea and concepts of FP is definitely worth learning.</p>
<h2 id="Wordcount-Example"><a href="#Wordcount-Example" class="headerlink" title="Wordcount Example"></a>Wordcount Example</h2><p>Let’s first write a snippet to count the word occurences from a paragraph, in of course a functional way.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"></div><div class="line"></div><div class="line">content = <span class="string">"""</span></div><div class="line">an apple orange the grape</div><div class="line">banana an apple melon</div><div class="line">an orange banana apple</div><div class="line">"""</div><div class="line"></div><div class="line">word_matches = re.finditer(<span class="string">r'\S+'</span>, content)</div><div class="line">words = map(<span class="keyword">lambda</span> m: m.group(<span class="number">0</span>), word_matches)</div><div class="line">fruits = filter(<span class="keyword">lambda</span> s: len(s) &gt; <span class="number">3</span>, words)</div><div class="line">grouped_fruits = itertools.groupby(sorted(fruits))</div><div class="line">fruit_counts = map(<span class="keyword">lambda</span> t: (t[<span class="number">0</span>], len(list(t[<span class="number">1</span>]))), grouped_fruits)</div><div class="line">print(list(fruit_counts))</div></pre></td></tr></table></figure>
<p>Run this example and you’ll get a list of fruits, along with their counts:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(&apos;apple&apos;, 3), (&apos;banana&apos;, 2), (&apos;grape&apos;, 1), (&apos;melon&apos;, 1), (&apos;orange&apos;, 2)]</div></pre></td></tr></table></figure>
<p>This example includes most aspects of processing collections with FP style. For instance, <code>re.finditer</code> returns an <code>iterator</code> that is lazily evaluated; <code>map</code> and <code>filter</code> are used to do transformations; <code>itertools</code> module provides various functions to cope with iterables; and last but not least, the <code>lambda</code> expression, an easy way to define inline anonymous function. All of them will be described in the following sections.</p>
<a id="more"></a>
<h2 id="Ingredients-of-Functional-Programming"><a href="#Ingredients-of-Functional-Programming" class="headerlink" title="Ingredients of Functional Programming"></a>Ingredients of Functional Programming</h2><p>Python is far from being a functional language, but it provides some basic syntax and tools so that we can choose to write Python in a functional way.</p>
<h3 id="Function-as-First-class-Citizen"><a href="#Function-as-First-class-Citizen" class="headerlink" title="Function as First-class Citizen"></a>Function as First-class Citizen</h3><p>Function is data. It can be assigned to a variable, pass as a parameter to another function, or returned by a function. The later two cases also refers to higher order functions. Python makes it quite easy, you can define and pass around the function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line"></div><div class="line">add_two = add</div><div class="line">print(add_two(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># =&gt; 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(a, b, operation)</span>:</span></div><div class="line">    <span class="keyword">return</span> operation(a, b)</div><div class="line"></div><div class="line">print(calculate(<span class="number">1</span>, <span class="number">2</span>, add)) <span class="comment"># =&gt; 3</span></div></pre></td></tr></table></figure>
<p>Or generate a new function from a function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_n</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a)</span>:</span></div><div class="line">        <span class="keyword">return</span> a + n</div><div class="line">    <span class="keyword">return</span> add</div><div class="line"></div><div class="line">add_1 = add_n(<span class="number">1</span>)</div><div class="line">print(add_1(<span class="number">1</span>)) <span class="comment"># =&gt; 2</span></div></pre></td></tr></table></figure>
<p>To use function in <code>map</code>, which applies the function to every element of the iterable:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(list(map(add_1, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))) <span class="comment"># =&gt; [2, 3, 4]</span></div></pre></td></tr></table></figure>
<p>For very short function, we can use lambda expression:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map(<span class="keyword">lambda</span> a: a + <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<h3 id="Being-Lazy"><a href="#Being-Lazy" class="headerlink" title="Being Lazy"></a>Being Lazy</h3><p>Lazy evaluation means postponing the execution until it’s necessary. It’s a very common optimization strategy in big data transformation, becuase all map-like operations should be chained and assigned to a single task. In Python, there’s iterator, an stateful object that remembers the current element during iteration. Let’s assume <code>calc</code> is a heavy function, and the following two lines differ:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[calc(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</div><div class="line">map(calc, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<p>List comprehension is eager-evaluated, while <code>map</code> (from Python 3.x on) returns an iterator. You can use the <code>next</code> global function to fetch the next element, or take the first two results using:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</div><div class="line">list(islice(map(calc, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>It’s worth mentioning that from Python 3.x on a lot of methods returns iterator instead of concrete list, you can refer to <a href="http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/#Less-Lists-More-Views">this article</a>.</p>
<h3 id="Purity"><a href="#Purity" class="headerlink" title="Purity"></a>Purity</h3><p>A function is pure if its output only depends on its input, and it has no side-effect, i.e. without changing outer/global variable space. Here’re some examples of pure/non-pure functions:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span><span class="params">(a)</span>:</span> <span class="comment"># pure</span></div><div class="line">    <span class="keyword">return</span> a + <span class="number">1</span></div><div class="line"></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(a)</span>:</span> <span class="comment"># non-pure</span></div><div class="line">    i = len(a)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(name)</span>:</span> <span class="comment"># non-pure, change the console</span></div><div class="line">    print(<span class="string">'hi'</span>, name)</div></pre></td></tr></table></figure>
<p>Purity is a good functional style because:</p>
<ul>
<li>it makes you re-design the functions so that they become shorter;</li>
<li>and short functions are easier to test, have less bugs;</li>
<li>purity also enables parallel execution.</li>
</ul>
<p>In concurrency programming, sharing state, lock, and context switch are all performance killers. Pure functions ensures codes can be executed in parallel without coordination of states, and can be re-executed multiple times safely.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</div><div class="line">executor = ThreadPoolExecutor(<span class="number">5</span>)</div><div class="line">list(executor.map(add_1, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</div></pre></td></tr></table></figure>
<h3 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h3><p>There’re also topics on combining, currying, partially applying functions, so we can tackle complex problems with small well-defined functions. Python provides <code>decorator</code>, <code>generator</code> syntax, along with <code>functools</code>, <code>operator</code> modules for such tasks. These can be found in Python official documentation.</p>
<h2 id="Chaining-Operations"><a href="#Chaining-Operations" class="headerlink" title="Chaining Operations"></a>Chaining Operations</h2><p><code>map</code>, <code>filter</code>, and functions in <code>itertools</code> cannot be easily chained. We have to nest the function calls or introduce intermediate variables. Luckily, there’s an open-sourced <a href="https://github.com/EntilZha/PyFunctional" target="_blank" rel="external">PyFunctional</a> package that can help us transform or aggregate collections in a funcional way quite fluently.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functional <span class="keyword">import</span> seq</div><div class="line"></div><div class="line">seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)\</div><div class="line">    .map(<span class="keyword">lambda</span> x: x * <span class="number">2</span>)\</div><div class="line">    .filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">4</span>)\</div><div class="line">    .reduce(<span class="keyword">lambda</span> x, y: x + y)</div><div class="line"><span class="comment"># =&gt; 14</span></div></pre></td></tr></table></figure>
<h2 id="List-Comprehension-Or-map"><a href="#List-Comprehension-Or-map" class="headerlink" title="List Comprehension Or map?"></a>List Comprehension Or <code>map</code>?</h2><p>List comprehension and generator expression are the pythonic way of processing collections, and the communiy encourages using list comprehension instead of <code>map</code>, etc. There’s a nice <a href="http://stackoverflow.com/a/6407222/1030720" target="_blank" rel="external">answer</a> on StackOverflow that addresses the following principle: use <code>map</code> only when you already have a function defined. Otherwise just stick to listcomps for it’s more widely accepted. Neverthelss, one should still pay attention to the laziness of various methods.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Processing collections is only one application of functional programming. This program paradigm can be applied to other phases of designing your systems. Further materials like <a href="http://deptinfo.unice.fr/~roy/sicp.pdf" target="_blank" rel="external">SICP</a>, <a href="https://www.manning.com/books/functional-programming-in-scala" target="_blank" rel="external">Functional Programming in Scala</a> are all very informative. Hope you enjoy.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/3/howto/functional.html" target="_blank" rel="external">Functional Programming HOWTO</a></li>
<li><a href="http://kachayev.github.io/talks/uapycon2012/" target="_blank" rel="external">Functional Programming with Python</a></li>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" target="_blank" rel="external">Itertools Recipes</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I develop Spark applications with Scala, and it has a very powerful &lt;a href=&quot;http://docs.scala-lang.org/overviews/collections/introduction&quot;&gt;collection system&lt;/a&gt;, in which functional programming is certainly a key. Java 8 also introduces Lambda Expression and Stream API. In JavaScript, there is a &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; library that provides powerful tools to process arrays and objects. When my primary work language changes to Python, I am wondering if it’s possible to manipulate collections in a FP way, and fortunately Python already provides syntax and tools for functional programming. Though list comprehension is the pythonic way to deal with collections, but the idea and concepts of FP is definitely worth learning.&lt;/p&gt;
&lt;h2 id=&quot;Wordcount-Example&quot;&gt;&lt;a href=&quot;#Wordcount-Example&quot; class=&quot;headerlink&quot; title=&quot;Wordcount Example&quot;&gt;&lt;/a&gt;Wordcount Example&lt;/h2&gt;&lt;p&gt;Let’s first write a snippet to count the word occurences from a paragraph, in of course a functional way.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; itertools&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;content = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;an apple orange the grape&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;banana an apple melon&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;an orange banana apple&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;word_matches = re.finditer(&lt;span class=&quot;string&quot;&gt;r&#39;\S+&#39;&lt;/span&gt;, content)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;words = map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; m: m.group(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), word_matches)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fruits = filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; s: len(s) &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, words)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;grouped_fruits = itertools.groupby(sorted(fruits))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fruit_counts = map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; t: (t[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], len(list(t[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))), grouped_fruits)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(list(fruit_counts))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Run this example and you’ll get a list of fruits, along with their counts:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[(&amp;apos;apple&amp;apos;, 3), (&amp;apos;banana&amp;apos;, 2), (&amp;apos;grape&amp;apos;, 1), (&amp;apos;melon&amp;apos;, 1), (&amp;apos;orange&amp;apos;, 2)]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This example includes most aspects of processing collections with FP style. For instance, &lt;code&gt;re.finditer&lt;/code&gt; returns an &lt;code&gt;iterator&lt;/code&gt; that is lazily evaluated; &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; are used to do transformations; &lt;code&gt;itertools&lt;/code&gt; module provides various functions to cope with iterables; and last but not least, the &lt;code&gt;lambda&lt;/code&gt; expression, an easy way to define inline anonymous function. All of them will be described in the following sections.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
      <category term="functional programming" scheme="http://shzhangji.com/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Difference Between Lodash _.assign and _.assignIn</title>
    <link href="http://shzhangji.com/blog/2017/01/29/difference-between-lodash-assign-and-assignin/"/>
    <id>http://shzhangji.com/blog/2017/01/29/difference-between-lodash-assign-and-assignin/</id>
    <published>2017-01-29T06:18:29.000Z</published>
    <updated>2017-02-16T07:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Lodash, both <code>_.assign</code> and <code>_.assignIn</code> are ways to copy source objects’ properties into target object. According the <a href="https://lodash.com/docs/" target="_blank" rel="external">documentation</a>, <code>_.assign</code> processes <strong>own enumerable string keyed properties</strong>, while <code>_.assignIn</code> processes both <strong>own and inherited source properties</strong>. There’re also other companion functions like <code>_.forOwn</code> and <code>_.forIn</code>, <code>_.has</code> and <code>_.hasIn</code>. So what’s the difference between them?</p>
<p>In brief, the <code>In</code> in latter methods implies the way <code>for...in</code> loop behaves, which <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="external">iterates all enumerable properties of the object itself and those the object inherits from its constructor’s prototype</a>. JavaScript has an inheritance mechanism called prototype chain. When iterating an object’s properties with <code>for...in</code> or <code>_.forIn</code>, all properties appeared in the object and its prototype are processed, until the prototype resolves to <code>null</code>. Here’s the example code taken from Lodash’s doc:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.a = <span class="number">1</span>; &#125;</div><div class="line">Foo.prototype.b = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.c = <span class="number">3</span>; &#125;</div><div class="line">Bar.prototype.d = <span class="number">4</span>;</div><div class="line">_.assign(&#123;<span class="attr">a</span>: <span class="number">0</span>&#125;, <span class="keyword">new</span> Foo, <span class="keyword">new</span> Bar); <span class="comment">// =&gt; &#123;a: 1, c: 3&#125;</span></div><div class="line">_.assignIn(&#123;<span class="attr">a</span>: <span class="number">0</span>&#125;, <span class="keyword">new</span> Foo, <span class="keyword">new</span> Bar); <span class="comment">// =&gt; &#123;a:1, b:2, c:3, d:4&#125;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="How-assign-Picks-Properties"><a href="#How-assign-Picks-Properties" class="headerlink" title="How _.assign Picks Properties"></a>How <code>_.assign</code> Picks Properties</h2><p>Let’s dissect the phrase “own enumerable string-keys properties” into three parts. </p>
<h3 id="Own-Property"><a href="#Own-Property" class="headerlink" title="Own Property"></a>Own Property</h3><p>JavaScript is a prototype-based language, but there’re several ways to simulate class and instance, like object literal, function prototype, <code>Object.create</code>, and the newly added <code>class</code> keyword. In either case, we can use <code>Object.prototype.hasOwnProperty()</code> to determine if the property is inherited or not.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</div><div class="line">foo.hasOwnProperty(<span class="string">'a'</span>); <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(foo, <span class="string">'b'</span>); <span class="comment">// =&gt; false</span></div></pre></td></tr></table></figure>
<p><code>Object.getOwnPropertyNames()</code> and <code>Object.keys()</code> can retrieve all properties defined directly in the object, except that <code>Object.keys()</code> only returns enumerable keys (see next section).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">let</span> o2 = <span class="built_in">Object</span>.create(o1);</div><div class="line">o2.b = <span class="number">2</span>;</div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(o2); <span class="comment">// =&gt; ['b']</span></div><div class="line"><span class="built_in">Object</span>.keys(o2); <span class="comment">// =&gt; ['b']</span></div></pre></td></tr></table></figure>
<h3 id="Enumerable-Property"><a href="#Enumerable-Property" class="headerlink" title="Enumerable Property"></a>Enumerable Property</h3><p>Object property can be defined with either data descriptor or accessor descriptor. Among data descriptor options, the <code>enumerable</code> boolean indicates whether this property shows in <code>for...in</code> or <code>Object.keys()</code>. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'a'</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;);</div><div class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// =&gt; []</span></div><div class="line">o.propertyIsEnumerable(<span class="string">'a'</span>); <span class="comment">// =&gt; false</span></div></pre></td></tr></table></figure>
<p>You can refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty()</a> for more information.</p>
<h3 id="String-keyed-Property"><a href="#String-keyed-Property" class="headerlink" title="String-keyed Property"></a>String-keyed Property</h3><p>Before ES6, object’s keys are always String. ES6 introduces a new primitive type <a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol" target="_blank" rel="external">Symbol</a>, which can be used as a key for private property. Symbol property is non-enumerable.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">let</span> o = &#123;&#125;;</div><div class="line">o[s] = <span class="number">1</span>;</div><div class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// =&gt; []</span></div></pre></td></tr></table></figure>
<p>There’s a nice <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#Detection_Table" target="_blank" rel="external">Detection Table</a> to help you figure out which built-in methods process enumerable or inherited properties.</p>
<h2 id="assign-and-assignIn-Implementation"><a href="#assign-and-assignIn-Implementation" class="headerlink" title="_.assign and _.assignIn Implementation"></a><code>_.assign</code> and <code>_.assignIn</code> Implementation</h2><p>Both methods calls <code>_.keys</code> and <code>_.keysIn</code> respectively. <code>_.keys</code> calls <code>Object.keys()</code> and <code>_.keysIn</code> uses <code>for...in</code> loop. Actually <code>Object.keys()</code> is not difficult to implement. As mentioned above, <code>for...in</code> can be used to retrieve both own and inherited properties, while <code>hasOwnProperty</code> determines whether this property is defined in the object itself.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">object</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">Object</span>(object)) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key)) &#123;</div><div class="line">      result.push(key);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Object.assign()</code> does the same thing as <code>_.assign()</code>. Use Lodash if you need to run your code on older browsers.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign() - JavaScript | MDN</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">Inheritance and The Prototype Chain</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Lodash, both &lt;code&gt;_.assign&lt;/code&gt; and &lt;code&gt;_.assignIn&lt;/code&gt; are ways to copy source objects’ properties into target object. According the &lt;a href=&quot;https://lodash.com/docs/&quot;&gt;documentation&lt;/a&gt;, &lt;code&gt;_.assign&lt;/code&gt; processes &lt;strong&gt;own enumerable string keyed properties&lt;/strong&gt;, while &lt;code&gt;_.assignIn&lt;/code&gt; processes both &lt;strong&gt;own and inherited source properties&lt;/strong&gt;. There’re also other companion functions like &lt;code&gt;_.forOwn&lt;/code&gt; and &lt;code&gt;_.forIn&lt;/code&gt;, &lt;code&gt;_.has&lt;/code&gt; and &lt;code&gt;_.hasIn&lt;/code&gt;. So what’s the difference between them?&lt;/p&gt;
&lt;p&gt;In brief, the &lt;code&gt;In&lt;/code&gt; in latter methods implies the way &lt;code&gt;for...in&lt;/code&gt; loop behaves, which &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;iterates all enumerable properties of the object itself and those the object inherits from its constructor’s prototype&lt;/a&gt;. JavaScript has an inheritance mechanism called prototype chain. When iterating an object’s properties with &lt;code&gt;for...in&lt;/code&gt; or &lt;code&gt;_.forIn&lt;/code&gt;, all properties appeared in the object and its prototype are processed, until the prototype resolves to &lt;code&gt;null&lt;/code&gt;. Here’s the example code taken from Lodash’s doc:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Foo.prototype.b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bar.prototype.d = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_.assign(&amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bar); &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; &amp;#123;a: 1, c: 3&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_.assignIn(&amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bar); &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; &amp;#123;a:1, b:2, c:3, d:4&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="frontend" scheme="http://shzhangji.com/tags/frontend/"/>
    
      <category term="javascript" scheme="http://shzhangji.com/tags/javascript/"/>
    
      <category term="lodash" scheme="http://shzhangji.com/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>Python 2 to 3 Quick Guide</title>
    <link href="http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/"/>
    <id>http://shzhangji.com/blog/2017/01/08/python-2-to-3-quick-guide/</id>
    <published>2017-01-08T04:26:54.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Few years ago I was programming Python 2.7, when 3.x was still not an option, because of its backward-incompatibiliy and lack of popular third-party libraries support. But now it’s safe to say Python 3 is <a href="http://py3readiness.org/" target="_blank" rel="external">totally ready</a>, and here’s a list of references for those (including me) who are adopting Python 3 with a 2.x background.</p>
<ol>
<li>All Strings Are Unicode</li>
<li><code>print</code> Becomes a Function</li>
<li>Less Lists More Views</li>
<li>Integer Division Returns Float</li>
<li>Comparison Operators Raises <code>TypeError</code></li>
<li>Set Literal Support</li>
<li>New String Formatting</li>
<li>Exception Handling</li>
<li>Global Function Changes</li>
<li>Renaming Modules and Relative Import</li>
</ol>
<h2 id="All-Strings-Are-Unicode"><a href="#All-Strings-Are-Unicode" class="headerlink" title="All Strings Are Unicode"></a>All Strings Are Unicode</h2><p>When dealing with non-ASCII encodings in Python 2, there’re <code>str</code>, <code>unicode</code>, <code>u&#39;...&#39;</code>, <code>s.encode()</code>, etc. In Python 3, there’re only <strong>text</strong> and <strong>binary data</strong>. The former is <code>str</code>, strings that are always represented in Unicode; the later is <code>bytes</code>, which is just a sequence of byte numbers.</p>
<ul>
<li>Conversion between <code>str</code> and <code>bytes</code>:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># str to bytes</span></div><div class="line"><span class="string">'str'</span>.encode(<span class="string">'UTF-8'</span>)</div><div class="line">bytes(<span class="string">'str'</span>, encoding=<span class="string">'UTF-8'</span>)</div><div class="line"></div><div class="line"><span class="comment"># bytes to str</span></div><div class="line"><span class="string">b'bytes'</span>.decode(<span class="string">'UTF-8'</span>)</div><div class="line">str(<span class="string">b'bytes'</span>, encoding=<span class="string">'UTF-8'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>basestring</code> is removed, use <code>str</code> as type: <code>isinstance(s, str)</code></li>
<li><code>bytes</code> is immutable, the corresponding mutable version is <code>bytearray</code>.</li>
<li>The default source file encoding is UTF-8 now.</li>
</ul>
<a id="more"></a>
<h2 id="print-Becomes-a-Function"><a href="#print-Becomes-a-Function" class="headerlink" title="print Becomes a Function"></a><code>print</code> Becomes a Function</h2><p>In Python 2, <code>print</code> is a statement, and now it’s used as a function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span>   <span class="comment"># Old: print a new line</span></div><div class="line">print() <span class="comment"># New</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'hello'</span>, <span class="string">'world'</span>,          <span class="comment"># Old: trailing comma suppresses new line</span></div><div class="line">print(<span class="string">'hello'</span>, <span class="string">'world'</span>, end=<span class="string">' '</span>) <span class="comment"># New: end defaults to '\n'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'error'</span>     <span class="comment"># Old: write to stderr</span></div><div class="line">print(<span class="string">'error'</span>, file=sys.stderr) <span class="comment"># New</span></div></pre></td></tr></table></figure>
<p><code>print</code> function also provides <code>sep</code> and <code>flush</code> parameters:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'hello'</span>, <span class="string">'world'</span>, sep=<span class="string">','</span>, flush=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Instead of:</span></div><div class="line"><span class="keyword">print</span> <span class="string">','</span>.join((<span class="string">'hello'</span>, <span class="string">'world'</span>))</div><div class="line">sys.stdout.flush()</div></pre></td></tr></table></figure>
<h2 id="Less-Lists-More-Views"><a href="#Less-Lists-More-Views" class="headerlink" title="Less Lists More Views"></a>Less Lists More Views</h2><p>A lot of well-known methods now return iterators, or ‘views’,  instead of eager-evaluated lists.</p>
<ul>
<li>Dictionary’s <code>keys</code>, <code>items</code>, and <code>values</code> methods, while removing <code>iterkeys</code>, <code>iteritems</code>, and <code>itervalues</code>. For example, when you need a sorted key list:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">k = d.keys(); k.sort() <span class="comment"># Old</span></div><div class="line">k = sorted(d.keys())   <span class="comment"># New</span></div></pre></td></tr></table></figure>
<ul>
<li><code>map</code>, <code>filter</code>, and <code>zip</code>, while removing <code>imap</code> methods in <code>itertools</code> module. To get a concrete list, use list comprehension or the <code>list</code> global function:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</div><div class="line">list(map(<span class="keyword">lambda</span> x: x * <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</div></pre></td></tr></table></figure>
<ul>
<li><code>range</code> is now equivalent to <code>xrange</code> in Python 2, the later is removed.</li>
<li>For iterators, the <code>next</code> method is renamed to <code>__next__</code>, and there’s a global <code>next</code> function, which accepts an iterator and calls its <code>__next__</code> method.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iter([<span class="number">1</span>]).next()     <span class="comment"># Old</span></div><div class="line">iter([<span class="number">1</span>]).__next__() <span class="comment"># New</span></div><div class="line">next(iter([<span class="number">1</span>]))      <span class="comment"># New</span></div></pre></td></tr></table></figure>
<h2 id="Integer-Division-Returns-Float"><a href="#Integer-Division-Returns-Float" class="headerlink" title="Integer Division Returns Float"></a>Integer Division Returns Float</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print 1 / 2   # Old: prints 0</div><div class="line">print 1 / 2.0 # Old: prints 0.5</div><div class="line">print(1 / 2)  # New: prints 0.5</div><div class="line">print(1 // 2) # New: prints 0</div></pre></td></tr></table></figure>
<ul>
<li>There’s no difference between <code>long</code> and <code>int</code> now, use <code>int</code> only.</li>
<li>Octal literals are represented as <code>0o755</code>, instead of <code>0755</code>.</li>
</ul>
<h2 id="Comparison-Operators-Raises-TypeError"><a href="#Comparison-Operators-Raises-TypeError" class="headerlink" title="Comparison Operators Raises TypeError"></a>Comparison Operators Raises <code>TypeError</code></h2><ul>
<li><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code> can no longer be used between different types.</li>
<li><code>==</code> and <code>!=</code> remains the same.</li>
<li><code>cmp</code> parameter in <code>sort</code> is removed. Use <code>key</code> to extract a comparison key from each element.</li>
</ul>
<h2 id="Set-Literal-Support"><a href="#Set-Literal-Support" class="headerlink" title="Set Literal Support"></a>Set Literal Support</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># Old, also valid in Python 3</span></div><div class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;      <span class="comment"># New</span></div><div class="line">s = set()          <span class="comment"># Empty set</span></div><div class="line">d = &#123;&#125;             <span class="comment"># Empty dict</span></div></pre></td></tr></table></figure>
<h2 id="New-String-Formatting"><a href="#New-String-Formatting" class="headerlink" title="New String Formatting"></a>New String Formatting</h2><p>Python 3 introduces a new form of string formatting, and it’s also back-ported to Python 2.x. The old <code>%s</code> formatting is still available in 3.x, but the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" target="_blank" rel="external">new format</a> seems more expressive and powerful.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># by position</span></div><div class="line"><span class="string">'&#123;&#125;, &#123;&#125;, &#123;&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)    <span class="comment"># a, b, c</span></div><div class="line"><span class="string">'&#123;2&#125;, &#123;1&#125;, &#123;0&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>) <span class="comment"># c, b, a</span></div><div class="line"></div><div class="line"><span class="comment"># by name</span></div><div class="line"><span class="string">'Hello, &#123;name&#125;'</span>.format(name=<span class="string">'Jerry'</span>) <span class="comment"># Hello, Jerry</span></div><div class="line"></div><div class="line"><span class="comment"># by attribute</span></div><div class="line">c = <span class="number">1</span> - <span class="number">2j</span></div><div class="line"><span class="string">'real: &#123;0.real&#125;'</span>.format(c) <span class="comment"># real: 1.0</span></div><div class="line"></div><div class="line"><span class="comment"># by index</span></div><div class="line"><span class="string">'X: &#123;0[0]&#125;, Y: &#123;0[1]&#125;'</span>.format((<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># X: 1, Y: 2</span></div><div class="line"></div><div class="line"><span class="comment"># format number</span></div><div class="line"><span class="string">'&#123;:.2f&#125;'</span>.format(<span class="number">1.2</span>)   <span class="comment"># 1.20</span></div><div class="line"><span class="string">'&#123;:.2%&#125;'</span>.format(<span class="number">0.012</span>) <span class="comment"># 1.20%</span></div><div class="line"><span class="string">'&#123;:,&#125;'</span>.format(<span class="number">1234567</span>) <span class="comment"># 1,234,567</span></div><div class="line"></div><div class="line"><span class="comment"># padding</span></div><div class="line"><span class="string">'&#123;:&gt;05&#125;'</span>.format(<span class="number">1</span>) <span class="comment"># 00001</span></div></pre></td></tr></table></figure>
<p>Furthermore, Python 3.6 introduces literal string interpolation (<a href="https://www.python.org/dev/peps/pep-0498/" target="_blank" rel="external">PEP 498</a>).</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'Jerry'</span></div><div class="line">print(f<span class="string">'Hello, &#123;name&#125;'</span>)</div></pre></td></tr></table></figure>
<h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><p>Raise and catch exceptions in a more standard way:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Old</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  <span class="keyword">raise</span> Exception, <span class="string">'message'</span></div><div class="line"><span class="keyword">except</span> Exception, e:</div><div class="line">  tb = sys.exc_info()[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="comment"># New</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  <span class="keyword">raise</span> Exception(<span class="string">'message'</span>)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">  tb = e.__traceback__</div></pre></td></tr></table></figure>
<h2 id="Global-Function-Changes"><a href="#Global-Function-Changes" class="headerlink" title="Global Function Changes"></a>Global Function Changes</h2><p>Some global functions are (re)moved to reduce duplication and language cruft.</p>
<ul>
<li><code>reduce</code> is removed, use <code>functools.reduce</code>, or explict <code>for</code> loop instead.</li>
<li><code>apply</code> is removed, use <code>f(*args)</code> instead of <code>apply(f, args)</code>.</li>
<li><code>execfile</code> is removed, use <code>exec(open(fn).read())</code></li>
<li>Removed backticks, use <code>repr</code> instread.</li>
<li><code>raw_input</code> is renamed to <code>input</code>, and the old <code>input</code> behaviour can be achieved by <code>eval(input())</code></li>
</ul>
<h2 id="Renaming-Modules-and-Relative-Import"><a href="#Renaming-Modules-and-Relative-Import" class="headerlink" title="Renaming Modules and Relative Import"></a>Renaming Modules and Relative Import</h2><ul>
<li>Different URL modules are unified into <code>urllib</code> module, e.g.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, Request</div><div class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</div><div class="line">req = Request(<span class="string">'http://shzhangji.com?'</span> + urlencode(&#123;<span class="string">'t'</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="keyword">with</span> urlopen(req) <span class="keyword">as</span> f:</div><div class="line">  print(f.read())</div></pre></td></tr></table></figure>
<ul>
<li>Some modules are renamed according to <a href="https://www.python.org/dev/peps/pep-0008" target="_blank" rel="external">PEP 8</a>, such as:<ul>
<li>ConfigParser -&gt; configparser</li>
<li>copy_reg -&gt; copyreg</li>
<li>test.test_support -&gt; test.support</li>
</ul>
</li>
<li>Some modules have both pure Python implementation along with an accelerated version, like StringIO and cStringIO. In Python 3, user should always import the standard module, and fallback would happen automatically.<ul>
<li>StringIO + cStringIO -&gt; io</li>
<li>pickle + cPickle -&gt; pickle</li>
</ul>
</li>
<li>All <code>import</code> forms are interpreted as absolute imports, unless started with <code>.</code>:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> somemod</div><div class="line"><span class="keyword">from</span> .somemod <span class="keyword">import</span> moremod</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.python.org/3/whatsnew/3.0.html" target="_blank" rel="external">What’s New In Python 3.0</a></li>
<li><a href="http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html" target="_blank" rel="external">Porting Code to Python 3 with 2to3</a></li>
<li><a href="http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html" target="_blank" rel="external">The key differences between Python 2.7.x and Python 3.x with examples</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Few years ago I was programming Python 2.7, when 3.x was still not an option, because of its backward-incompatibiliy and lack of popular third-party libraries support. But now it’s safe to say Python 3 is &lt;a href=&quot;http://py3readiness.org/&quot;&gt;totally ready&lt;/a&gt;, and here’s a list of references for those (including me) who are adopting Python 3 with a 2.x background.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All Strings Are Unicode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt; Becomes a Function&lt;/li&gt;
&lt;li&gt;Less Lists More Views&lt;/li&gt;
&lt;li&gt;Integer Division Returns Float&lt;/li&gt;
&lt;li&gt;Comparison Operators Raises &lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set Literal Support&lt;/li&gt;
&lt;li&gt;New String Formatting&lt;/li&gt;
&lt;li&gt;Exception Handling&lt;/li&gt;
&lt;li&gt;Global Function Changes&lt;/li&gt;
&lt;li&gt;Renaming Modules and Relative Import&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;All-Strings-Are-Unicode&quot;&gt;&lt;a href=&quot;#All-Strings-Are-Unicode&quot; class=&quot;headerlink&quot; title=&quot;All Strings Are Unicode&quot;&gt;&lt;/a&gt;All Strings Are Unicode&lt;/h2&gt;&lt;p&gt;When dealing with non-ASCII encodings in Python 2, there’re &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;u&amp;#39;...&amp;#39;&lt;/code&gt;, &lt;code&gt;s.encode()&lt;/code&gt;, etc. In Python 3, there’re only &lt;strong&gt;text&lt;/strong&gt; and &lt;strong&gt;binary data&lt;/strong&gt;. The former is &lt;code&gt;str&lt;/code&gt;, strings that are always represented in Unicode; the later is &lt;code&gt;bytes&lt;/code&gt;, which is just a sequence of byte numbers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conversion between &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;bytes&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# str to bytes&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;str&#39;&lt;/span&gt;.encode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bytes(&lt;span class=&quot;string&quot;&gt;&#39;str&#39;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# bytes to str&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;b&#39;bytes&#39;&lt;/span&gt;.decode(&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;str(&lt;span class=&quot;string&quot;&gt;b&#39;bytes&#39;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basestring&lt;/code&gt; is removed, use &lt;code&gt;str&lt;/code&gt; as type: &lt;code&gt;isinstance(s, str)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bytes&lt;/code&gt; is immutable, the corresponding mutable version is &lt;code&gt;bytearray&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The default source file encoding is UTF-8 now.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="python" scheme="http://shzhangji.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>View Spark Source in Eclipse</title>
    <link href="http://shzhangji.com/blog/2015/09/01/view-spark-source-in-eclipse/"/>
    <id>http://shzhangji.com/blog/2015/09/01/view-spark-source-in-eclipse/</id>
    <published>2015-09-01T10:38:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Reading source code is a great way to learn opensource projects. I used to read Java projects’ source code on <a href="http://grepcode.com/" target="_blank" rel="external">GrepCode</a> for it is online and has very nice cross reference features. As for Scala projects such as <a href="http://spark.apache.org" target="_blank" rel="external">Apache Spark</a>, though its source code can be found on <a href="https://github.com/apache/spark/" target="_blank" rel="external">GitHub</a>, it’s quite necessary to setup an IDE to view the code more efficiently. Here’s a howto of viewing Spark source code in Eclipse.</p>
<h2 id="Install-Eclipse-and-Scala-IDE-Plugin"><a href="#Install-Eclipse-and-Scala-IDE-Plugin" class="headerlink" title="Install Eclipse and Scala IDE Plugin"></a>Install Eclipse and Scala IDE Plugin</h2><p>One can download Eclipse from <a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">here</a>. I recommend the “Eclipse IDE for Java EE Developers”, which contains a lot of daily-used features.</p>
<p><img src="/images/scala-ide.png" alt=""></p>
<p>Then go to Scala IDE’s <a href="http://scala-ide.org/download/current.html" target="_blank" rel="external">official site</a> and install the plugin through update site or zip archive.</p>
<h2 id="Generate-Project-File-with-Maven"><a href="#Generate-Project-File-with-Maven" class="headerlink" title="Generate Project File with Maven"></a>Generate Project File with Maven</h2><p>Spark is mainly built with Maven, so make sure you have Maven installed on your box, and download the latest Spark source code from <a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">here</a>, unarchive it, and execute the following command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn -am -pl core dependency:resolve eclipse:eclipse</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>This command does a bunch of things. First, it indicates what modules should be built. Spark is a large project with multiple modules. Currently we’re only interested in its core module, so <code>-pl</code> or <code>--projects</code> is used. <code>-am</code> or <code>--also-make</code> tells Maven to build core module’s dependencies as well. We can see the module list in output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[INFO] Scanning for projects...</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Reactor Build Order:</div><div class="line">[INFO]</div><div class="line">[INFO] Spark Project Parent POM</div><div class="line">[INFO] Spark Launcher Project</div><div class="line">[INFO] Spark Project Networking</div><div class="line">[INFO] Spark Project Shuffle Streaming Service</div><div class="line">[INFO] Spark Project Unsafe</div><div class="line">[INFO] Spark Project Core</div></pre></td></tr></table></figure>
<p><code>dependency:resolve</code> tells Maven to download all dependencies. <code>eclipse:eclipse</code> will generate the <code>.project</code> and <code>.classpath</code> files for Eclipse. But the result is not perfect, both files need some fixes.</p>
<p>Edit <code>core/.classpath</code>, change the following two lines:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/main/scala"</span> <span class="attr">including</span>=<span class="string">"**/*.java"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/test/scala"</span> <span class="attr">output</span>=<span class="string">"target/scala-2.10/test-classes"</span> <span class="attr">including</span>=<span class="string">"**/*.java"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>to</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/main/scala"</span> <span class="attr">including</span>=<span class="string">"**/*.java|**/*.scala"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">classpathentry</span> <span class="attr">kind</span>=<span class="string">"src"</span> <span class="attr">path</span>=<span class="string">"src/test/scala"</span> <span class="attr">output</span>=<span class="string">"target/scala-2.10/test-classes"</span> <span class="attr">including</span>=<span class="string">"**/*.java|**/*.scala"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>Edit <code>core/.project</code>, make it looks like this:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">buildSpec</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">buildCommand</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>org.scala-ide.sdt.core.scalabuilder<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">buildCommand</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">buildSpec</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">natures</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nature</span>&gt;</span>org.scala-ide.sdt.core.scalanature<span class="tag">&lt;/<span class="name">nature</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nature</span>&gt;</span>org.eclipse.jdt.core.javanature<span class="tag">&lt;/<span class="name">nature</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">natures</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Now you can import “Existing Projects into Workspace”, including <code>core</code>, <code>launcher</code>, <code>network</code>, and <code>unsafe</code>.</p>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="Access-restriction-The-type-‘Unsafe’-is-not-API"><a href="#Access-restriction-The-type-‘Unsafe’-is-not-API" class="headerlink" title="Access restriction: The type ‘Unsafe’ is not API"></a>Access restriction: The type ‘Unsafe’ is not API</h3><p>For module <code>spark-unsafe</code>, Eclipse will report an error “Access restriction: The type ‘Unsafe’ is not API (restriction on required library /path/to/jre/lib/rt.jar”. To fix this, right click the “JRE System Library” entry in Package Explorer, change it to “Workspace default JRE”.</p>
<h3 id="Download-Sources-and-Javadocs"><a href="#Download-Sources-and-Javadocs" class="headerlink" title="Download Sources and Javadocs"></a>Download Sources and Javadocs</h3><p>Add the following entry into pom’s project / build / plugins:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-eclipse-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">downloadSources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">downloadSources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">downloadJavadocs</span>&gt;</span>true<span class="tag">&lt;/<span class="name">downloadJavadocs</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="build-helper-maven-plugin"><a href="#build-helper-maven-plugin" class="headerlink" title="build-helper-maven-plugin"></a>build-helper-maven-plugin</h3><p>Since Spark is a mixture of Java and Scala code, and the maven-eclipse-plugin only knows about Java source files, so we need to use build-helper-maven-plugin to include the Scala sources, as is described <a href="http://docs.scala-lang.org/tutorials/scala-with-maven.html#integration-with-eclipse-scala-ide24" target="_blank" rel="external">here</a>. Fortunately, Spark’s pom.xml has already included this setting.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://docs.scala-lang.org/tutorials/scala-with-maven.html" target="_blank" rel="external">http://docs.scala-lang.org/tutorials/scala-with-maven.html</a></li>
<li><a href="https://wiki.scala-lang.org/display/SIW/ScalaEclipseMaven" target="_blank" rel="external">https://wiki.scala-lang.org/display/SIW/ScalaEclipseMaven</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/SPARK/Useful+Developer+Tools" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/SPARK/Useful+Developer+Tools</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reading source code is a great way to learn opensource projects. I used to read Java projects’ source code on &lt;a href=&quot;http://grepcode.com/&quot;&gt;GrepCode&lt;/a&gt; for it is online and has very nice cross reference features. As for Scala projects such as &lt;a href=&quot;http://spark.apache.org&quot;&gt;Apache Spark&lt;/a&gt;, though its source code can be found on &lt;a href=&quot;https://github.com/apache/spark/&quot;&gt;GitHub&lt;/a&gt;, it’s quite necessary to setup an IDE to view the code more efficiently. Here’s a howto of viewing Spark source code in Eclipse.&lt;/p&gt;
&lt;h2 id=&quot;Install-Eclipse-and-Scala-IDE-Plugin&quot;&gt;&lt;a href=&quot;#Install-Eclipse-and-Scala-IDE-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Install Eclipse and Scala IDE Plugin&quot;&gt;&lt;/a&gt;Install Eclipse and Scala IDE Plugin&lt;/h2&gt;&lt;p&gt;One can download Eclipse from &lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;here&lt;/a&gt;. I recommend the “Eclipse IDE for Java EE Developers”, which contains a lot of daily-used features.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/scala-ide.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then go to Scala IDE’s &lt;a href=&quot;http://scala-ide.org/download/current.html&quot;&gt;official site&lt;/a&gt; and install the plugin through update site or zip archive.&lt;/p&gt;
&lt;h2 id=&quot;Generate-Project-File-with-Maven&quot;&gt;&lt;a href=&quot;#Generate-Project-File-with-Maven&quot; class=&quot;headerlink&quot; title=&quot;Generate Project File with Maven&quot;&gt;&lt;/a&gt;Generate Project File with Maven&lt;/h2&gt;&lt;p&gt;Spark is mainly built with Maven, so make sure you have Maven installed on your box, and download the latest Spark source code from &lt;a href=&quot;http://spark.apache.org/downloads.html&quot;&gt;here&lt;/a&gt;, unarchive it, and execute the following command:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ mvn -am -pl core dependency:resolve eclipse:eclipse&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="spark" scheme="http://shzhangji.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming Logging Configuration</title>
    <link href="http://shzhangji.com/blog/2015/05/31/spark-streaming-logging-configuration/"/>
    <id>http://shzhangji.com/blog/2015/05/31/spark-streaming-logging-configuration/</id>
    <published>2015-05-31T10:18:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spark Streaming applications tend to run forever, so their log files should be properly handled, to avoid exploding server hard drives. This article will give some practical advices of dealing with these log files, on both Spark on YARN and standalone mode.</p>
<h2 id="Log4j’s-RollingFileAppender"><a href="#Log4j’s-RollingFileAppender" class="headerlink" title="Log4j’s RollingFileAppender"></a>Log4j’s RollingFileAppender</h2><p>Spark uses log4j as logging facility. The default configuraiton is to write all logs into standard error, which is fine for batch jobs. But for streaming jobs, we’d better use rolling-file appender, to cut log files by size and keep only several recent files. Here’s an example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=INFO, rolling</div><div class="line"></div><div class="line">log4j.appender.rolling=org.apache.log4j.RollingFileAppender</div><div class="line">log4j.appender.rolling.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.rolling.layout.conversionPattern=[%d] %p %m (%c)%n</div><div class="line">log4j.appender.rolling.maxFileSize=50MB</div><div class="line">log4j.appender.rolling.maxBackupIndex=5</div><div class="line">log4j.appender.rolling.file=/var/log/spark/$&#123;dm.logging.name&#125;.log</div><div class="line">log4j.appender.rolling.encoding=UTF-8</div><div class="line"></div><div class="line">log4j.logger.org.apache.spark=WARN</div><div class="line">log4j.logger.org.eclipse.jetty=WARN</div><div class="line"></div><div class="line">log4j.logger.com.anjuke.dm=$&#123;dm.logging.level&#125;</div></pre></td></tr></table></figure>
<p>This means log4j will roll the log file by 50MB and keep only 5 recent files. These files are saved in <code>/var/log/spark</code> directory, with filename picked from system property <code>dm.logging.name</code>. We also set the logging level of our package <code>com.anjuke.dm</code> according to <code>dm.logging.level</code> property. Another thing to mention is that we set <code>org.apache.spark</code> to level <code>WARN</code>, so as to ignore verbose logs from spark.</p>
<a id="more"></a>
<h2 id="Standalone-Mode"><a href="#Standalone-Mode" class="headerlink" title="Standalone Mode"></a>Standalone Mode</h2><p>In standalone mode, Spark Streaming driver is running on the machine where you submit the job, and each Spark worker node will run an executor for this job. So you need to setup log4j for both driver and executor.</p>
<p>For driver, since it’s a long-running application, we tend to use some process management tools like <a href="http://supervisord.org/" target="_blank" rel="external">supervisor</a> to monitor it. And supervisor itself provides the facility of rolling log files, so we can safely write all logs into standard output when setting up driver’s log4j.</p>
<p>For executor, there’re two approaches. One is using <code>spark.executor.logs.rolling.strategy</code> provided by Spark 1.1 and above. It has both time-based and size-based rolling methods. These log files are stored in Spark’s work directory. You can find more details in the <a href="https://spark.apache.org/docs/1.1.0/configuration.html" target="_blank" rel="external">documentation</a>.</p>
<p>The other approach is to setup log4j manually, when you’re using a legacy version, or want to gain more control on the logging process. Here are the steps:</p>
<ol>
<li>Make sure the logging directory exists on all worker nodes. You can use some provisioning tools like <a href="https://github.com/ansible/ansible" target="_blank" rel="external">ansbile</a> to create them.</li>
<li>Create driver’s and executor’s log4j configuration files, and distribute the executor’s to all worker nodes.</li>
<li>Use the above two files in <code>spark-submit</code> command:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spark-submit</div><div class="line">  --master spark://127.0.0.1:7077</div><div class="line">  --driver-java-options &quot;-Dlog4j.configuration=file:/path/to/log4j-driver.properties -Ddm.logging.level=DEBUG&quot;</div><div class="line">  --conf &quot;spark.executor.extraJavaOptions=-Dlog4j.configuration=file:/path/to/log4j-executor.properties -Ddm.logging.name=myapp -Ddm.logging.level=DEBUG&quot;</div><div class="line">  ...</div></pre></td></tr></table></figure>
<h2 id="Spark-on-YARN"><a href="#Spark-on-YARN" class="headerlink" title="Spark on YARN"></a>Spark on YARN</h2><p><a href="http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/index.html" target="_blank" rel="external">YARN</a> is a <strong>resource manager</strong> introduced by Hadoop2. Now we can run differenct computational frameworks on the same cluster, like MapReduce, Spark, Storm, etc. The basic unit of YARN is called container, which represents a certain amount of resource (currently memory and virtual CPU cores). Every container has its working directory, and all related files such as application command (jars) and log files are stored in this directory.</p>
<p>When running Spark on YARN, there is a system property <code>spark.yarn.app.container.log.dir</code> indicating the container’s log directory. We only need to replace one line of the above log4j config:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log4j.appender.rolling.file=$&#123;spark.yarn.app.container.log.dir&#125;/spark.log</div></pre></td></tr></table></figure>
<p>And these log files can be viewed on YARN’s web UI:</p>
<p><img src="/images/spark/yarn-logs.png" alt=""></p>
<p>The <code>spark-submit</code> command is as following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spark-submit</div><div class="line">  --master yarn-cluster</div><div class="line">  --files /path/to/log4j-spark.properties</div><div class="line">  --conf &quot;spark.driver.extraJavaOptions=-Dlog4j.configuration=log4j-spark.properties&quot;</div><div class="line">  --conf &quot;spark.executor.extraJavaOptions=-Dlog4j.configuration=log4j-spark.properties&quot;</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>As you can see, both driver and executor use the same configuration file. That is because in <code>yarn-cluster</code> mode, driver is also run as a container in YARN. In fact, the <code>spark-submit</code> command will just quit after job submission.</p>
<p>If YARN’s <a href="http://zh.hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/" target="_blank" rel="external">log aggregation</a> is enabled, application logs will be saved in HDFS after the job is done. One can use <code>yarn logs</code> command to view the files or browse directly into HDFS directory indicated by <code>yarn.nodemanager.log-dirs</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark Streaming applications tend to run forever, so their log files should be properly handled, to avoid exploding server hard drives. This article will give some practical advices of dealing with these log files, on both Spark on YARN and standalone mode.&lt;/p&gt;
&lt;h2 id=&quot;Log4j’s-RollingFileAppender&quot;&gt;&lt;a href=&quot;#Log4j’s-RollingFileAppender&quot; class=&quot;headerlink&quot; title=&quot;Log4j’s RollingFileAppender&quot;&gt;&lt;/a&gt;Log4j’s RollingFileAppender&lt;/h2&gt;&lt;p&gt;Spark uses log4j as logging facility. The default configuraiton is to write all logs into standard error, which is fine for batch jobs. But for streaming jobs, we’d better use rolling-file appender, to cut log files by size and keep only several recent files. Here’s an example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;log4j.rootLogger=INFO, rolling&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling=org.apache.log4j.RollingFileAppender&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.layout=org.apache.log4j.PatternLayout&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.layout.conversionPattern=[%d] %p %m (%c)%n&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.maxFileSize=50MB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.maxBackupIndex=5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.file=/var/log/spark/$&amp;#123;dm.logging.name&amp;#125;.log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.appender.rolling.encoding=UTF-8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.logger.org.apache.spark=WARN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.logger.org.eclipse.jetty=WARN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;log4j.logger.com.anjuke.dm=$&amp;#123;dm.logging.level&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This means log4j will roll the log file by 50MB and keep only 5 recent files. These files are saved in &lt;code&gt;/var/log/spark&lt;/code&gt; directory, with filename picked from system property &lt;code&gt;dm.logging.name&lt;/code&gt;. We also set the logging level of our package &lt;code&gt;com.anjuke.dm&lt;/code&gt; according to &lt;code&gt;dm.logging.level&lt;/code&gt; property. Another thing to mention is that we set &lt;code&gt;org.apache.spark&lt;/code&gt; to level &lt;code&gt;WARN&lt;/code&gt;, so as to ignore verbose logs from spark.&lt;/p&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Big-Data/"/>
    
    
      <category term="spark" scheme="http://shzhangji.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Performance Tips</title>
    <link href="http://shzhangji.com/blog/2015/04/28/elasticsearch-performance-tips/"/>
    <id>http://shzhangji.com/blog/2015/04/28/elasticsearch-performance-tips/</id>
    <published>2015-04-28T15:08:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently we’re using ElasticSearch as a data backend of our recommendation API, to serve both offline and online computed data to users. Thanks to ElasticSearch’s rich and out-of-the-box functionality, it doesn’t take much trouble to setup the cluster. However, we still encounter some misuse and unwise configurations. So here’s a list of ElasticSearch performance tips that we learned from practice.</p>
<h2 id="Tip-1-Set-Num-of-shards-to-Num-of-nodes"><a href="#Tip-1-Set-Num-of-shards-to-Num-of-nodes" class="headerlink" title="Tip 1 Set Num-of-shards to Num-of-nodes"></a>Tip 1 Set Num-of-shards to Num-of-nodes</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard" target="_blank" rel="external">Shard</a> is the foundation of ElasticSearch’s distribution capability. Every index is splitted into several shards (default 5) and are distributed across cluster nodes. But this capability does not come free. Since data being queried reside in all shards (this behaviour can be changed by <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-routing" target="_blank" rel="external">routing</a>), ElasticSearch has to run this query on every shard, fetch the result, and merge them, like a map-reduce process. So if there’re too many shards, more than the number of cluter nodes, the query will be executed more than once on the same node, and it’ll also impact the merge phase. On the other hand, too few shards will also reduce the performance, for not all nodes are being utilized.</p>
<p>Shards have two roles, primary shard and replica shard. Replica shard serves as a backup to the primary shard. When primary goes down, the replica takes its job. It also helps improving the search and get performance, for these requests can be executed on either primary or replica shard.</p>
<p>Shards can be visualized by <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard" target="_blank" rel="external">elasticsearch-head</a> plugin:</p>
<p><img src="/images/elasticsearch/shards-head.png" alt=""></p>
<p>The <code>cu_docs</code> index has two shards <code>0</code> and <code>1</code>, with <code>number_of_replicas</code> set to 1. Primary shard <code>0</code> (bold bordered) resides in server <code>Leon</code>, and its replica in <code>Pris</code>. They are green becuase all primary shards have enough repicas sitting in different servers, so the cluster is healthy.</p>
<p>Since <code>number_of_shards</code> of an index cannot be changed after creation (while <code>number_of_replicas</code> can), one should choose this config wisely. Here are some suggestions:</p>
<ol>
<li>How many nodes do you have, now and future? If you’re sure you’ll only have 3 nodes, set number of shards to 2 and replicas to 1, so there’ll be 4 shards across 3 nodes. If you’ll add some servers in the future, you can set number of shards to 3, so when the cluster grows to 5 nodes, there’ll be 6 distributed shards.</li>
<li>How big is your index? If it’s small, one shard with one replica will due.</li>
<li>How is the read and write frequency, respectively? If it’s search heavy, setup more relicas.</li>
</ol>
<a id="more"></a>
<h2 id="Tip-2-Tuning-Memory-Usage"><a href="#Tip-2-Tuning-Memory-Usage" class="headerlink" title="Tip 2 Tuning Memory Usage"></a>Tip 2 Tuning Memory Usage</h2><p>ElasticSearch and its backend <a href="http://lucene.apache.org/" target="_blank" rel="external">Lucene</a> are both Java application. There’re various memory tuning settings related to heap and native memory.</p>
<h3 id="Set-Max-Heap-Size-to-Half-of-Total-Memory"><a href="#Set-Max-Heap-Size-to-Half-of-Total-Memory" class="headerlink" title="Set Max Heap Size to Half of Total Memory"></a>Set Max Heap Size to Half of Total Memory</h3><p>Generally speaking, more heap memory leads to better performance. But in ElasticSearch’s case, Lucene also requires a lot of native memory (or off-heap memory), to store index segments and provide fast search performance. But it does not load the files by itself. Instead, it relies on the operating system to cache the segement files in memory.</p>
<p>Say we have 16G memory and set -Xmx to 8G, it doesn’t mean the remaining 8G is wasted. Except for the memory OS preserves for itself, it will cache the frequently accessed disk files in memory automatically, which results in a huge performance gain.</p>
<p>Do not set heap size over 32G though, even you have more than 64G memory. The reason is described in <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html#compressed_oops" target="_blank" rel="external">this link</a>.</p>
<p>Also, you should probably set -Xms to 8G as well, to avoid the overhead of heap memory growth.</p>
<h3 id="Disable-Swapping"><a href="#Disable-Swapping" class="headerlink" title="Disable Swapping"></a>Disable Swapping</h3><p>Swapping is a way to move unused program code and data to disk so as to provide more space for running applications and file caching. It also provides a buffer for the system to recover from memory exhaustion. But for critical application like ElasticSearch, being swapped is definitely a performance killer.</p>
<p>There’re several ways to disable swapping, and our choice is setting <code>bootstrap.mlockall</code> to true. This tells ElasticSearch to lock its memory space in RAM so that OS will not swap it out. One can confirm this setting via <code>http://localhost:9200/_nodes/process?pretty</code>.</p>
<p>If ElasticSearch is not started as root (and it probably shouldn’t), this setting may not take effect. For Ubuntu server, one needs to add <code>&lt;user&gt; hard memlock unlimited</code> to <code>/etc/security/limits.conf</code>, and run <code>ulimit -l unlimited</code> before starting ElasticSearch process.</p>
<h3 id="Increase-mmap-Counts"><a href="#Increase-mmap-Counts" class="headerlink" title="Increase mmap Counts"></a>Increase <code>mmap</code> Counts</h3><p>ElasticSearch uses memory mapped files, and the default <code>mmap</code> counts is low. Add <code>vm.max_map_count=262144</code> to <code>/etc/sysctl.conf</code>, run <code>sysctl -p /etc/sysctl.conf</code> as root, and then restart ElasticSearch.</p>
<h2 id="Tip-3-Setup-a-Cluster-with-Unicast"><a href="#Tip-3-Setup-a-Cluster-with-Unicast" class="headerlink" title="Tip 3 Setup a Cluster with Unicast"></a>Tip 3 Setup a Cluster with Unicast</h2><p>ElasticSearch has two options to form a cluster, multicast and unicast. The former is suitable when you have a large group of servers and a well configured network. But we found unicast more concise and less error-prone.</p>
<p>Here’s an example of using unicast:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">node.name: &quot;NODE-1&quot;</div><div class="line">discovery.zen.ping.multicast.enabled: false</div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;node-1.example.com&quot;, &quot;node-2.example.com&quot;, &quot;node-3.example.com&quot;]</div><div class="line">discovery.zen.minimum_master_nodes: 2</div></pre></td></tr></table></figure>
<p>The <code>discovery.zen.minimum_master_nodes</code> setting is a way to prevent split-brain symptom, i.e. more than one node thinks itself the master of the cluster. And for this setting to work, you should have an odd number of nodes, and set this config to <code>ceil(num_of_nodes / 2)</code>. In the above cluster, you can lose at most one node. It’s much like a quorum in <a href="http://zookeeper.apache.org" target="_blank" rel="external">Zookeeper</a>.</p>
<h2 id="Tip-4-Disable-Unnecessary-Features"><a href="#Tip-4-Disable-Unnecessary-Features" class="headerlink" title="Tip 4 Disable Unnecessary Features"></a>Tip 4 Disable Unnecessary Features</h2><p>ElasticSearch is a full-featured search engine, but you should always tailor it to your own needs. Here’s a brief list:</p>
<ul>
<li>Use corrent index type. There’re <code>index</code>, <code>not_analyzed</code>, and <code>no</code>. If you don’t need to search the field, set it to <code>no</code>; if you only search for full match, use <code>not_analyzed</code>.</li>
<li>For search-only fields, set <code>store</code> to false.</li>
<li>Disable <code>_all</code> field, if you always know which field to search.</li>
<li>Disable <code>_source</code> fields, if documents are big and you don’t need the update capability.</li>
<li>If you have a document key, set this field in <code>_id</code> - <code>path</code>, instead of index the field twice.</li>
<li>Set <code>index.refresh_interval</code> to a larger number (default 1s), if you don’t need near-realtime search. It’s also an important option in bulk-load operation described below.</li>
</ul>
<h2 id="Tip-5-Use-Bulk-Operations"><a href="#Tip-5-Use-Bulk-Operations" class="headerlink" title="Tip 5 Use Bulk Operations"></a>Tip 5 Use Bulk Operations</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/bulk.html" target="_blank" rel="external">Bulk is cheaper</a></p>
<ul>
<li>Bulk Read<ul>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html" target="_blank" rel="external">Multi Get</a> to retrieve multiple documents by a list of ids.</li>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html" target="_blank" rel="external">Scroll</a> to search a large number of documents.</li>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/1.4/msearch.html" target="_blank" rel="external">MultiSearch api</a> to run search requests in parallel.</li>
</ul>
</li>
<li>Bulk Write<ul>
<li>Use <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/1.4/bulk.html" target="_blank" rel="external">Bulk API</a> to index, update, delete multiple documents.</li>
<li>Alter <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html" target="_blank" rel="external">index aliases</a> simultaneously.</li>
</ul>
</li>
<li>Bulk Load: when initially building a large index, do the following,<ul>
<li>Set <code>number_of_relicas</code> to 0, so no relicas will be created;</li>
<li>Set <code>index.refresh_interval</code> to -1, disabling nrt search;</li>
<li>Bulk build the documents;</li>
<li>Call <code>optimize</code> on the index, so newly built docs are available for search;</li>
<li>Reset replicas and refresh interval, let ES cluster recover to green.</li>
</ul>
</li>
</ul>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><ul>
<li>File descriptors: system default is too small for ES, set it to 64K will be OK. If <code>ulimit -n 64000</code> does not work, you need to add <code>&lt;user&gt; hard nofile 64000</code> to <code>/etc/security/limits.conf</code>, just like the <code>memlock</code> setting mentioned above.</li>
<li>When using ES client library, it will create a lot of worker threads according to the number of processors. Sometimes it’s not necessary. This behaviour can be changed by setting <code>processors</code> to a lower value like 2:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> settings = <span class="type">ImmutableSettings</span>.settingsBuilder()</div><div class="line">    .put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</div><div class="line">    .put(<span class="string">"processors"</span>, <span class="number">2</span>)</div><div class="line">    .build()</div><div class="line"><span class="keyword">val</span> uri = <span class="type">ElasticsearchClientUri</span>(<span class="string">"elasticsearch://127.0.0.1:9300"</span>)</div><div class="line"><span class="type">ElasticClient</span>.remote(settings, uri)</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/guide/current/index.html</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li>
<li><a href="http://cpratt.co/how-many-shards-should-elasticsearch-indexes-have/" target="_blank" rel="external">http://cpratt.co/how-many-shards-should-elasticsearch-indexes-have/</a></li>
<li><a href="https://www.elastic.co/blog/performance-considerations-elasticsearch-indexing" target="_blank" rel="external">https://www.elastic.co/blog/performance-considerations-elasticsearch-indexing</a></li>
<li><a href="https://www.loggly.com/blog/nine-tips-configuring-elasticsearch-for-high-performance/" target="_blank" rel="external">https://www.loggly.com/blog/nine-tips-configuring-elasticsearch-for-high-performance/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently we’re using ElasticSearch as a data backend of our recommendation API, to serve both offline and online computed data to users. Thanks to ElasticSearch’s rich and out-of-the-box functionality, it doesn’t take much trouble to setup the cluster. However, we still encounter some misuse and unwise configurations. So here’s a list of ElasticSearch performance tips that we learned from practice.&lt;/p&gt;
&lt;h2 id=&quot;Tip-1-Set-Num-of-shards-to-Num-of-nodes&quot;&gt;&lt;a href=&quot;#Tip-1-Set-Num-of-shards-to-Num-of-nodes&quot; class=&quot;headerlink&quot; title=&quot;Tip 1 Set Num-of-shards to Num-of-nodes&quot;&gt;&lt;/a&gt;Tip 1 Set Num-of-shards to Num-of-nodes&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard&quot;&gt;Shard&lt;/a&gt; is the foundation of ElasticSearch’s distribution capability. Every index is splitted into several shards (default 5) and are distributed across cluster nodes. But this capability does not come free. Since data being queried reside in all shards (this behaviour can be changed by &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-routing&quot;&gt;routing&lt;/a&gt;), ElasticSearch has to run this query on every shard, fetch the result, and merge them, like a map-reduce process. So if there’re too many shards, more than the number of cluter nodes, the query will be executed more than once on the same node, and it’ll also impact the merge phase. On the other hand, too few shards will also reduce the performance, for not all nodes are being utilized.&lt;/p&gt;
&lt;p&gt;Shards have two roles, primary shard and replica shard. Replica shard serves as a backup to the primary shard. When primary goes down, the replica takes its job. It also helps improving the search and get performance, for these requests can be executed on either primary or replica shard.&lt;/p&gt;
&lt;p&gt;Shards can be visualized by &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/glossary.html#glossary-shard&quot;&gt;elasticsearch-head&lt;/a&gt; plugin:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/elasticsearch/shards-head.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cu_docs&lt;/code&gt; index has two shards &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, with &lt;code&gt;number_of_replicas&lt;/code&gt; set to 1. Primary shard &lt;code&gt;0&lt;/code&gt; (bold bordered) resides in server &lt;code&gt;Leon&lt;/code&gt;, and its replica in &lt;code&gt;Pris&lt;/code&gt;. They are green becuase all primary shards have enough repicas sitting in different servers, so the cluster is healthy.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;number_of_shards&lt;/code&gt; of an index cannot be changed after creation (while &lt;code&gt;number_of_replicas&lt;/code&gt; can), one should choose this config wisely. Here are some suggestions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many nodes do you have, now and future? If you’re sure you’ll only have 3 nodes, set number of shards to 2 and replicas to 1, so there’ll be 4 shards across 3 nodes. If you’ll add some servers in the future, you can set number of shards to 3, so when the cluster grows to 5 nodes, there’ll be 6 distributed shards.&lt;/li&gt;
&lt;li&gt;How big is your index? If it’s small, one shard with one replica will due.&lt;/li&gt;
&lt;li&gt;How is the read and write frequency, respectively? If it’s search heavy, setup more relicas.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="elasticsearch" scheme="http://shzhangji.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Use WebJars in Scalatra Project</title>
    <link href="http://shzhangji.com/blog/2014/05/27/use-webjars-in-scalatra-project/"/>
    <id>http://shzhangji.com/blog/2014/05/27/use-webjars-in-scalatra-project/</id>
    <published>2014-05-27T09:44:00.000Z</published>
    <updated>2017-03-09T05:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>As I’m working with my first <a href="http://www.scalatra.org/" target="_blank" rel="external">Scalatra</a> project, I automatically think of using <a href="http://www.webjars.org/" target="_blank" rel="external">WebJars</a> to manage Javascript library dependencies, since it’s more convenient and seems like a good practice. Though there’s no <a href="http://www.webjars.org/documentation" target="_blank" rel="external">official support</a> for Scalatra framework, the installation process is not very complex. But this doesn’t mean I didn’t spend much time on this. I’m still a newbie to Scala, and there’s only a few materials on this subject.</p>
<h2 id="Add-WebJars-Dependency-in-SBT-Build-File"><a href="#Add-WebJars-Dependency-in-SBT-Build-File" class="headerlink" title="Add WebJars Dependency in SBT Build File"></a>Add WebJars Dependency in SBT Build File</h2><p>Scalatra uses <code>.scala</code> configuration file instead of <code>.sbt</code>, so let’s add dependency into <code>project/build.scala</code>. Take <a href="http://dojotoolkit.org/" target="_blank" rel="external">Dojo</a> for example.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">DwExplorerBuild</span> <span class="keyword">extends</span> <span class="title">Build</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> project = <span class="type">Project</span> (</div><div class="line">    ...</div><div class="line">    settings = <span class="type">Defaults</span>.defaultSettings ++ <span class="type">ScalatraPlugin</span>.scalatraWithJRebel ++ scalateSettings ++ <span class="type">Seq</span>(</div><div class="line">      ...</div><div class="line">      libraryDependencies ++= <span class="type">Seq</span>(</div><div class="line">        ...</div><div class="line">        <span class="string">"org.webjars"</span> % <span class="string">"dojo"</span> % <span class="string">"1.9.3"</span></div><div class="line">      ),</div><div class="line">      ...</div><div class="line">    )</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To view this dependency in Eclipse, you need to run <code>sbt eclipse</code> again. In the <em>Referenced Libraries</em> section, you can see a <code>dojo-1.9.3.jar</code>, and the library lies in <code>META-INF/resources/webjars/</code>.</p>
<a id="more"></a>
<h2 id="Add-a-Route-for-WebJars-Resources"><a href="#Add-a-Route-for-WebJars-Resources" class="headerlink" title="Add a Route for WebJars Resources"></a>Add a Route for WebJars Resources</h2><p>Find the <code>ProjectNameStack.scala</code> file and add the following lines at the bottom of the trait:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">ProjectNameStack</span> <span class="keyword">extends</span> <span class="title">ScalatraServlet</span> <span class="keyword">with</span> <span class="title">ScalateSupport</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  get(<span class="string">"/webjars/*"</span>) &#123;</div><div class="line">    <span class="keyword">val</span> resourcePath = <span class="string">"/META-INF/resources/webjars/"</span> + params(<span class="string">"splat"</span>)</div><div class="line">    <span class="type">Option</span>(getClass.getResourceAsStream(resourcePath)) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Some</span>(inputStream) =&gt; &#123;</div><div class="line">        contentType = servletContext.getMimeType(resourcePath)</div><div class="line">        <span class="type">IOUtil</span>.loadBytes(inputStream)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">case</span> <span class="type">None</span> =&gt; resourceNotFound()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>That’s it!</strong> Now you can refer to the WebJars resources in views, like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#set (title)</div><div class="line">Hello, Dojo!</div><div class="line">#end</div><div class="line"></div><div class="line">&lt;div id=&quot;greeting&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;uri(&quot;/webjars/dojo/1.9.3/dojo/dojo.js&quot;)&#125;&quot; data-dojo-config=&quot;async: true&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">require([</div><div class="line">    &apos;dojo/dom&apos;,</div><div class="line">    &apos;dojo/dom-construct&apos;</div><div class="line">], function (dom, domConstruct) &#123;</div><div class="line">    var greetingNode = dom.byId(&apos;greeting&apos;);</div><div class="line">    domConstruct.place(&apos;&lt;i&gt;Dojo!&lt;/i&gt;&apos;, greetingNode);</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Some-Explanations-on-This-Route"><a href="#Some-Explanations-on-This-Route" class="headerlink" title="Some Explanations on This Route"></a>Some Explanations on This Route</h3><ul>
<li><code>/webjars/*</code> is a <a href="http://www.scalatra.org/2.2/guides/http/routes.html#toc_233" target="_blank" rel="external">Wildcards</a> and <code>params(&quot;splat&quot;)</code> is to extract the asterisk part.</li>
<li><code>resourcePath</code> points to the WebJars resources in the jar file, as we saw in Eclipse. It is then fetched as an <code>InputStream</code> with <code>getResourceAsStream()</code>.</li>
<li><code>servletContext.getMimeType()</code> is a handy method to determine the content type of the requested resource, instead of parsing it by ourselves. I find this in SpringMVC’s <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-webmvc/3.2.7.RELEASE/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java#ResourceHttpRequestHandler.handleRequest%28javax.servlet.http.HttpServletRequest%2Cjavax.servlet.http.HttpServletResponse%29" target="_blank" rel="external">ResourceHttpRequestHandler</a>.</li>
<li><code>IOUtil</code> is a utiliy class that comes with <a href="http://scalate.fusesource.org/" target="_blank" rel="external">Scalate</a>, so don’t forget to import it first.</li>
</ul>
<p>At first I tried to figure out whether Scalatra provides a conveniet way to serve static files in classpath, I failed. So I decided to serve them by my own, and <a href="https://gist.github.com/laurilehmijoki/4483113" target="_blank" rel="external">this gist</a> was very helpful.</p>
<p>Anyway, I’ve spent more than half a day to solve this problem, and it turned out to be a very challenging yet interesting way to learn a new language, new framework, and new tools. Keep moving!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As I’m working with my first &lt;a href=&quot;http://www.scalatra.org/&quot;&gt;Scalatra&lt;/a&gt; project, I automatically think of using &lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt; to manage Javascript library dependencies, since it’s more convenient and seems like a good practice. Though there’s no &lt;a href=&quot;http://www.webjars.org/documentation&quot;&gt;official support&lt;/a&gt; for Scalatra framework, the installation process is not very complex. But this doesn’t mean I didn’t spend much time on this. I’m still a newbie to Scala, and there’s only a few materials on this subject.&lt;/p&gt;
&lt;h2 id=&quot;Add-WebJars-Dependency-in-SBT-Build-File&quot;&gt;&lt;a href=&quot;#Add-WebJars-Dependency-in-SBT-Build-File&quot; class=&quot;headerlink&quot; title=&quot;Add WebJars Dependency in SBT Build File&quot;&gt;&lt;/a&gt;Add WebJars Dependency in SBT Build File&lt;/h2&gt;&lt;p&gt;Scalatra uses &lt;code&gt;.scala&lt;/code&gt; configuration file instead of &lt;code&gt;.sbt&lt;/code&gt;, so let’s add dependency into &lt;code&gt;project/build.scala&lt;/code&gt;. Take &lt;a href=&quot;http://dojotoolkit.org/&quot;&gt;Dojo&lt;/a&gt; for example.&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DwExplorerBuild&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Build&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; project = &lt;span class=&quot;type&quot;&gt;Project&lt;/span&gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    settings = &lt;span class=&quot;type&quot;&gt;Defaults&lt;/span&gt;.defaultSettings ++ &lt;span class=&quot;type&quot;&gt;ScalatraPlugin&lt;/span&gt;.scalatraWithJRebel ++ scalateSettings ++ &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      libraryDependencies ++= &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;org.webjars&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;dojo&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;1.9.3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To view this dependency in Eclipse, you need to run &lt;code&gt;sbt eclipse&lt;/code&gt; again. In the &lt;em&gt;Referenced Libraries&lt;/em&gt; section, you can see a &lt;code&gt;dojo-1.9.3.jar&lt;/code&gt;, and the library lies in &lt;code&gt;META-INF/resources/webjars/&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://shzhangji.com/categories/Programming/"/>
    
    
      <category term="scala" scheme="http://shzhangji.com/tags/scala/"/>
    
      <category term="scalatra" scheme="http://shzhangji.com/tags/scalatra/"/>
    
      <category term="webjars" scheme="http://shzhangji.com/tags/webjars/"/>
    
  </entry>
  
  <entry>
    <title>Generate Auto-increment Id in Map-reduce Job</title>
    <link href="http://shzhangji.com/blog/2013/10/31/generate-auto-increment-id-in-map-reduce-job/"/>
    <id>http://shzhangji.com/blog/2013/10/31/generate-auto-increment-id-in-map-reduce-job/</id>
    <published>2013-10-31T01:35:00.000Z</published>
    <updated>2017-01-03T12:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>In DBMS world, it’s easy to generate a unique, auto-increment id, using MySQL’s <a href="http://dev.mysql.com/doc/refman/5.1/en/example-auto-increment.html" target="_blank" rel="external">AUTO_INCREMENT attribute</a> on a primary key or MongoDB’s <a href="http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/" target="_blank" rel="external">Counters Collection</a> pattern. But when it comes to a distributed, parallel processing framework, like Hadoop Map-reduce, it is not that straight forward. The best solution to identify every record in such framework is to use UUID. But when an integer id is required, it’ll take some steps.</p>
<h2 id="Solution-A-Single-Reducer"><a href="#Solution-A-Single-Reducer" class="headerlink" title="Solution A: Single Reducer"></a>Solution A: Single Reducer</h2><p>This is the most obvious and simple one, just use the following code to specify reducer numbers to 1:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">job.setNumReduceTasks(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>And also obvious, there are several demerits:</p>
<ol>
<li>All mappers output will be copied to one task tracker.</li>
<li>Only one process is working on shuffel &amp; sort.</li>
<li>When producing output, there’s also only one process.</li>
</ol>
<p>The above is not a problem for small data sets, or at least small mapper outputs. And it is also the approach that Pig and Hive use when they need to perform a total sort. But when hitting a certain threshold, the sort and copy phase will become very slow and unacceptable.</p>
<a id="more"></a>
<h2 id="Solution-B-Increment-by-Number-of-Tasks"><a href="#Solution-B-Increment-by-Number-of-Tasks" class="headerlink" title="Solution B: Increment by Number of Tasks"></a>Solution B: Increment by Number of Tasks</h2><p>Inspired by a <a href="http://mail-archives.apache.org/mod_mbox/hadoop-common-user/200904.mbox/%3C49E13557.7090504@domaintools.com%3E" target="_blank" rel="external">mailing list</a> that is quite hard to find, which is inspired by MySQL master-master setup (with auto_increment_increment and auto_increment_offset), there’s a brilliant way to generate a globally unique integer id across mappers or reducers. Let’s take mapper for example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JobMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> increment;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException,</span></div><div class="line">            InterruptedException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.setup(context);</div><div class="line"></div><div class="line">        id = context.getTaskAttemptID().getTaskID().getId();</div><div class="line">        increment = context.getConfiguration().getInt(<span class="string">"mapred.map.tasks"</span>, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (increment == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"mapred.map.tasks is zero"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        id += increment;</div><div class="line">        context.write(<span class="keyword">new</span> LongWritable(id),</div><div class="line">                <span class="keyword">new</span> Text(String.format(<span class="string">"%d, %s"</span>, key.get(), value.toString())));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The basic idea is simple:</p>
<ol>
<li>Set the initial id to current tasks’s id.</li>
<li>When mapping each row, increment the id by the number of tasks.</li>
</ol>
<p>It’s also applicable to reducers.</p>
<h2 id="Solution-C-Sorted-Auto-increment-Id"><a href="#Solution-C-Sorted-Auto-increment-Id" class="headerlink" title="Solution C: Sorted Auto-increment Id"></a>Solution C: Sorted Auto-increment Id</h2><p>Here’s a real senario: we have several log files pulled from different machines, and we want to identify each row by an auto-increment id, and they should be in time sequence order.</p>
<p>We know Hadoop has a sort phase, so we can use timestamp as the mapper output key, and the framework will do the trick. But the sorting thing happends in one reducer (partition, in fact), so when using multiple reducer tasks, the result is not in total order. To achieve this, we can use the <a href="http://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapred/lib/TotalOrderPartitioner.html" target="_blank" rel="external">TotalOrderPartitioner</a>.</p>
<p>How about the incremental id? Even though the outputs are in total order, Solution B is not applicable here. So we take another approach: seperate the job in two phases, use the reducer to do sorting <em>and</em> counting, then use the second mapper to generate the id.</p>
<p>Here’s what we gonna do:</p>
<ol>
<li>Use TotalOrderPartitioner, and generate the partition file.</li>
<li>Parse logs in mapper A, use time as the output key.</li>
<li>Let the framework do partitioning and sorting.</li>
<li>Count records in reducer, write it with <a href="http://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.html" target="_blank" rel="external">MultipleOutput</a>.</li>
<li>In mapper B, use count as offset, and increment by 1.</li>
</ol>
<p>To simplify the situation, we assume to have the following inputs and outputs:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> Input       Output</div><div class="line"> </div><div class="line">11:00 a     1 11:00 a</div><div class="line">12:00 b     2 11:01 aa</div><div class="line">13:00 c     3 11:02 aaa</div><div class="line"></div><div class="line">11:01 aa    4 12:00 b</div><div class="line">12:01 bb    5 12:01 bb</div><div class="line">13:01 cc    6 12:02 bbb</div><div class="line"></div><div class="line">11:02 aaa   7 13:00 c</div><div class="line">12:02 bbb   8 13:01 cc</div><div class="line">13:02 ccc   9 13:02 ccc</div></pre></td></tr></table></figure>
<h3 id="Generate-Partition-File"><a href="#Generate-Partition-File" class="headerlink" title="Generate Partition File"></a>Generate Partition File</h3><p>To use TotalOrderpartitioner, we need a partition file (i.e. boundaries) to tell the partitioner how to partition the mapper outputs. Usually we’ll use <a href="https://hadoop.apache.org/docs/r1.0.4/api/org/apache/hadoop/mapreduce/lib/partition/InputSampler.RandomSampler.html" target="_blank" rel="external">InputSampler.RandomSampler</a> class, but this time let’s use a manual partition file.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SequenceFile.Writer writer = <span class="keyword">new</span> SequenceFile.Writer(fs, getConf(), partition,</div><div class="line">        Text.class, NullWritable.class);</div><div class="line">Text key = <span class="keyword">new</span> Text();</div><div class="line">NullWritable value = NullWritable.get();</div><div class="line">key.set(<span class="string">"12:00"</span>);</div><div class="line">writer.append(key, value);</div><div class="line">key.set(<span class="string">"13:00"</span>);</div><div class="line">writer.append(key, value);</div><div class="line">writer.close();</div></pre></td></tr></table></figure>
<p>So basically, the partitioner will partition the mapper outputs into three parts, the first part will be less than “12:00”, seceond part [“12:00”, “13:00”), thrid [“13:00”, ).</p>
<p>And then, indicate the job to use this partition file:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">job.setPartitionerClass(TotalOrderPartitioner.class);</div><div class="line">otalOrderPartitioner.setPartitionFile(job.getConfiguration(), partition);</div><div class="line"></div><div class="line"><span class="comment">// The number of reducers should equal the number of partitions.</span></div><div class="line">job.setNumReduceTasks(<span class="number">3</span>);</div></pre></td></tr></table></figure>
<h3 id="Use-MutipleOutputs"><a href="#Use-MutipleOutputs" class="headerlink" title="Use MutipleOutputs"></a>Use MutipleOutputs</h3><p>In the reducer, we need to note down the row count of this partition, to do that, we’ll need the MultipleOutputs class, which let use output multiple result files apart from the default “part-r-xxxxx”. The reducer’s code is as following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JobReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MultipleOutputs&lt;NullWritable, Text&gt; mos;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> count;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.setup(context);</div><div class="line">        mos = <span class="keyword">new</span> MultipleOutputs&lt;NullWritable, Text&gt;(context);</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Text value : values) &#123;</div><div class="line">            context.write(NullWritable.get(), value);</div><div class="line">            ++count;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.cleanup(context);</div><div class="line">        mos.write(<span class="string">"count"</span>, NullWritable.get(), <span class="keyword">new</span> LongWritable(count));</div><div class="line">        mos.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>There’re several things to pay attention to:</p>
<ol>
<li>MultipleOutputs is declared as class member, defined in Reducer#setup method, and must be closed at Reducer#cleanup (otherwise the file will be empty).</li>
<li>When instantiating MultipleOutputs class, the generic type needs to be the same as reducer’s output key/value class.</li>
<li>In order to use a different output key/value class, additional setup needs to be done at job definition:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Job job = <span class="keyword">new</span> Job(getConf());</div><div class="line">MultipleOutputs.addNamedOutput(job, <span class="string">"count"</span>, SequenceFileOutputFormat.class,</div><div class="line">    NullWritable.class, LongWritable.class);</div></pre></td></tr></table></figure>
<p>For example, if the output folder is “/tmp/total-sort/“, there’ll be the following files when job is done:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/tmp/total-sort/count-r-00001</div><div class="line">/tmp/total-sort/count-r-00002</div><div class="line">/tmp/total-sort/count-r-00003</div><div class="line">/tmp/total-sort/part-r-00001</div><div class="line">/tmp/total-sort/part-r-00002</div><div class="line">/tmp/total-sort/part-r-00003</div></pre></td></tr></table></figure>
<h3 id="Pass-Start-Ids-to-Mapper"><a href="#Pass-Start-Ids-to-Mapper" class="headerlink" title="Pass Start Ids to Mapper"></a>Pass Start Ids to Mapper</h3><p>When the second mapper processes the inputs, we want them to know the initial id of its partition, which can be calculated from the “count-*” files we produce before. To pass this information, we can use the job’s Configuration object.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Read and calculate the start id from those row-count files.</span></div><div class="line">Map&lt;String, Long&gt; startIds = <span class="keyword">new</span> HashMap&lt;String, Long&gt;();</div><div class="line"><span class="keyword">long</span> startId = <span class="number">1</span>;</div><div class="line">FileSystem fs = FileSystem.get(getConf());</div><div class="line"><span class="keyword">for</span> (FileStatus file : fs.listStatus(countPath)) &#123;</div><div class="line"></div><div class="line">    Path path = file.getPath();</div><div class="line">    String name = path.getName();</div><div class="line">    <span class="keyword">if</span> (!name.startsWith(<span class="string">"count-"</span>)) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    startIds.put(name.substring(name.length() - <span class="number">5</span>), startId);</div><div class="line"></div><div class="line">    SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(fs, path, getConf());</div><div class="line">    NullWritable key = NullWritable.get();</div><div class="line">    LongWritable value = <span class="keyword">new</span> LongWritable();</div><div class="line">    <span class="keyword">if</span> (!reader.next(key, value)) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    startId += value.get();</div><div class="line">    reader.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Serialize the map and pass it to Configuration.</span></div><div class="line">job.getConfiguration().set(<span class="string">"startIds"</span>, Base64.encodeBase64String(</div><div class="line">        SerializationUtils.serialize((Serializable) startIds)));</div><div class="line">        </div><div class="line"><span class="comment">// Recieve it in Mapper#setup</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JobMapperB</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">NullWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Map&lt;String, Long&gt; startIds;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startId;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.setup(context);</div><div class="line">        startIds = (Map&lt;String, Long&gt;) SerializationUtils.deserialize(</div><div class="line">                Base64.decodeBase64(context.getConfiguration().get(<span class="string">"startIds"</span>)));</div><div class="line">        String name = ((FileSplit) context.getInputSplit()).getPath().getName();</div><div class="line">        startId = startIds.get(name.substring(name.length() - <span class="number">5</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(NullWritable key, Text value, Context context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line"></div><div class="line">        context.write(<span class="keyword">new</span> LongWritable(startId++), value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Set-the-Input-Non-splitable"><a href="#Set-the-Input-Non-splitable" class="headerlink" title="Set the Input Non-splitable"></a>Set the Input Non-splitable</h3><p>When the file is bigger than a block or so (depending on some configuration entries), Hadoop will split it, which is not good for us. So let’s define a new InputFormat class to disable the splitting behaviour:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NonSplitableSequence</span> <span class="keyword">extends</span> <span class="title">SequenceFileInputFormat</span>&lt;<span class="title">NullWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isSplitable</span><span class="params">(JobContext context, Path filename)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// use it</span></div><div class="line">job.setInputFormatClass(NonSplitableSequence.class);</div></pre></td></tr></table></figure>
<p>And that’s it, we are able to generate a unique, auto-increment id for a sorted collection, with Hadoop’s parallel computing capability. The process is rather complicated, which requires several techniques about Hadoop. It’s worthwhile to dig.</p>
<p>A workable example can be found in my <a href="https://github.com/jizhang/mapred-sandbox/blob/master/src/main/java/com/shzhangji/mapred_sandbox/AutoIncrementId2Job.java" target="_blank" rel="external">Github repository</a>. If you have some more straight-forward approach, please do let me know.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In DBMS world, it’s easy to generate a unique, auto-increment id, using MySQL’s &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/example-auto-increment.html&quot;&gt;AUTO_INCREMENT attribute&lt;/a&gt; on a primary key or MongoDB’s &lt;a href=&quot;http://docs.mongodb.org/manual/tutorial/create-an-auto-incrementing-field/&quot;&gt;Counters Collection&lt;/a&gt; pattern. But when it comes to a distributed, parallel processing framework, like Hadoop Map-reduce, it is not that straight forward. The best solution to identify every record in such framework is to use UUID. But when an integer id is required, it’ll take some steps.&lt;/p&gt;
&lt;h2 id=&quot;Solution-A-Single-Reducer&quot;&gt;&lt;a href=&quot;#Solution-A-Single-Reducer&quot; class=&quot;headerlink&quot; title=&quot;Solution A: Single Reducer&quot;&gt;&lt;/a&gt;Solution A: Single Reducer&lt;/h2&gt;&lt;p&gt;This is the most obvious and simple one, just use the following code to specify reducer numbers to 1:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;job.setNumReduceTasks(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And also obvious, there are several demerits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All mappers output will be copied to one task tracker.&lt;/li&gt;
&lt;li&gt;Only one process is working on shuffel &amp;amp; sort.&lt;/li&gt;
&lt;li&gt;When producing output, there’s also only one process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above is not a problem for small data sets, or at least small mapper outputs. And it is also the approach that Pig and Hive use when they need to perform a total sort. But when hitting a certain threshold, the sort and copy phase will become very slow and unacceptable.&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://shzhangji.com/categories/Notes/"/>
    
      <category term="Big Data" scheme="http://shzhangji.com/categories/Notes/Big-Data/"/>
    
    
  </entry>
  
  <entry>
    <title>Manage Leiningen Project Configuration</title>
    <link href="http://shzhangji.com/blog/2013/04/30/manage-leiningen-project-configuration/"/>
    <id>http://shzhangji.com/blog/2013/04/30/manage-leiningen-project-configuration/</id>
    <published>2013-04-30T08:16:00.000Z</published>
    <updated>2017-01-03T12:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>In Maven projects, we tend to use <code>.properties</code> files to store various configurations, and use Maven profiles to switch between development and production environments. Like the following example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># database.properties</div><div class="line">mydb.jdbcUrl=$&#123;mydb.jdbcUrl&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>development<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mydb.jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/mydb<span class="tag">&lt;/<span class="name">mydb.jdbcUrl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>production<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- This profile could be moved to ~/.m2/settings.xml to increase security. --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mydb.jdbcUrl</span>&gt;</span>jdbc:mysql://10.0.2.15:3306/mydb<span class="tag">&lt;/<span class="name">mydb.jdbcUrl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
<p>As for Leiningen projects, there’s no variable substitution in profile facility, and although in profiles we could use <code>:resources</code> to compact production-wise files into Jar, these files are actually replacing the original ones, instead of being merged. One solution is to strictly seperate environment specific configs from the others, so the replacement will be ok. But here I take another approach, to manually load files from difference locations, and then merge them.</p>
<a id="more"></a>
<h2 id="Read-Configuration-from-clj-Files"><a href="#Read-Configuration-from-clj-Files" class="headerlink" title="Read Configuration from .clj Files"></a>Read Configuration from <code>.clj</code> Files</h2><p>Instead of using <code>.properties</code>, we’ll use <code>.clj</code> files directly, since it’s more expressive and Clojure makes it very easy to utilize them. </p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> read-config [section]</div><div class="line">  (<span class="name"><span class="builtin-name">let</span></span> [read (<span class="name"><span class="builtin-name">fn</span></span> [res-path]</div><div class="line">               (<span class="name"><span class="builtin-name">if-let</span></span> [res (<span class="name">clojure.java.io/resource</span> res-path)]</div><div class="line">                 (<span class="name">read-string</span> (<span class="name"><span class="builtin-name">slurp</span></span> res))</div><div class="line">                 &#123;&#125;))</div><div class="line">        default-name (<span class="name"><span class="builtin-name">str</span></span> (<span class="name"><span class="builtin-name">name</span></span> section) <span class="string">".clj"</span>)</div><div class="line">        default (<span class="name"><span class="builtin-name">read</span></span> default-name)</div><div class="line">        override (<span class="name"><span class="builtin-name">read</span></span> (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"override/"</span> default-name))]</div><div class="line">    (<span class="name"><span class="builtin-name">merge</span></span> default override)))</div></pre></td></tr></table></figure>
<p>This function assumes the following directory layout:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">test-project/</div><div class="line">├── README.md</div><div class="line">├── project.clj</div><div class="line">├── resources</div><div class="line">│   ├── database.clj</div><div class="line">│   └── override</div><div class="line">│       └── database.clj</div><div class="line">└── src</div><div class="line">    └── test_project</div><div class="line">        └── core.clj</div></pre></td></tr></table></figure>
<p>And the <code>database.clj</code>s are like:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">; resources/database.clj</span></div><div class="line">&#123;<span class="symbol">:charset</span> <span class="string">"utf-8"</span></div><div class="line"> <span class="symbol">:mydb</span> &#123;<span class="symbol">:host</span> <span class="string">"127.0.0.1"</span>&#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">; resources/override/database.clj</span></div><div class="line">&#123;<span class="symbol">:mydb</span> &#123;<span class="symbol">:host</span> <span class="string">"10.0.2.15"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>The <code>.clj</code> files simply contains a <code>map</code> object, and we use <code>read-string</code> facility to parse the map. Since the latter map is merged into the former one, we can include some default settings without worrying about whether they’ll be available.</p>
<h2 id="Places-to-Put-‘Outter-Configuration’"><a href="#Places-to-Put-‘Outter-Configuration’" class="headerlink" title="Places to Put ‘Outter Configuration’"></a>Places to Put ‘Outter Configuration’</h2><p>Here I use the word ‘outter’, which means those configs are related to environments, and will override the default settings. In this section, I’ll introduce some typical places to put these outter configs and how to use them.</p>
<h3 id="A-‘resources-override-‘-Directory"><a href="#A-‘resources-override-‘-Directory" class="headerlink" title="A ‘resources/override/‘ Directory"></a>A ‘resources/override/‘ Directory</h3><p>First of all, this directory should be removed from version control, such as <code>.gitignore</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/.project</div><div class="line">/.settings</div><div class="line"></div><div class="line">/resources/override</div></pre></td></tr></table></figure>
<p>And then, developers can put production or local configuration files in this directory.</p>
<p>In production, there’s typically a ‘compiling server’, which can be used to store production configs. After compiling, the Jar file will include the proper configs and are ready to be deployed.</p>
<h3 id="A-Dedicated-Directory-on-Every-Server"><a href="#A-Dedicated-Directory-on-Every-Server" class="headerlink" title="A Dedicated Directory on Every Server"></a>A Dedicated Directory on Every Server</h3><p>We could simply replace the <code>override</code> directory with an absolute path, such as <code>/home/www/config</code>. The pros are that we don’t need to recompile the jar files when config changes, and some of the configs could be shared between different projects. </p>
<p>But in such approach, you’ll need a provisioning tool like Puppet to manage those configs and notify the applications to restart. For something like Hadoop MapReduce job, it’s probably not practical to have such a directory on every compute node.</p>
<p>Another thing I want to mention in this approach is that, I suggest using an environment variable to indicate the path to config directory, not hard-coded in application. As a matter of fact, you could even place all configs into env vars, as suggested by <a href="http://www.12factor.net/config" target="_blank" rel="external">12-factor apps</a>.</p>
<h3 id="A-Central-Configuration-Server"><a href="#A-Central-Configuration-Server" class="headerlink" title="A Central Configuration Server"></a>A Central Configuration Server</h3><p>As for really big corporations, a central configuration server is necessary. One popular option is to use ZooKeeper. Or your companies have some service-discovery mechanism. These are really advanced topics, and I’ll leave them to the readers.</p>
<h2 id="Manage-Configs-in-Application"><a href="#Manage-Configs-in-Application" class="headerlink" title="Manage Configs in Application"></a>Manage Configs in Application</h2><p>Lastly, I’ll share a snippet that’ll manage the configs, it’s actually quite easy:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">def</span></span> ^<span class="symbol">:private</span> config (<span class="name"><span class="builtin-name">atom</span></span> &#123;&#125;))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> get-config</div><div class="line"></div><div class="line">  ([section]</div><div class="line">    (<span class="name"><span class="builtin-name">if-let</span></span> [config-section (<span class="name"><span class="builtin-name">get</span></span> @config section)]</div><div class="line">      config-section</div><div class="line">      (<span class="name"><span class="builtin-name">let</span></span> [config-section (<span class="name">read-config</span> section)]</div><div class="line">        (<span class="name"><span class="builtin-name">swap!</span></span> config assoc section config-section)</div><div class="line">        config-section)))</div><div class="line"></div><div class="line">  ([section item]</div><div class="line">    (<span class="name"><span class="builtin-name">get</span></span> (<span class="name">get-config</span> section) item)))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Maven projects, we tend to use &lt;code&gt;.properties&lt;/code&gt; files to store various configurations, and use Maven profiles to switch between development and production environments. Like the following example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# database.properties&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mydb.jdbcUrl=$&amp;#123;mydb.jdbcUrl&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- pom.xml --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;profiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;development&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activeByDefault&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activeByDefault&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mydb.jdbcUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://127.0.0.1:3306/mydb&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mydb.jdbcUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;production&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- This profile could be moved to ~/.m2/settings.xml to increase security. --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mydb.jdbcUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://10.0.2.15:3306/mydb&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mydb.jdbcUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;profiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As for Leiningen projects, there’s no variable substitution in profile facility, and although in profiles we could use &lt;code&gt;:resources&lt;/code&gt; to compact production-wise files into Jar, these files are actually replacing the original ones, instead of being merged. One solution is to strictly seperate environment specific configs from the others, so the replacement will be ok. But here I take another approach, to manually load files from difference locations, and then merge them.&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://shzhangji.com/categories/Notes/"/>
    
    
      <category term="clojure" scheme="http://shzhangji.com/tags/clojure/"/>
    
  </entry>
  
</feed>
